(function(){var __webpack_modules__={757:function(module,__unused_webpack_exports,__webpack_require__){eval("module.exports = __webpack_require__(666);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU3LmpzIiwibWFwcGluZ3MiOiJBQUFBLHlDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Nob3BpZnktdGhlbWUtbGFiLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzP2EzNGEiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///757\n")},666:function(module){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, "constructor", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, "toString", function() {\n    return "[object Generator]";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === "object") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function("r", "regeneratorRuntime = r")(runtime);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///666\n')},699:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){"use strict";eval('\n// NAMESPACE OBJECT: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\nvar runtime_dom_esm_bundler_namespaceObject = {};\n__webpack_require__.r(runtime_dom_esm_bundler_namespaceObject);\n__webpack_require__.d(runtime_dom_esm_bundler_namespaceObject, {\n  "BaseTransition": function() { return BaseTransition; },\n  "Comment": function() { return runtime_core_esm_bundler_Comment; },\n  "EffectScope": function() { return EffectScope; },\n  "Fragment": function() { return runtime_core_esm_bundler_Fragment; },\n  "KeepAlive": function() { return KeepAlive; },\n  "ReactiveEffect": function() { return ReactiveEffect; },\n  "Static": function() { return Static; },\n  "Suspense": function() { return Suspense; },\n  "Teleport": function() { return Teleport; },\n  "Text": function() { return runtime_core_esm_bundler_Text; },\n  "Transition": function() { return Transition; },\n  "TransitionGroup": function() { return TransitionGroup; },\n  "VueElement": function() { return VueElement; },\n  "callWithAsyncErrorHandling": function() { return callWithAsyncErrorHandling; },\n  "callWithErrorHandling": function() { return callWithErrorHandling; },\n  "camelize": function() { return shared_esm_bundler_camelize; },\n  "capitalize": function() { return shared_esm_bundler_capitalize; },\n  "cloneVNode": function() { return cloneVNode; },\n  "compatUtils": function() { return compatUtils; },\n  "computed": function() { return runtime_core_esm_bundler_computed; },\n  "createApp": function() { return createApp; },\n  "createBlock": function() { return runtime_core_esm_bundler_createBlock; },\n  "createCommentVNode": function() { return runtime_core_esm_bundler_createCommentVNode; },\n  "createElementBlock": function() { return createElementBlock; },\n  "createElementVNode": function() { return createBaseVNode; },\n  "createHydrationRenderer": function() { return createHydrationRenderer; },\n  "createPropsRestProxy": function() { return createPropsRestProxy; },\n  "createRenderer": function() { return createRenderer; },\n  "createSSRApp": function() { return createSSRApp; },\n  "createSlots": function() { return createSlots; },\n  "createStaticVNode": function() { return createStaticVNode; },\n  "createTextVNode": function() { return createTextVNode; },\n  "createVNode": function() { return createVNode; },\n  "customRef": function() { return reactivity_esm_bundler_customRef; },\n  "defineAsyncComponent": function() { return defineAsyncComponent; },\n  "defineComponent": function() { return defineComponent; },\n  "defineCustomElement": function() { return defineCustomElement; },\n  "defineEmits": function() { return defineEmits; },\n  "defineExpose": function() { return defineExpose; },\n  "defineProps": function() { return defineProps; },\n  "defineSSRCustomElement": function() { return defineSSRCustomElement; },\n  "devtools": function() { return devtools; },\n  "effect": function() { return effect; },\n  "effectScope": function() { return reactivity_esm_bundler_effectScope; },\n  "getCurrentInstance": function() { return runtime_core_esm_bundler_getCurrentInstance; },\n  "getCurrentScope": function() { return reactivity_esm_bundler_getCurrentScope; },\n  "getTransitionRawChildren": function() { return getTransitionRawChildren; },\n  "guardReactiveProps": function() { return guardReactiveProps; },\n  "h": function() { return h; },\n  "handleError": function() { return handleError; },\n  "hydrate": function() { return hydrate; },\n  "initCustomFormatter": function() { return runtime_core_esm_bundler_initCustomFormatter; },\n  "initDirectivesForSSR": function() { return initDirectivesForSSR; },\n  "inject": function() { return runtime_core_esm_bundler_inject; },\n  "isMemoSame": function() { return isMemoSame; },\n  "isProxy": function() { return isProxy; },\n  "isReactive": function() { return isReactive; },\n  "isReadonly": function() { return isReadonly; },\n  "isRef": function() { return reactivity_esm_bundler_isRef; },\n  "isRuntimeOnly": function() { return runtime_core_esm_bundler_isRuntimeOnly; },\n  "isShallow": function() { return isShallow; },\n  "isVNode": function() { return runtime_core_esm_bundler_isVNode; },\n  "markRaw": function() { return reactivity_esm_bundler_markRaw; },\n  "mergeDefaults": function() { return mergeDefaults; },\n  "mergeProps": function() { return mergeProps; },\n  "nextTick": function() { return runtime_core_esm_bundler_nextTick; },\n  "normalizeClass": function() { return normalizeClass; },\n  "normalizeProps": function() { return normalizeProps; },\n  "normalizeStyle": function() { return normalizeStyle; },\n  "onActivated": function() { return onActivated; },\n  "onBeforeMount": function() { return onBeforeMount; },\n  "onBeforeUnmount": function() { return runtime_core_esm_bundler_onBeforeUnmount; },\n  "onBeforeUpdate": function() { return runtime_core_esm_bundler_onBeforeUpdate; },\n  "onDeactivated": function() { return onDeactivated; },\n  "onErrorCaptured": function() { return onErrorCaptured; },\n  "onMounted": function() { return runtime_core_esm_bundler_onMounted; },\n  "onRenderTracked": function() { return onRenderTracked; },\n  "onRenderTriggered": function() { return onRenderTriggered; },\n  "onScopeDispose": function() { return onScopeDispose; },\n  "onServerPrefetch": function() { return onServerPrefetch; },\n  "onUnmounted": function() { return runtime_core_esm_bundler_onUnmounted; },\n  "onUpdated": function() { return runtime_core_esm_bundler_onUpdated; },\n  "openBlock": function() { return runtime_core_esm_bundler_openBlock; },\n  "popScopeId": function() { return popScopeId; },\n  "provide": function() { return runtime_core_esm_bundler_provide; },\n  "proxyRefs": function() { return proxyRefs; },\n  "pushScopeId": function() { return pushScopeId; },\n  "queuePostFlushCb": function() { return queuePostFlushCb; },\n  "reactive": function() { return reactivity_esm_bundler_reactive; },\n  "readonly": function() { return reactivity_esm_bundler_readonly; },\n  "ref": function() { return reactivity_esm_bundler_ref; },\n  "registerRuntimeCompiler": function() { return registerRuntimeCompiler; },\n  "render": function() { return render; },\n  "renderList": function() { return renderList; },\n  "renderSlot": function() { return renderSlot; },\n  "resolveComponent": function() { return resolveComponent; },\n  "resolveDirective": function() { return resolveDirective; },\n  "resolveDynamicComponent": function() { return resolveDynamicComponent; },\n  "resolveFilter": function() { return resolveFilter; },\n  "resolveTransitionHooks": function() { return resolveTransitionHooks; },\n  "setBlockTracking": function() { return setBlockTracking; },\n  "setDevtoolsHook": function() { return setDevtoolsHook; },\n  "setTransitionHooks": function() { return setTransitionHooks; },\n  "shallowReactive": function() { return shallowReactive; },\n  "shallowReadonly": function() { return shallowReadonly; },\n  "shallowRef": function() { return reactivity_esm_bundler_shallowRef; },\n  "ssrContextKey": function() { return ssrContextKey; },\n  "ssrUtils": function() { return ssrUtils; },\n  "stop": function() { return stop; },\n  "toDisplayString": function() { return toDisplayString; },\n  "toHandlerKey": function() { return toHandlerKey; },\n  "toHandlers": function() { return toHandlers; },\n  "toRaw": function() { return reactivity_esm_bundler_toRaw; },\n  "toRef": function() { return reactivity_esm_bundler_toRef; },\n  "toRefs": function() { return reactivity_esm_bundler_toRefs; },\n  "transformVNodeArgs": function() { return transformVNodeArgs; },\n  "triggerRef": function() { return triggerRef; },\n  "unref": function() { return reactivity_esm_bundler_unref; },\n  "useAttrs": function() { return useAttrs; },\n  "useCssModule": function() { return useCssModule; },\n  "useCssVars": function() { return useCssVars; },\n  "useSSRContext": function() { return useSSRContext; },\n  "useSlots": function() { return useSlots; },\n  "useTransitionState": function() { return useTransitionState; },\n  "vModelCheckbox": function() { return vModelCheckbox; },\n  "vModelDynamic": function() { return vModelDynamic; },\n  "vModelRadio": function() { return vModelRadio; },\n  "vModelSelect": function() { return vModelSelect; },\n  "vModelText": function() { return vModelText; },\n  "vShow": function() { return vShow; },\n  "version": function() { return version; },\n  "warn": function() { return runtime_core_esm_bundler_warn; },\n  "watch": function() { return runtime_core_esm_bundler_watch; },\n  "watchEffect": function() { return runtime_core_esm_bundler_watchEffect; },\n  "watchPostEffect": function() { return watchPostEffect; },\n  "watchSyncEffect": function() { return watchSyncEffect; },\n  "withAsyncContext": function() { return withAsyncContext; },\n  "withCtx": function() { return withCtx; },\n  "withDefaults": function() { return withDefaults; },\n  "withDirectives": function() { return withDirectives; },\n  "withKeys": function() { return withKeys; },\n  "withMemo": function() { return withMemo; },\n  "withModifiers": function() { return withModifiers; },\n  "withScopeId": function() { return withScopeId; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n;// CONCATENATED MODULE: ./node_modules/@vue/shared/dist/shared.esm-bundler.js\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\r\nfunction shared_esm_bundler_makeMap(str, expectsLowerCase) {\r\n    const map = Object.create(null);\r\n    const list = str.split(\',\');\r\n    for (let i = 0; i < list.length; i++) {\r\n        map[list[i]] = true;\r\n    }\r\n    return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\r\n}\n\n/**\r\n * dev only flag -> name mapping\r\n */\r\nconst PatchFlagNames = {\r\n    [1 /* TEXT */]: `TEXT`,\r\n    [2 /* CLASS */]: `CLASS`,\r\n    [4 /* STYLE */]: `STYLE`,\r\n    [8 /* PROPS */]: `PROPS`,\r\n    [16 /* FULL_PROPS */]: `FULL_PROPS`,\r\n    [32 /* HYDRATE_EVENTS */]: `HYDRATE_EVENTS`,\r\n    [64 /* STABLE_FRAGMENT */]: `STABLE_FRAGMENT`,\r\n    [128 /* KEYED_FRAGMENT */]: `KEYED_FRAGMENT`,\r\n    [256 /* UNKEYED_FRAGMENT */]: `UNKEYED_FRAGMENT`,\r\n    [512 /* NEED_PATCH */]: `NEED_PATCH`,\r\n    [1024 /* DYNAMIC_SLOTS */]: `DYNAMIC_SLOTS`,\r\n    [2048 /* DEV_ROOT_FRAGMENT */]: `DEV_ROOT_FRAGMENT`,\r\n    [-1 /* HOISTED */]: `HOISTED`,\r\n    [-2 /* BAIL */]: `BAIL`\r\n};\n\n/**\r\n * Dev only\r\n */\r\nconst slotFlagsText = {\r\n    [1 /* STABLE */]: \'STABLE\',\r\n    [2 /* DYNAMIC */]: \'DYNAMIC\',\r\n    [3 /* FORWARDED */]: \'FORWARDED\'\r\n};\n\nconst GLOBALS_WHITE_LISTED = \'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,\' +\r\n    \'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,\' +\r\n    \'Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt\';\r\nconst isGloballyWhitelisted = /*#__PURE__*/ shared_esm_bundler_makeMap(GLOBALS_WHITE_LISTED);\n\nconst range = 2;\r\nfunction generateCodeFrame(source, start = 0, end = source.length) {\r\n    // Split the content into individual lines but capture the newline sequence\r\n    // that separated each line. This is important because the actual sequence is\r\n    // needed to properly take into account the full line length for offset\r\n    // comparison\r\n    let lines = source.split(/(\\r?\\n)/);\r\n    // Separate the lines and newline sequences into separate arrays for easier referencing\r\n    const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);\r\n    lines = lines.filter((_, idx) => idx % 2 === 0);\r\n    let count = 0;\r\n    const res = [];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        count +=\r\n            lines[i].length +\r\n                ((newlineSequences[i] && newlineSequences[i].length) || 0);\r\n        if (count >= start) {\r\n            for (let j = i - range; j <= i + range || end > count; j++) {\r\n                if (j < 0 || j >= lines.length)\r\n                    continue;\r\n                const line = j + 1;\r\n                res.push(`${line}${\' \'.repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`);\r\n                const lineLength = lines[j].length;\r\n                const newLineSeqLength = (newlineSequences[j] && newlineSequences[j].length) || 0;\r\n                if (j === i) {\r\n                    // push underline\r\n                    const pad = start - (count - (lineLength + newLineSeqLength));\r\n                    const length = Math.max(1, end > count ? lineLength - pad : end - start);\r\n                    res.push(`   |  ` + \' \'.repeat(pad) + \'^\'.repeat(length));\r\n                }\r\n                else if (j > i) {\r\n                    if (end > count) {\r\n                        const length = Math.max(Math.min(end - count, lineLength), 1);\r\n                        res.push(`   |  ` + \'^\'.repeat(length));\r\n                    }\r\n                    count += lineLength + newLineSeqLength;\r\n                }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    return res.join(\'\\n\');\r\n}\n\n/**\r\n * On the client we only need to offer special cases for boolean attributes that\r\n * have different names from their corresponding dom properties:\r\n * - itemscope -> N/A\r\n * - allowfullscreen -> allowFullscreen\r\n * - formnovalidate -> formNoValidate\r\n * - ismap -> isMap\r\n * - nomodule -> noModule\r\n * - novalidate -> noValidate\r\n * - readonly -> readOnly\r\n */\r\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\r\nconst isSpecialBooleanAttr = /*#__PURE__*/ shared_esm_bundler_makeMap(specialBooleanAttrs);\r\n/**\r\n * The full list is needed during SSR to produce the correct initial markup.\r\n */\r\nconst isBooleanAttr = /*#__PURE__*/ shared_esm_bundler_makeMap(specialBooleanAttrs +\r\n    `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` +\r\n    `loop,open,required,reversed,scoped,seamless,` +\r\n    `checked,muted,multiple,selected`);\r\n/**\r\n * Boolean attributes should be included if the value is truthy or \'\'.\r\n * e.g. `<select multiple>` compiles to `{ multiple: \'\' }`\r\n */\r\nfunction includeBooleanAttr(value) {\r\n    return !!value || value === \'\';\r\n}\r\nconst unsafeAttrCharRE = /[>/="\'\\u0009\\u000a\\u000c\\u0020]/;\r\nconst attrValidationCache = {};\r\nfunction isSSRSafeAttrName(name) {\r\n    if (attrValidationCache.hasOwnProperty(name)) {\r\n        return attrValidationCache[name];\r\n    }\r\n    const isUnsafe = unsafeAttrCharRE.test(name);\r\n    if (isUnsafe) {\r\n        console.error(`unsafe attribute name: ${name}`);\r\n    }\r\n    return (attrValidationCache[name] = !isUnsafe);\r\n}\r\nconst propsToAttrMap = {\r\n    acceptCharset: \'accept-charset\',\r\n    className: \'class\',\r\n    htmlFor: \'for\',\r\n    httpEquiv: \'http-equiv\'\r\n};\r\n/**\r\n * CSS properties that accept plain numbers\r\n */\r\nconst isNoUnitNumericStyleProp = /*#__PURE__*/ (/* unused pure expression or super */ null && (shared_esm_bundler_makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` +\r\n    `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` +\r\n    `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` +\r\n    `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` +\r\n    `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` +\r\n    `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` +\r\n    // SVG\r\n    `fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width`)));\r\n/**\r\n * Known attributes, this is used for stringification of runtime static nodes\r\n * so that we don\'t stringify bindings that cannot be set from HTML.\r\n * Don\'t also forget to allow `data-*` and `aria-*`!\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\r\n */\r\nconst isKnownHtmlAttr = /*#__PURE__*/ (/* unused pure expression or super */ null && (shared_esm_bundler_makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` +\r\n    `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` +\r\n    `border,buffered,capture,challenge,charset,checked,cite,class,code,` +\r\n    `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` +\r\n    `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` +\r\n    `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` +\r\n    `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` +\r\n    `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` +\r\n    `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` +\r\n    `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` +\r\n    `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` +\r\n    `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` +\r\n    `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` +\r\n    `start,step,style,summary,tabindex,target,title,translate,type,usemap,` +\r\n    `value,width,wrap`)));\r\n/**\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute\r\n */\r\nconst isKnownSvgAttr = /*#__PURE__*/ (/* unused pure expression or super */ null && (shared_esm_bundler_makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,` +\r\n    `arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,` +\r\n    `baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,` +\r\n    `clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,` +\r\n    `color-interpolation-filters,color-profile,color-rendering,` +\r\n    `contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,` +\r\n    `descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,` +\r\n    `dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,` +\r\n    `fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,` +\r\n    `font-family,font-size,font-size-adjust,font-stretch,font-style,` +\r\n    `font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,` +\r\n    `glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,` +\r\n    `gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,` +\r\n    `horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,` +\r\n    `k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,` +\r\n    `lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,` +\r\n    `marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,` +\r\n    `mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,` +\r\n    `name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,` +\r\n    `overflow,overline-position,overline-thickness,panose-1,paint-order,path,` +\r\n    `pathLength,patternContentUnits,patternTransform,patternUnits,ping,` +\r\n    `pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,` +\r\n    `preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,` +\r\n    `rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,` +\r\n    `restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,` +\r\n    `specularConstant,specularExponent,speed,spreadMethod,startOffset,` +\r\n    `stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,` +\r\n    `strikethrough-position,strikethrough-thickness,string,stroke,` +\r\n    `stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,` +\r\n    `stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,` +\r\n    `systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,` +\r\n    `text-decoration,text-rendering,textLength,to,transform,transform-origin,` +\r\n    `type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,` +\r\n    `unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,` +\r\n    `v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,` +\r\n    `vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,` +\r\n    `writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,` +\r\n    `xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,` +\r\n    `xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`)));\n\nfunction normalizeStyle(value) {\r\n    if (shared_esm_bundler_isArray(value)) {\r\n        const res = {};\r\n        for (let i = 0; i < value.length; i++) {\r\n            const item = value[i];\r\n            const normalized = shared_esm_bundler_isString(item)\r\n                ? parseStringStyle(item)\r\n                : normalizeStyle(item);\r\n            if (normalized) {\r\n                for (const key in normalized) {\r\n                    res[key] = normalized[key];\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    else if (shared_esm_bundler_isString(value)) {\r\n        return value;\r\n    }\r\n    else if (shared_esm_bundler_isObject(value)) {\r\n        return value;\r\n    }\r\n}\r\nconst listDelimiterRE = /;(?![^(]*\\))/g;\r\nconst propertyDelimiterRE = /:(.+)/;\r\nfunction parseStringStyle(cssText) {\r\n    const ret = {};\r\n    cssText.split(listDelimiterRE).forEach(item => {\r\n        if (item) {\r\n            const tmp = item.split(propertyDelimiterRE);\r\n            tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\r\n        }\r\n    });\r\n    return ret;\r\n}\r\nfunction stringifyStyle(styles) {\r\n    let ret = \'\';\r\n    if (!styles || shared_esm_bundler_isString(styles)) {\r\n        return ret;\r\n    }\r\n    for (const key in styles) {\r\n        const value = styles[key];\r\n        const normalizedKey = key.startsWith(`--`) ? key : shared_esm_bundler_hyphenate(key);\r\n        if (shared_esm_bundler_isString(value) ||\r\n            (typeof value === \'number\' && isNoUnitNumericStyleProp(normalizedKey))) {\r\n            // only render valid values\r\n            ret += `${normalizedKey}:${value};`;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nfunction normalizeClass(value) {\r\n    let res = \'\';\r\n    if (shared_esm_bundler_isString(value)) {\r\n        res = value;\r\n    }\r\n    else if (shared_esm_bundler_isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            const normalized = normalizeClass(value[i]);\r\n            if (normalized) {\r\n                res += normalized + \' \';\r\n            }\r\n        }\r\n    }\r\n    else if (shared_esm_bundler_isObject(value)) {\r\n        for (const name in value) {\r\n            if (value[name]) {\r\n                res += name + \' \';\r\n            }\r\n        }\r\n    }\r\n    return res.trim();\r\n}\r\nfunction normalizeProps(props) {\r\n    if (!props)\r\n        return null;\r\n    let { class: klass, style } = props;\r\n    if (klass && !shared_esm_bundler_isString(klass)) {\r\n        props.class = normalizeClass(klass);\r\n    }\r\n    if (style) {\r\n        props.style = normalizeStyle(style);\r\n    }\r\n    return props;\r\n}\n\n// These tag configs are shared between compiler-dom and runtime-dom, so they\r\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\r\nconst HTML_TAGS = \'html,body,base,head,link,meta,style,title,address,article,aside,footer,\' +\r\n    \'header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,\' +\r\n    \'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,\' +\r\n    \'data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,\' +\r\n    \'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,\' +\r\n    \'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,\' +\r\n    \'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,\' +\r\n    \'option,output,progress,select,textarea,details,dialog,menu,\' +\r\n    \'summary,template,blockquote,iframe,tfoot\';\r\n// https://developer.mozilla.org/en-US/docs/Web/SVG/Element\r\nconst SVG_TAGS = \'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,\' +\r\n    \'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,\' +\r\n    \'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,\' +\r\n    \'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,\' +\r\n    \'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,\' +\r\n    \'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,\' +\r\n    \'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,\' +\r\n    \'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,\' +\r\n    \'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,\' +\r\n    \'text,textPath,title,tspan,unknown,use,view\';\r\nconst VOID_TAGS = \'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr\';\r\n/**\r\n * Compiler only.\r\n * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== \'production\')` flag.\r\n */\r\nconst shared_esm_bundler_isHTMLTag = /*#__PURE__*/ shared_esm_bundler_makeMap(HTML_TAGS);\r\n/**\r\n * Compiler only.\r\n * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== \'production\')` flag.\r\n */\r\nconst shared_esm_bundler_isSVGTag = /*#__PURE__*/ shared_esm_bundler_makeMap(SVG_TAGS);\r\n/**\r\n * Compiler only.\r\n * Do NOT use in runtime code paths unless behind `(process.env.NODE_ENV !== \'production\')` flag.\r\n */\r\nconst isVoidTag = /*#__PURE__*/ shared_esm_bundler_makeMap(VOID_TAGS);\n\nconst escapeRE = /["\'&<>]/;\r\nfunction escapeHtml(string) {\r\n    const str = \'\' + string;\r\n    const match = escapeRE.exec(str);\r\n    if (!match) {\r\n        return str;\r\n    }\r\n    let html = \'\';\r\n    let escaped;\r\n    let index;\r\n    let lastIndex = 0;\r\n    for (index = match.index; index < str.length; index++) {\r\n        switch (str.charCodeAt(index)) {\r\n            case 34: // "\r\n                escaped = \'&quot;\';\r\n                break;\r\n            case 38: // &\r\n                escaped = \'&amp;\';\r\n                break;\r\n            case 39: // \'\r\n                escaped = \'&#39;\';\r\n                break;\r\n            case 60: // <\r\n                escaped = \'&lt;\';\r\n                break;\r\n            case 62: // >\r\n                escaped = \'&gt;\';\r\n                break;\r\n            default:\r\n                continue;\r\n        }\r\n        if (lastIndex !== index) {\r\n            html += str.slice(lastIndex, index);\r\n        }\r\n        lastIndex = index + 1;\r\n        html += escaped;\r\n    }\r\n    return lastIndex !== index ? html + str.slice(lastIndex, index) : html;\r\n}\r\n// https://www.w3.org/TR/html52/syntax.html#comments\r\nconst commentStripRE = /^-?>|\x3c!--|--\x3e|--!>|<!-$/g;\r\nfunction escapeHtmlComment(src) {\r\n    return src.replace(commentStripRE, \'\');\r\n}\n\nfunction looseCompareArrays(a, b) {\r\n    if (a.length !== b.length)\r\n        return false;\r\n    let equal = true;\r\n    for (let i = 0; equal && i < a.length; i++) {\r\n        equal = looseEqual(a[i], b[i]);\r\n    }\r\n    return equal;\r\n}\r\nfunction looseEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    let aValidType = isDate(a);\r\n    let bValidType = isDate(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? a.getTime() === b.getTime() : false;\r\n    }\r\n    aValidType = shared_esm_bundler_isArray(a);\r\n    bValidType = shared_esm_bundler_isArray(b);\r\n    if (aValidType || bValidType) {\r\n        return aValidType && bValidType ? looseCompareArrays(a, b) : false;\r\n    }\r\n    aValidType = shared_esm_bundler_isObject(a);\r\n    bValidType = shared_esm_bundler_isObject(b);\r\n    if (aValidType || bValidType) {\r\n        /* istanbul ignore if: this if will probably never be called */\r\n        if (!aValidType || !bValidType) {\r\n            return false;\r\n        }\r\n        const aKeysCount = Object.keys(a).length;\r\n        const bKeysCount = Object.keys(b).length;\r\n        if (aKeysCount !== bKeysCount) {\r\n            return false;\r\n        }\r\n        for (const key in a) {\r\n            const aHasKey = a.hasOwnProperty(key);\r\n            const bHasKey = b.hasOwnProperty(key);\r\n            if ((aHasKey && !bHasKey) ||\r\n                (!aHasKey && bHasKey) ||\r\n                !looseEqual(a[key], b[key])) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return String(a) === String(b);\r\n}\r\nfunction looseIndexOf(arr, val) {\r\n    return arr.findIndex(item => looseEqual(item, val));\r\n}\n\n/**\r\n * For converting {{ interpolation }} values to displayed strings.\r\n * @private\r\n */\r\nconst toDisplayString = (val) => {\r\n    return shared_esm_bundler_isString(val)\r\n        ? val\r\n        : val == null\r\n            ? \'\'\r\n            : shared_esm_bundler_isArray(val) ||\r\n                (shared_esm_bundler_isObject(val) &&\r\n                    (val.toString === objectToString || !shared_esm_bundler_isFunction(val.toString)))\r\n                ? JSON.stringify(val, replacer, 2)\r\n                : String(val);\r\n};\r\nconst replacer = (_key, val) => {\r\n    // can\'t use isRef here since @vue/shared has no deps\r\n    if (val && val.__v_isRef) {\r\n        return replacer(_key, val.value);\r\n    }\r\n    else if (isMap(val)) {\r\n        return {\r\n            [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {\r\n                entries[`${key} =>`] = val;\r\n                return entries;\r\n            }, {})\r\n        };\r\n    }\r\n    else if (isSet(val)) {\r\n        return {\r\n            [`Set(${val.size})`]: [...val.values()]\r\n        };\r\n    }\r\n    else if (shared_esm_bundler_isObject(val) && !shared_esm_bundler_isArray(val) && !isPlainObject(val)) {\r\n        return String(val);\r\n    }\r\n    return val;\r\n};\n\nconst EMPTY_OBJ = ( false)\r\n    ? 0\r\n    : {};\r\nconst EMPTY_ARR = ( false) ? 0 : [];\r\nconst shared_esm_bundler_NOOP = () => { };\r\n/**\r\n * Always return false.\r\n */\r\nconst shared_esm_bundler_NO = () => false;\r\nconst onRE = /^on[^a-z]/;\r\nconst isOn = (key) => onRE.test(key);\r\nconst isModelListener = (key) => key.startsWith(\'onUpdate:\');\r\nconst shared_esm_bundler_extend = Object.assign;\r\nconst remove = (arr, el) => {\r\n    const i = arr.indexOf(el);\r\n    if (i > -1) {\r\n        arr.splice(i, 1);\r\n    }\r\n};\r\nconst shared_esm_bundler_hasOwnProperty = Object.prototype.hasOwnProperty;\r\nconst shared_esm_bundler_hasOwn = (val, key) => shared_esm_bundler_hasOwnProperty.call(val, key);\r\nconst shared_esm_bundler_isArray = Array.isArray;\r\nconst isMap = (val) => toTypeString(val) === \'[object Map]\';\r\nconst isSet = (val) => toTypeString(val) === \'[object Set]\';\r\nconst isDate = (val) => val instanceof Date;\r\nconst shared_esm_bundler_isFunction = (val) => typeof val === \'function\';\r\nconst shared_esm_bundler_isString = (val) => typeof val === \'string\';\r\nconst isSymbol = (val) => typeof val === \'symbol\';\r\nconst shared_esm_bundler_isObject = (val) => val !== null && typeof val === \'object\';\r\nconst isPromise = (val) => {\r\n    return shared_esm_bundler_isObject(val) && shared_esm_bundler_isFunction(val.then) && shared_esm_bundler_isFunction(val.catch);\r\n};\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value) => objectToString.call(value);\r\nconst shared_esm_bundler_toRawType = (value) => {\r\n    // extract "RawType" from strings like "[object RawType]"\r\n    return toTypeString(value).slice(8, -1);\r\n};\r\nconst isPlainObject = (val) => toTypeString(val) === \'[object Object]\';\r\nconst isIntegerKey = (key) => shared_esm_bundler_isString(key) &&\r\n    key !== \'NaN\' &&\r\n    key[0] !== \'-\' &&\r\n    \'\' + parseInt(key, 10) === key;\r\nconst isReservedProp = /*#__PURE__*/ shared_esm_bundler_makeMap(\r\n// the leading comma is intentional so empty string "" is also included\r\n\',key,ref,ref_for,ref_key,\' +\r\n    \'onVnodeBeforeMount,onVnodeMounted,\' +\r\n    \'onVnodeBeforeUpdate,onVnodeUpdated,\' +\r\n    \'onVnodeBeforeUnmount,onVnodeUnmounted\');\r\nconst shared_esm_bundler_isBuiltInDirective = /*#__PURE__*/ shared_esm_bundler_makeMap(\'bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo\');\r\nconst cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst shared_esm_bundler_camelize = cacheStringFunction((str) => {\r\n    return str.replace(camelizeRE, (_, c) => (c ? c.toUpperCase() : \'\'));\r\n});\r\nconst hyphenateRE = /\\B([A-Z])/g;\r\n/**\r\n * @private\r\n */\r\nconst shared_esm_bundler_hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \'-$1\').toLowerCase());\r\n/**\r\n * @private\r\n */\r\nconst shared_esm_bundler_capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\n/**\r\n * @private\r\n */\r\nconst toHandlerKey = cacheStringFunction((str) => str ? `on${shared_esm_bundler_capitalize(str)}` : ``);\r\n// compare whether a value has changed, accounting for NaN.\r\nconst hasChanged = (value, oldValue) => !Object.is(value, oldValue);\r\nconst invokeArrayFns = (fns, arg) => {\r\n    for (let i = 0; i < fns.length; i++) {\r\n        fns[i](arg);\r\n    }\r\n};\r\nconst def = (obj, key, value) => {\r\n    Object.defineProperty(obj, key, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        value\r\n    });\r\n};\r\nconst toNumber = (val) => {\r\n    const n = parseFloat(val);\r\n    return isNaN(n) ? val : n;\r\n};\r\nlet _globalThis;\r\nconst getGlobalThis = () => {\r\n    return (_globalThis ||\r\n        (_globalThis =\r\n            typeof globalThis !== \'undefined\'\r\n                ? globalThis\r\n                : typeof self !== \'undefined\'\r\n                    ? self\r\n                    : typeof window !== \'undefined\'\r\n                        ? window\r\n                        : typeof __webpack_require__.g !== \'undefined\'\r\n                            ? __webpack_require__.g\r\n                            : {}));\r\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\n\n\nfunction reactivity_esm_bundler_warn(msg, ...args) {\r\n    console.warn(`[Vue warn] ${msg}`, ...args);\r\n}\n\nlet activeEffectScope;\r\nclass EffectScope {\r\n    constructor(detached = false) {\r\n        this.active = true;\r\n        this.effects = [];\r\n        this.cleanups = [];\r\n        if (!detached && activeEffectScope) {\r\n            this.parent = activeEffectScope;\r\n            this.index =\r\n                (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;\r\n        }\r\n    }\r\n    run(fn) {\r\n        if (this.active) {\r\n            try {\r\n                activeEffectScope = this;\r\n                return fn();\r\n            }\r\n            finally {\r\n                activeEffectScope = this.parent;\r\n            }\r\n        }\r\n        else if ((false)) {}\r\n    }\r\n    on() {\r\n        activeEffectScope = this;\r\n    }\r\n    off() {\r\n        activeEffectScope = this.parent;\r\n    }\r\n    stop(fromParent) {\r\n        if (this.active) {\r\n            let i, l;\r\n            for (i = 0, l = this.effects.length; i < l; i++) {\r\n                this.effects[i].stop();\r\n            }\r\n            for (i = 0, l = this.cleanups.length; i < l; i++) {\r\n                this.cleanups[i]();\r\n            }\r\n            if (this.scopes) {\r\n                for (i = 0, l = this.scopes.length; i < l; i++) {\r\n                    this.scopes[i].stop(true);\r\n                }\r\n            }\r\n            // nested scope, dereference from parent to avoid memory leaks\r\n            if (this.parent && !fromParent) {\r\n                // optimized O(1) removal\r\n                const last = this.parent.scopes.pop();\r\n                if (last && last !== this) {\r\n                    this.parent.scopes[this.index] = last;\r\n                    last.index = this.index;\r\n                }\r\n            }\r\n            this.active = false;\r\n        }\r\n    }\r\n}\r\nfunction reactivity_esm_bundler_effectScope(detached) {\r\n    return new EffectScope(detached);\r\n}\r\nfunction recordEffectScope(effect, scope = activeEffectScope) {\r\n    if (scope && scope.active) {\r\n        scope.effects.push(effect);\r\n    }\r\n}\r\nfunction reactivity_esm_bundler_getCurrentScope() {\r\n    return activeEffectScope;\r\n}\r\nfunction onScopeDispose(fn) {\r\n    if (activeEffectScope) {\r\n        activeEffectScope.cleanups.push(fn);\r\n    }\r\n    else if ((false)) {}\r\n}\n\nconst createDep = (effects) => {\r\n    const dep = new Set(effects);\r\n    dep.w = 0;\r\n    dep.n = 0;\r\n    return dep;\r\n};\r\nconst wasTracked = (dep) => (dep.w & trackOpBit) > 0;\r\nconst newTracked = (dep) => (dep.n & trackOpBit) > 0;\r\nconst initDepMarkers = ({ deps }) => {\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].w |= trackOpBit; // set was tracked\r\n        }\r\n    }\r\n};\r\nconst finalizeDepMarkers = (effect) => {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        let ptr = 0;\r\n        for (let i = 0; i < deps.length; i++) {\r\n            const dep = deps[i];\r\n            if (wasTracked(dep) && !newTracked(dep)) {\r\n                dep.delete(effect);\r\n            }\r\n            else {\r\n                deps[ptr++] = dep;\r\n            }\r\n            // clear bits\r\n            dep.w &= ~trackOpBit;\r\n            dep.n &= ~trackOpBit;\r\n        }\r\n        deps.length = ptr;\r\n    }\r\n};\n\nconst targetMap = new WeakMap();\r\n// The number of effects currently being tracked recursively.\r\nlet effectTrackDepth = 0;\r\nlet trackOpBit = 1;\r\n/**\r\n * The bitwise track markers support at most 30 levels of recursion.\r\n * This value is chosen to enable modern JS engines to use a SMI on all platforms.\r\n * When recursion depth is greater, fall back to using a full cleanup.\r\n */\r\nconst maxMarkerBits = 30;\r\nlet activeEffect;\r\nconst ITERATE_KEY = Symbol(( false) ? 0 : \'\');\r\nconst MAP_KEY_ITERATE_KEY = Symbol(( false) ? 0 : \'\');\r\nclass ReactiveEffect {\r\n    constructor(fn, scheduler = null, scope) {\r\n        this.fn = fn;\r\n        this.scheduler = scheduler;\r\n        this.active = true;\r\n        this.deps = [];\r\n        this.parent = undefined;\r\n        recordEffectScope(this, scope);\r\n    }\r\n    run() {\r\n        if (!this.active) {\r\n            return this.fn();\r\n        }\r\n        let parent = activeEffect;\r\n        let lastShouldTrack = shouldTrack;\r\n        while (parent) {\r\n            if (parent === this) {\r\n                return;\r\n            }\r\n            parent = parent.parent;\r\n        }\r\n        try {\r\n            this.parent = activeEffect;\r\n            activeEffect = this;\r\n            shouldTrack = true;\r\n            trackOpBit = 1 << ++effectTrackDepth;\r\n            if (effectTrackDepth <= maxMarkerBits) {\r\n                initDepMarkers(this);\r\n            }\r\n            else {\r\n                cleanupEffect(this);\r\n            }\r\n            return this.fn();\r\n        }\r\n        finally {\r\n            if (effectTrackDepth <= maxMarkerBits) {\r\n                finalizeDepMarkers(this);\r\n            }\r\n            trackOpBit = 1 << --effectTrackDepth;\r\n            activeEffect = this.parent;\r\n            shouldTrack = lastShouldTrack;\r\n            this.parent = undefined;\r\n        }\r\n    }\r\n    stop() {\r\n        if (this.active) {\r\n            cleanupEffect(this);\r\n            if (this.onStop) {\r\n                this.onStop();\r\n            }\r\n            this.active = false;\r\n        }\r\n    }\r\n}\r\nfunction cleanupEffect(effect) {\r\n    const { deps } = effect;\r\n    if (deps.length) {\r\n        for (let i = 0; i < deps.length; i++) {\r\n            deps[i].delete(effect);\r\n        }\r\n        deps.length = 0;\r\n    }\r\n}\r\nfunction effect(fn, options) {\r\n    if (fn.effect) {\r\n        fn = fn.effect.fn;\r\n    }\r\n    const _effect = new ReactiveEffect(fn);\r\n    if (options) {\r\n        shared_esm_bundler_extend(_effect, options);\r\n        if (options.scope)\r\n            recordEffectScope(_effect, options.scope);\r\n    }\r\n    if (!options || !options.lazy) {\r\n        _effect.run();\r\n    }\r\n    const runner = _effect.run.bind(_effect);\r\n    runner.effect = _effect;\r\n    return runner;\r\n}\r\nfunction stop(runner) {\r\n    runner.effect.stop();\r\n}\r\nlet shouldTrack = true;\r\nconst trackStack = [];\r\nfunction pauseTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = false;\r\n}\r\nfunction enableTracking() {\r\n    trackStack.push(shouldTrack);\r\n    shouldTrack = true;\r\n}\r\nfunction resetTracking() {\r\n    const last = trackStack.pop();\r\n    shouldTrack = last === undefined ? true : last;\r\n}\r\nfunction track(target, type, key) {\r\n    if (shouldTrack && activeEffect) {\r\n        let depsMap = targetMap.get(target);\r\n        if (!depsMap) {\r\n            targetMap.set(target, (depsMap = new Map()));\r\n        }\r\n        let dep = depsMap.get(key);\r\n        if (!dep) {\r\n            depsMap.set(key, (dep = createDep()));\r\n        }\r\n        const eventInfo = ( false)\r\n            ? 0\r\n            : undefined;\r\n        trackEffects(dep, eventInfo);\r\n    }\r\n}\r\nfunction trackEffects(dep, debuggerEventExtraInfo) {\r\n    let shouldTrack = false;\r\n    if (effectTrackDepth <= maxMarkerBits) {\r\n        if (!newTracked(dep)) {\r\n            dep.n |= trackOpBit; // set newly tracked\r\n            shouldTrack = !wasTracked(dep);\r\n        }\r\n    }\r\n    else {\r\n        // Full cleanup mode.\r\n        shouldTrack = !dep.has(activeEffect);\r\n    }\r\n    if (shouldTrack) {\r\n        dep.add(activeEffect);\r\n        activeEffect.deps.push(dep);\r\n        if (false) {}\r\n    }\r\n}\r\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\r\n    const depsMap = targetMap.get(target);\r\n    if (!depsMap) {\r\n        // never been tracked\r\n        return;\r\n    }\r\n    let deps = [];\r\n    if (type === "clear" /* CLEAR */) {\r\n        // collection being cleared\r\n        // trigger all effects for target\r\n        deps = [...depsMap.values()];\r\n    }\r\n    else if (key === \'length\' && shared_esm_bundler_isArray(target)) {\r\n        depsMap.forEach((dep, key) => {\r\n            if (key === \'length\' || key >= newValue) {\r\n                deps.push(dep);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        // schedule runs for SET | ADD | DELETE\r\n        if (key !== void 0) {\r\n            deps.push(depsMap.get(key));\r\n        }\r\n        // also run for iteration key on ADD | DELETE | Map.SET\r\n        switch (type) {\r\n            case "add" /* ADD */:\r\n                if (!shared_esm_bundler_isArray(target)) {\r\n                    deps.push(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                else if (isIntegerKey(key)) {\r\n                    // new index added to array -> length changes\r\n                    deps.push(depsMap.get(\'length\'));\r\n                }\r\n                break;\r\n            case "delete" /* DELETE */:\r\n                if (!shared_esm_bundler_isArray(target)) {\r\n                    deps.push(depsMap.get(ITERATE_KEY));\r\n                    if (isMap(target)) {\r\n                        deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n                    }\r\n                }\r\n                break;\r\n            case "set" /* SET */:\r\n                if (isMap(target)) {\r\n                    deps.push(depsMap.get(ITERATE_KEY));\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    const eventInfo = ( false)\r\n        ? 0\r\n        : undefined;\r\n    if (deps.length === 1) {\r\n        if (deps[0]) {\r\n            if ((false)) {}\r\n            else {\r\n                triggerEffects(deps[0]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const effects = [];\r\n        for (const dep of deps) {\r\n            if (dep) {\r\n                effects.push(...dep);\r\n            }\r\n        }\r\n        if ((false)) {}\r\n        else {\r\n            triggerEffects(createDep(effects));\r\n        }\r\n    }\r\n}\r\nfunction triggerEffects(dep, debuggerEventExtraInfo) {\r\n    // spread into array for stabilization\r\n    for (const effect of shared_esm_bundler_isArray(dep) ? dep : [...dep]) {\r\n        if (effect !== activeEffect || effect.allowRecurse) {\r\n            if (false) {}\r\n            if (effect.scheduler) {\r\n                effect.scheduler();\r\n            }\r\n            else {\r\n                effect.run();\r\n            }\r\n        }\r\n    }\r\n}\n\nconst isNonTrackableKeys = /*#__PURE__*/ shared_esm_bundler_makeMap(`__proto__,__v_isRef,__isVue`);\r\nconst builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol)\r\n    .map(key => Symbol[key])\r\n    .filter(isSymbol));\r\nconst get = /*#__PURE__*/ createGetter();\r\nconst shallowGet = /*#__PURE__*/ createGetter(false, true);\r\nconst readonlyGet = /*#__PURE__*/ createGetter(true);\r\nconst shallowReadonlyGet = /*#__PURE__*/ createGetter(true, true);\r\nconst arrayInstrumentations = /*#__PURE__*/ createArrayInstrumentations();\r\nfunction createArrayInstrumentations() {\r\n    const instrumentations = {};\r\n    [\'includes\', \'indexOf\', \'lastIndexOf\'].forEach(key => {\r\n        instrumentations[key] = function (...args) {\r\n            const arr = reactivity_esm_bundler_toRaw(this);\r\n            for (let i = 0, l = this.length; i < l; i++) {\r\n                track(arr, "get" /* GET */, i + \'\');\r\n            }\r\n            // we run the method using the original args first (which may be reactive)\r\n            const res = arr[key](...args);\r\n            if (res === -1 || res === false) {\r\n                // if that didn\'t work, run it again using raw values.\r\n                return arr[key](...args.map(reactivity_esm_bundler_toRaw));\r\n            }\r\n            else {\r\n                return res;\r\n            }\r\n        };\r\n    });\r\n    [\'push\', \'pop\', \'shift\', \'unshift\', \'splice\'].forEach(key => {\r\n        instrumentations[key] = function (...args) {\r\n            pauseTracking();\r\n            const res = reactivity_esm_bundler_toRaw(this)[key].apply(this, args);\r\n            resetTracking();\r\n            return res;\r\n        };\r\n    });\r\n    return instrumentations;\r\n}\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n    return function get(target, key, receiver) {\r\n        if (key === "__v_isReactive" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === "__v_isReadonly" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === "__v_isShallow" /* IS_SHALLOW */) {\r\n            return shallow;\r\n        }\r\n        else if (key === "__v_raw" /* RAW */ &&\r\n            receiver ===\r\n                (isReadonly\r\n                    ? shallow\r\n                        ? shallowReadonlyMap\r\n                        : readonlyMap\r\n                    : shallow\r\n                        ? shallowReactiveMap\r\n                        : reactiveMap).get(target)) {\r\n            return target;\r\n        }\r\n        const targetIsArray = shared_esm_bundler_isArray(target);\r\n        if (!isReadonly && targetIsArray && shared_esm_bundler_hasOwn(arrayInstrumentations, key)) {\r\n            return Reflect.get(arrayInstrumentations, key, receiver);\r\n        }\r\n        const res = Reflect.get(target, key, receiver);\r\n        if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\r\n            return res;\r\n        }\r\n        if (!isReadonly) {\r\n            track(target, "get" /* GET */, key);\r\n        }\r\n        if (shallow) {\r\n            return res;\r\n        }\r\n        if (reactivity_esm_bundler_isRef(res)) {\r\n            // ref unwrapping - does not apply for Array + integer key.\r\n            const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\r\n            return shouldUnwrap ? res.value : res;\r\n        }\r\n        if (shared_esm_bundler_isObject(res)) {\r\n            // Convert returned value into a proxy as well. we do the isObject check\r\n            // here to avoid invalid value warning. Also need to lazy access readonly\r\n            // and reactive here to avoid circular dependency.\r\n            return isReadonly ? reactivity_esm_bundler_readonly(res) : reactivity_esm_bundler_reactive(res);\r\n        }\r\n        return res;\r\n    };\r\n}\r\nconst reactivity_esm_bundler_set = /*#__PURE__*/ createSetter();\r\nconst shallowSet = /*#__PURE__*/ createSetter(true);\r\nfunction createSetter(shallow = false) {\r\n    return function set(target, key, value, receiver) {\r\n        let oldValue = target[key];\r\n        if (isReadonly(oldValue) && reactivity_esm_bundler_isRef(oldValue) && !reactivity_esm_bundler_isRef(value)) {\r\n            return false;\r\n        }\r\n        if (!shallow && !isReadonly(value)) {\r\n            if (!isShallow(value)) {\r\n                value = reactivity_esm_bundler_toRaw(value);\r\n                oldValue = reactivity_esm_bundler_toRaw(oldValue);\r\n            }\r\n            if (!shared_esm_bundler_isArray(target) && reactivity_esm_bundler_isRef(oldValue) && !reactivity_esm_bundler_isRef(value)) {\r\n                oldValue.value = value;\r\n                return true;\r\n            }\r\n        }\r\n        const hadKey = shared_esm_bundler_isArray(target) && isIntegerKey(key)\r\n            ? Number(key) < target.length\r\n            : shared_esm_bundler_hasOwn(target, key);\r\n        const result = Reflect.set(target, key, value, receiver);\r\n        // don\'t trigger if target is something up in the prototype chain of original\r\n        if (target === reactivity_esm_bundler_toRaw(receiver)) {\r\n            if (!hadKey) {\r\n                trigger(target, "add" /* ADD */, key, value);\r\n            }\r\n            else if (hasChanged(value, oldValue)) {\r\n                trigger(target, "set" /* SET */, key, value, oldValue);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n}\r\nfunction deleteProperty(target, key) {\r\n    const hadKey = shared_esm_bundler_hasOwn(target, key);\r\n    const oldValue = target[key];\r\n    const result = Reflect.deleteProperty(target, key);\r\n    if (result && hadKey) {\r\n        trigger(target, "delete" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction has(target, key) {\r\n    const result = Reflect.has(target, key);\r\n    if (!isSymbol(key) || !builtInSymbols.has(key)) {\r\n        track(target, "has" /* HAS */, key);\r\n    }\r\n    return result;\r\n}\r\nfunction ownKeys(target) {\r\n    track(target, "iterate" /* ITERATE */, shared_esm_bundler_isArray(target) ? \'length\' : ITERATE_KEY);\r\n    return Reflect.ownKeys(target);\r\n}\r\nconst mutableHandlers = {\r\n    get,\r\n    set: reactivity_esm_bundler_set,\r\n    deleteProperty,\r\n    has,\r\n    ownKeys\r\n};\r\nconst readonlyHandlers = {\r\n    get: readonlyGet,\r\n    set(target, key) {\r\n        if ((false)) {}\r\n        return true;\r\n    },\r\n    deleteProperty(target, key) {\r\n        if ((false)) {}\r\n        return true;\r\n    }\r\n};\r\nconst shallowReactiveHandlers = /*#__PURE__*/ shared_esm_bundler_extend({}, mutableHandlers, {\r\n    get: shallowGet,\r\n    set: shallowSet\r\n});\r\n// Props handlers are special in the sense that it should not unwrap top-level\r\n// refs (in order to allow refs to be explicitly passed down), but should\r\n// retain the reactivity of the normal readonly object.\r\nconst shallowReadonlyHandlers = /*#__PURE__*/ shared_esm_bundler_extend({}, readonlyHandlers, {\r\n    get: shallowReadonlyGet\r\n});\n\nconst toShallow = (value) => value;\r\nconst getProto = (v) => Reflect.getPrototypeOf(v);\r\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\r\n    // #1772: readonly(reactive(Map)) should return readonly + reactive version\r\n    // of the value\r\n    target = target["__v_raw" /* RAW */];\r\n    const rawTarget = reactivity_esm_bundler_toRaw(target);\r\n    const rawKey = reactivity_esm_bundler_toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, "get" /* GET */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, "get" /* GET */, rawKey);\r\n    const { has } = getProto(rawTarget);\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n    if (has.call(rawTarget, key)) {\r\n        return wrap(target.get(key));\r\n    }\r\n    else if (has.call(rawTarget, rawKey)) {\r\n        return wrap(target.get(rawKey));\r\n    }\r\n    else if (target !== rawTarget) {\r\n        // #3602 readonly(reactive(Map))\r\n        // ensure that the nested reactive `Map` can do tracking for itself\r\n        target.get(key);\r\n    }\r\n}\r\nfunction has$1(key, isReadonly = false) {\r\n    const target = this["__v_raw" /* RAW */];\r\n    const rawTarget = reactivity_esm_bundler_toRaw(target);\r\n    const rawKey = reactivity_esm_bundler_toRaw(key);\r\n    if (key !== rawKey) {\r\n        !isReadonly && track(rawTarget, "has" /* HAS */, key);\r\n    }\r\n    !isReadonly && track(rawTarget, "has" /* HAS */, rawKey);\r\n    return key === rawKey\r\n        ? target.has(key)\r\n        : target.has(key) || target.has(rawKey);\r\n}\r\nfunction size(target, isReadonly = false) {\r\n    target = target["__v_raw" /* RAW */];\r\n    !isReadonly && track(reactivity_esm_bundler_toRaw(target), "iterate" /* ITERATE */, ITERATE_KEY);\r\n    return Reflect.get(target, \'size\', target);\r\n}\r\nfunction add(value) {\r\n    value = reactivity_esm_bundler_toRaw(value);\r\n    const target = reactivity_esm_bundler_toRaw(this);\r\n    const proto = getProto(target);\r\n    const hadKey = proto.has.call(target, value);\r\n    if (!hadKey) {\r\n        target.add(value);\r\n        trigger(target, "add" /* ADD */, value, value);\r\n    }\r\n    return this;\r\n}\r\nfunction reactivity_esm_bundler_set$1(key, value) {\r\n    value = reactivity_esm_bundler_toRaw(value);\r\n    const target = reactivity_esm_bundler_toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = reactivity_esm_bundler_toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((false)) {}\r\n    const oldValue = get.call(target, key);\r\n    target.set(key, value);\r\n    if (!hadKey) {\r\n        trigger(target, "add" /* ADD */, key, value);\r\n    }\r\n    else if (hasChanged(value, oldValue)) {\r\n        trigger(target, "set" /* SET */, key, value, oldValue);\r\n    }\r\n    return this;\r\n}\r\nfunction deleteEntry(key) {\r\n    const target = reactivity_esm_bundler_toRaw(this);\r\n    const { has, get } = getProto(target);\r\n    let hadKey = has.call(target, key);\r\n    if (!hadKey) {\r\n        key = reactivity_esm_bundler_toRaw(key);\r\n        hadKey = has.call(target, key);\r\n    }\r\n    else if ((false)) {}\r\n    const oldValue = get ? get.call(target, key) : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.delete(key);\r\n    if (hadKey) {\r\n        trigger(target, "delete" /* DELETE */, key, undefined, oldValue);\r\n    }\r\n    return result;\r\n}\r\nfunction clear() {\r\n    const target = reactivity_esm_bundler_toRaw(this);\r\n    const hadItems = target.size !== 0;\r\n    const oldTarget = ( false)\r\n        ? 0\r\n        : undefined;\r\n    // forward the operation before queueing reactions\r\n    const result = target.clear();\r\n    if (hadItems) {\r\n        trigger(target, "clear" /* CLEAR */, undefined, undefined, oldTarget);\r\n    }\r\n    return result;\r\n}\r\nfunction createForEach(isReadonly, isShallow) {\r\n    return function forEach(callback, thisArg) {\r\n        const observed = this;\r\n        const target = observed["__v_raw" /* RAW */];\r\n        const rawTarget = reactivity_esm_bundler_toRaw(target);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly && track(rawTarget, "iterate" /* ITERATE */, ITERATE_KEY);\r\n        return target.forEach((value, key) => {\r\n            // important: make sure the callback is\r\n            // 1. invoked with the reactive map as `this` and 3rd arg\r\n            // 2. the value received should be a corresponding reactive/readonly.\r\n            return callback.call(thisArg, wrap(value), wrap(key), observed);\r\n        });\r\n    };\r\n}\r\nfunction createIterableMethod(method, isReadonly, isShallow) {\r\n    return function (...args) {\r\n        const target = this["__v_raw" /* RAW */];\r\n        const rawTarget = reactivity_esm_bundler_toRaw(target);\r\n        const targetIsMap = isMap(rawTarget);\r\n        const isPair = method === \'entries\' || (method === Symbol.iterator && targetIsMap);\r\n        const isKeyOnly = method === \'keys\' && targetIsMap;\r\n        const innerIterator = target[method](...args);\r\n        const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n        !isReadonly &&\r\n            track(rawTarget, "iterate" /* ITERATE */, isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\r\n        // return a wrapped iterator which returns observed versions of the\r\n        // values emitted from the real iterator\r\n        return {\r\n            // iterator protocol\r\n            next() {\r\n                const { value, done } = innerIterator.next();\r\n                return done\r\n                    ? { value, done }\r\n                    : {\r\n                        value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n                        done\r\n                    };\r\n            },\r\n            // iterable protocol\r\n            [Symbol.iterator]() {\r\n                return this;\r\n            }\r\n        };\r\n    };\r\n}\r\nfunction createReadonlyMethod(type) {\r\n    return function (...args) {\r\n        if ((false)) {}\r\n        return type === "delete" /* DELETE */ ? false : this;\r\n    };\r\n}\r\nfunction createInstrumentations() {\r\n    const mutableInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add,\r\n        set: reactivity_esm_bundler_set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, false)\r\n    };\r\n    const shallowInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, false, true);\r\n        },\r\n        get size() {\r\n            return size(this);\r\n        },\r\n        has: has$1,\r\n        add,\r\n        set: reactivity_esm_bundler_set$1,\r\n        delete: deleteEntry,\r\n        clear,\r\n        forEach: createForEach(false, true)\r\n    };\r\n    const readonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod("add" /* ADD */),\r\n        set: createReadonlyMethod("set" /* SET */),\r\n        delete: createReadonlyMethod("delete" /* DELETE */),\r\n        clear: createReadonlyMethod("clear" /* CLEAR */),\r\n        forEach: createForEach(true, false)\r\n    };\r\n    const shallowReadonlyInstrumentations = {\r\n        get(key) {\r\n            return get$1(this, key, true, true);\r\n        },\r\n        get size() {\r\n            return size(this, true);\r\n        },\r\n        has(key) {\r\n            return has$1.call(this, key, true);\r\n        },\r\n        add: createReadonlyMethod("add" /* ADD */),\r\n        set: createReadonlyMethod("set" /* SET */),\r\n        delete: createReadonlyMethod("delete" /* DELETE */),\r\n        clear: createReadonlyMethod("clear" /* CLEAR */),\r\n        forEach: createForEach(true, true)\r\n    };\r\n    const iteratorMethods = [\'keys\', \'values\', \'entries\', Symbol.iterator];\r\n    iteratorMethods.forEach(method => {\r\n        mutableInstrumentations[method] = createIterableMethod(method, false, false);\r\n        readonlyInstrumentations[method] = createIterableMethod(method, true, false);\r\n        shallowInstrumentations[method] = createIterableMethod(method, false, true);\r\n        shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);\r\n    });\r\n    return [\r\n        mutableInstrumentations,\r\n        readonlyInstrumentations,\r\n        shallowInstrumentations,\r\n        shallowReadonlyInstrumentations\r\n    ];\r\n}\r\nconst [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = /* #__PURE__*/ createInstrumentations();\r\nfunction createInstrumentationGetter(isReadonly, shallow) {\r\n    const instrumentations = shallow\r\n        ? isReadonly\r\n            ? shallowReadonlyInstrumentations\r\n            : shallowInstrumentations\r\n        : isReadonly\r\n            ? readonlyInstrumentations\r\n            : mutableInstrumentations;\r\n    return (target, key, receiver) => {\r\n        if (key === "__v_isReactive" /* IS_REACTIVE */) {\r\n            return !isReadonly;\r\n        }\r\n        else if (key === "__v_isReadonly" /* IS_READONLY */) {\r\n            return isReadonly;\r\n        }\r\n        else if (key === "__v_raw" /* RAW */) {\r\n            return target;\r\n        }\r\n        return Reflect.get(shared_esm_bundler_hasOwn(instrumentations, key) && key in target\r\n            ? instrumentations\r\n            : target, key, receiver);\r\n    };\r\n}\r\nconst mutableCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, false)\r\n};\r\nconst shallowCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(false, true)\r\n};\r\nconst readonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, false)\r\n};\r\nconst shallowReadonlyCollectionHandlers = {\r\n    get: /*#__PURE__*/ createInstrumentationGetter(true, true)\r\n};\r\nfunction checkIdentityKeys(target, has, key) {\r\n    const rawKey = reactivity_esm_bundler_toRaw(key);\r\n    if (rawKey !== key && has.call(target, rawKey)) {\r\n        const type = toRawType(target);\r\n        console.warn(`Reactive ${type} contains both the raw and reactive ` +\r\n            `versions of the same object${type === `Map` ? ` as keys` : ``}, ` +\r\n            `which can lead to inconsistencies. ` +\r\n            `Avoid differentiating between the raw and reactive versions ` +\r\n            `of an object and only use the reactive version if possible.`);\r\n    }\r\n}\n\nconst reactiveMap = new WeakMap();\r\nconst shallowReactiveMap = new WeakMap();\r\nconst readonlyMap = new WeakMap();\r\nconst shallowReadonlyMap = new WeakMap();\r\nfunction targetTypeMap(rawType) {\r\n    switch (rawType) {\r\n        case \'Object\':\r\n        case \'Array\':\r\n            return 1 /* COMMON */;\r\n        case \'Map\':\r\n        case \'Set\':\r\n        case \'WeakMap\':\r\n        case \'WeakSet\':\r\n            return 2 /* COLLECTION */;\r\n        default:\r\n            return 0 /* INVALID */;\r\n    }\r\n}\r\nfunction getTargetType(value) {\r\n    return value["__v_skip" /* SKIP */] || !Object.isExtensible(value)\r\n        ? 0 /* INVALID */\r\n        : targetTypeMap(shared_esm_bundler_toRawType(value));\r\n}\r\nfunction reactivity_esm_bundler_reactive(target) {\r\n    // if trying to observe a readonly proxy, return the readonly version.\r\n    if (isReadonly(target)) {\r\n        return target;\r\n    }\r\n    return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\r\n}\r\n/**\r\n * Return a shallowly-reactive copy of the original object, where only the root\r\n * level properties are reactive. It also does not auto-unwrap refs (even at the\r\n * root level).\r\n */\r\nfunction shallowReactive(target) {\r\n    return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);\r\n}\r\n/**\r\n * Creates a readonly copy of the original object. Note the returned copy is not\r\n * made reactive, but `readonly` can be called on an already reactive object.\r\n */\r\nfunction reactivity_esm_bundler_readonly(target) {\r\n    return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\r\n}\r\n/**\r\n * Returns a reactive-copy of the original object, where only the root level\r\n * properties are readonly, and does NOT unwrap refs nor recursively convert\r\n * returned properties.\r\n * This is used for creating the props proxy object for stateful components.\r\n */\r\nfunction shallowReadonly(target) {\r\n    return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);\r\n}\r\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\r\n    if (!shared_esm_bundler_isObject(target)) {\r\n        if ((false)) {}\r\n        return target;\r\n    }\r\n    // target is already a Proxy, return it.\r\n    // exception: calling readonly() on a reactive object\r\n    if (target["__v_raw" /* RAW */] &&\r\n        !(isReadonly && target["__v_isReactive" /* IS_REACTIVE */])) {\r\n        return target;\r\n    }\r\n    // target already has corresponding Proxy\r\n    const existingProxy = proxyMap.get(target);\r\n    if (existingProxy) {\r\n        return existingProxy;\r\n    }\r\n    // only a whitelist of value types can be observed.\r\n    const targetType = getTargetType(target);\r\n    if (targetType === 0 /* INVALID */) {\r\n        return target;\r\n    }\r\n    const proxy = new Proxy(target, targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers);\r\n    proxyMap.set(target, proxy);\r\n    return proxy;\r\n}\r\nfunction isReactive(value) {\r\n    if (isReadonly(value)) {\r\n        return isReactive(value["__v_raw" /* RAW */]);\r\n    }\r\n    return !!(value && value["__v_isReactive" /* IS_REACTIVE */]);\r\n}\r\nfunction isReadonly(value) {\r\n    return !!(value && value["__v_isReadonly" /* IS_READONLY */]);\r\n}\r\nfunction isShallow(value) {\r\n    return !!(value && value["__v_isShallow" /* IS_SHALLOW */]);\r\n}\r\nfunction isProxy(value) {\r\n    return isReactive(value) || isReadonly(value);\r\n}\r\nfunction reactivity_esm_bundler_toRaw(observed) {\r\n    const raw = observed && observed["__v_raw" /* RAW */];\r\n    return raw ? reactivity_esm_bundler_toRaw(raw) : observed;\r\n}\r\nfunction reactivity_esm_bundler_markRaw(value) {\r\n    def(value, "__v_skip" /* SKIP */, true);\r\n    return value;\r\n}\r\nconst toReactive = (value) => shared_esm_bundler_isObject(value) ? reactivity_esm_bundler_reactive(value) : value;\r\nconst toReadonly = (value) => shared_esm_bundler_isObject(value) ? reactivity_esm_bundler_readonly(value) : value;\n\nfunction trackRefValue(ref) {\r\n    if (shouldTrack && activeEffect) {\r\n        ref = reactivity_esm_bundler_toRaw(ref);\r\n        if ((false)) {}\r\n        else {\r\n            trackEffects(ref.dep || (ref.dep = createDep()));\r\n        }\r\n    }\r\n}\r\nfunction triggerRefValue(ref, newVal) {\r\n    ref = reactivity_esm_bundler_toRaw(ref);\r\n    if (ref.dep) {\r\n        if ((false)) {}\r\n        else {\r\n            triggerEffects(ref.dep);\r\n        }\r\n    }\r\n}\r\nfunction reactivity_esm_bundler_isRef(r) {\r\n    return !!(r && r.__v_isRef === true);\r\n}\r\nfunction reactivity_esm_bundler_ref(value) {\r\n    return createRef(value, false);\r\n}\r\nfunction reactivity_esm_bundler_shallowRef(value) {\r\n    return createRef(value, true);\r\n}\r\nfunction createRef(rawValue, shallow) {\r\n    if (reactivity_esm_bundler_isRef(rawValue)) {\r\n        return rawValue;\r\n    }\r\n    return new RefImpl(rawValue, shallow);\r\n}\r\nclass RefImpl {\r\n    constructor(value, __v_isShallow) {\r\n        this.__v_isShallow = __v_isShallow;\r\n        this.dep = undefined;\r\n        this.__v_isRef = true;\r\n        this._rawValue = __v_isShallow ? value : reactivity_esm_bundler_toRaw(value);\r\n        this._value = __v_isShallow ? value : toReactive(value);\r\n    }\r\n    get value() {\r\n        trackRefValue(this);\r\n        return this._value;\r\n    }\r\n    set value(newVal) {\r\n        newVal = this.__v_isShallow ? newVal : reactivity_esm_bundler_toRaw(newVal);\r\n        if (hasChanged(newVal, this._rawValue)) {\r\n            this._rawValue = newVal;\r\n            this._value = this.__v_isShallow ? newVal : toReactive(newVal);\r\n            triggerRefValue(this, newVal);\r\n        }\r\n    }\r\n}\r\nfunction triggerRef(ref) {\r\n    triggerRefValue(ref, ( false) ? 0 : void 0);\r\n}\r\nfunction reactivity_esm_bundler_unref(ref) {\r\n    return reactivity_esm_bundler_isRef(ref) ? ref.value : ref;\r\n}\r\nconst shallowUnwrapHandlers = {\r\n    get: (target, key, receiver) => reactivity_esm_bundler_unref(Reflect.get(target, key, receiver)),\r\n    set: (target, key, value, receiver) => {\r\n        const oldValue = target[key];\r\n        if (reactivity_esm_bundler_isRef(oldValue) && !reactivity_esm_bundler_isRef(value)) {\r\n            oldValue.value = value;\r\n            return true;\r\n        }\r\n        else {\r\n            return Reflect.set(target, key, value, receiver);\r\n        }\r\n    }\r\n};\r\nfunction proxyRefs(objectWithRefs) {\r\n    return isReactive(objectWithRefs)\r\n        ? objectWithRefs\r\n        : new Proxy(objectWithRefs, shallowUnwrapHandlers);\r\n}\r\nclass CustomRefImpl {\r\n    constructor(factory) {\r\n        this.dep = undefined;\r\n        this.__v_isRef = true;\r\n        const { get, set } = factory(() => trackRefValue(this), () => triggerRefValue(this));\r\n        this._get = get;\r\n        this._set = set;\r\n    }\r\n    get value() {\r\n        return this._get();\r\n    }\r\n    set value(newVal) {\r\n        this._set(newVal);\r\n    }\r\n}\r\nfunction reactivity_esm_bundler_customRef(factory) {\r\n    return new CustomRefImpl(factory);\r\n}\r\nfunction reactivity_esm_bundler_toRefs(object) {\r\n    if (false) {}\r\n    const ret = shared_esm_bundler_isArray(object) ? new Array(object.length) : {};\r\n    for (const key in object) {\r\n        ret[key] = reactivity_esm_bundler_toRef(object, key);\r\n    }\r\n    return ret;\r\n}\r\nclass ObjectRefImpl {\r\n    constructor(_object, _key, _defaultValue) {\r\n        this._object = _object;\r\n        this._key = _key;\r\n        this._defaultValue = _defaultValue;\r\n        this.__v_isRef = true;\r\n    }\r\n    get value() {\r\n        const val = this._object[this._key];\r\n        return val === undefined ? this._defaultValue : val;\r\n    }\r\n    set value(newVal) {\r\n        this._object[this._key] = newVal;\r\n    }\r\n}\r\nfunction reactivity_esm_bundler_toRef(object, key, defaultValue) {\r\n    const val = object[key];\r\n    return reactivity_esm_bundler_isRef(val)\r\n        ? val\r\n        : new ObjectRefImpl(object, key, defaultValue);\r\n}\n\nclass ComputedRefImpl {\r\n    constructor(getter, _setter, isReadonly, isSSR) {\r\n        this._setter = _setter;\r\n        this.dep = undefined;\r\n        this.__v_isRef = true;\r\n        this._dirty = true;\r\n        this.effect = new ReactiveEffect(getter, () => {\r\n            if (!this._dirty) {\r\n                this._dirty = true;\r\n                triggerRefValue(this);\r\n            }\r\n        });\r\n        this.effect.computed = this;\r\n        this.effect.active = this._cacheable = !isSSR;\r\n        this["__v_isReadonly" /* IS_READONLY */] = isReadonly;\r\n    }\r\n    get value() {\r\n        // the computed ref may get wrapped by other proxies e.g. readonly() #3376\r\n        const self = reactivity_esm_bundler_toRaw(this);\r\n        trackRefValue(self);\r\n        if (self._dirty || !self._cacheable) {\r\n            self._dirty = false;\r\n            self._value = self.effect.run();\r\n        }\r\n        return self._value;\r\n    }\r\n    set value(newValue) {\r\n        this._setter(newValue);\r\n    }\r\n}\r\nfunction reactivity_esm_bundler_computed(getterOrOptions, debugOptions, isSSR = false) {\r\n    let getter;\r\n    let setter;\r\n    const onlyGetter = shared_esm_bundler_isFunction(getterOrOptions);\r\n    if (onlyGetter) {\r\n        getter = getterOrOptions;\r\n        setter = ( false)\r\n            ? 0\r\n            : shared_esm_bundler_NOOP;\r\n    }\r\n    else {\r\n        getter = getterOrOptions.get;\r\n        setter = getterOrOptions.set;\r\n    }\r\n    const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);\r\n    if (false) {}\r\n    return cRef;\r\n}\n\nvar _a;\r\nconst tick = Promise.resolve();\r\nconst queue = (/* unused pure expression or super */ null && ([]));\r\nlet queued = false;\r\nconst scheduler = (fn) => {\r\n    queue.push(fn);\r\n    if (!queued) {\r\n        queued = true;\r\n        tick.then(flush);\r\n    }\r\n};\r\nconst flush = () => {\r\n    for (let i = 0; i < queue.length; i++) {\r\n        queue[i]();\r\n    }\r\n    queue.length = 0;\r\n    queued = false;\r\n};\r\nclass DeferredComputedRefImpl {\r\n    constructor(getter) {\r\n        this.dep = undefined;\r\n        this._dirty = true;\r\n        this.__v_isRef = true;\r\n        this[_a] = true;\r\n        let compareTarget;\r\n        let hasCompareTarget = false;\r\n        let scheduled = false;\r\n        this.effect = new ReactiveEffect(getter, (computedTrigger) => {\r\n            if (this.dep) {\r\n                if (computedTrigger) {\r\n                    compareTarget = this._value;\r\n                    hasCompareTarget = true;\r\n                }\r\n                else if (!scheduled) {\r\n                    const valueToCompare = hasCompareTarget ? compareTarget : this._value;\r\n                    scheduled = true;\r\n                    hasCompareTarget = false;\r\n                    scheduler(() => {\r\n                        if (this.effect.active && this._get() !== valueToCompare) {\r\n                            triggerRefValue(this);\r\n                        }\r\n                        scheduled = false;\r\n                    });\r\n                }\r\n                // chained upstream computeds are notified synchronously to ensure\r\n                // value invalidation in case of sync access; normal effects are\r\n                // deferred to be triggered in scheduler.\r\n                for (const e of this.dep) {\r\n                    if (e.computed instanceof DeferredComputedRefImpl) {\r\n                        e.scheduler(true /* computedTrigger */);\r\n                    }\r\n                }\r\n            }\r\n            this._dirty = true;\r\n        });\r\n        this.effect.computed = this;\r\n    }\r\n    _get() {\r\n        if (this._dirty) {\r\n            this._dirty = false;\r\n            return (this._value = this.effect.run());\r\n        }\r\n        return this._value;\r\n    }\r\n    get value() {\r\n        trackRefValue(this);\r\n        // the computed ref may get wrapped by other proxies e.g. readonly() #3376\r\n        return reactivity_esm_bundler_toRaw(this)._get();\r\n    }\r\n}\r\n_a = "__v_isReadonly" /* IS_READONLY */;\r\nfunction deferredComputed(getter) {\r\n    return new DeferredComputedRefImpl(getter);\r\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\n\n\n\n\n\nconst stack = [];\r\nfunction pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nfunction popWarningContext() {\r\n    stack.pop();\r\n}\r\nfunction runtime_core_esm_bundler_warn(msg, ...args) {\r\n    // avoid props formatting or warn handler tracking deps that might be mutated\r\n    // during patch, leading to infinite recursion.\r\n    pauseTracking();\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */, [\r\n            msg + args.join(\'\'),\r\n            instance && instance.proxy,\r\n            trace\r\n                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)\r\n                .join(\'\\n\'),\r\n            trace\r\n        ]);\r\n    }\r\n    else {\r\n        const warnArgs = [`[Vue warn]: ${msg}`, ...args];\r\n        /* istanbul ignore if */\r\n        if (trace.length &&\r\n            // avoid spamming console during tests\r\n            !false) {\r\n            warnArgs.push(`\\n`, ...formatTrace(trace));\r\n        }\r\n        console.warn(...warnArgs);\r\n    }\r\n    resetTracking();\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can\'t just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component && currentVNode.component.parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        logs.push(...(i === 0 ? [] : [`\\n`]), ...formatTraceEntry(entry));\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }) {\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const isRoot = vnode.component ? vnode.component.parent == null : false;\r\n    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\r\n    const close = `>` + postfix;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close]\r\n        : [open + close];\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    const keys = Object.keys(props);\r\n    keys.slice(0, 3).forEach(key => {\r\n        res.push(...formatProp(key, props[key]));\r\n    });\r\n    if (keys.length > 3) {\r\n        res.push(` ...`);\r\n    }\r\n    return res;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProp(key, value, raw) {\r\n    if (shared_esm_bundler_isString(value)) {\r\n        value = JSON.stringify(value);\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (typeof value === \'number\' ||\r\n        typeof value === \'boolean\' ||\r\n        value == null) {\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (reactivity_esm_bundler_isRef(value)) {\r\n        value = formatProp(key, reactivity_esm_bundler_toRaw(value.value), true);\r\n        return raw ? value : [`${key}=Ref<`, value, `>`];\r\n    }\r\n    else if (shared_esm_bundler_isFunction(value)) {\r\n        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\r\n    }\r\n    else {\r\n        value = reactivity_esm_bundler_toRaw(value);\r\n        return raw ? value : [`${key}=`, value];\r\n    }\r\n}\n\nconst ErrorTypeStrings = {\r\n    ["sp" /* SERVER_PREFETCH */]: \'serverPrefetch hook\',\r\n    ["bc" /* BEFORE_CREATE */]: \'beforeCreate hook\',\r\n    ["c" /* CREATED */]: \'created hook\',\r\n    ["bm" /* BEFORE_MOUNT */]: \'beforeMount hook\',\r\n    ["m" /* MOUNTED */]: \'mounted hook\',\r\n    ["bu" /* BEFORE_UPDATE */]: \'beforeUpdate hook\',\r\n    ["u" /* UPDATED */]: \'updated\',\r\n    ["bum" /* BEFORE_UNMOUNT */]: \'beforeUnmount hook\',\r\n    ["um" /* UNMOUNTED */]: \'unmounted hook\',\r\n    ["a" /* ACTIVATED */]: \'activated hook\',\r\n    ["da" /* DEACTIVATED */]: \'deactivated hook\',\r\n    ["ec" /* ERROR_CAPTURED */]: \'errorCaptured hook\',\r\n    ["rtc" /* RENDER_TRACKED */]: \'renderTracked hook\',\r\n    ["rtg" /* RENDER_TRIGGERED */]: \'renderTriggered hook\',\r\n    [0 /* SETUP_FUNCTION */]: \'setup function\',\r\n    [1 /* RENDER_FUNCTION */]: \'render function\',\r\n    [2 /* WATCH_GETTER */]: \'watcher getter\',\r\n    [3 /* WATCH_CALLBACK */]: \'watcher callback\',\r\n    [4 /* WATCH_CLEANUP */]: \'watcher cleanup function\',\r\n    [5 /* NATIVE_EVENT_HANDLER */]: \'native event handler\',\r\n    [6 /* COMPONENT_EVENT_HANDLER */]: \'component event handler\',\r\n    [7 /* VNODE_HOOK */]: \'vnode hook\',\r\n    [8 /* DIRECTIVE_HOOK */]: \'directive hook\',\r\n    [9 /* TRANSITION_HOOK */]: \'transition hook\',\r\n    [10 /* APP_ERROR_HANDLER */]: \'app errorHandler\',\r\n    [11 /* APP_WARN_HANDLER */]: \'app warnHandler\',\r\n    [12 /* FUNCTION_REF */]: \'ref function\',\r\n    [13 /* ASYNC_COMPONENT_LOADER */]: \'async component loader\',\r\n    [14 /* SCHEDULER */]: \'scheduler flush. This is likely a Vue internals bug. \' +\r\n        \'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core\'\r\n};\r\nfunction callWithErrorHandling(fn, instance, type, args) {\r\n    let res;\r\n    try {\r\n        res = args ? fn(...args) : fn();\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, type);\r\n    }\r\n    return res;\r\n}\r\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\r\n    if (shared_esm_bundler_isFunction(fn)) {\r\n        const res = callWithErrorHandling(fn, instance, type, args);\r\n        if (res && isPromise(res)) {\r\n            res.catch(err => {\r\n                handleError(err, instance, type);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    const values = [];\r\n    for (let i = 0; i < fn.length; i++) {\r\n        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\r\n    }\r\n    return values;\r\n}\r\nfunction handleError(err, instance, type, throwInDev = true) {\r\n    const contextVNode = instance ? instance.vnode : null;\r\n    if (instance) {\r\n        let cur = instance.parent;\r\n        // the exposed instance is the render proxy to keep it consistent with 2.x\r\n        const exposedInstance = instance.proxy;\r\n        // in production the hook receives only the error code\r\n        const errorInfo = ( false) ? 0 : type;\r\n        while (cur) {\r\n            const errorCapturedHooks = cur.ec;\r\n            if (errorCapturedHooks) {\r\n                for (let i = 0; i < errorCapturedHooks.length; i++) {\r\n                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.parent;\r\n        }\r\n        // app-level handling\r\n        const appErrorHandler = instance.appContext.config.errorHandler;\r\n        if (appErrorHandler) {\r\n            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);\r\n            return;\r\n        }\r\n    }\r\n    logError(err, type, contextVNode, throwInDev);\r\n}\r\nfunction logError(err, type, contextVNode, throwInDev = true) {\r\n    if ((false)) {}\r\n    else {\r\n        // recover in prod to reduce the impact on end-user\r\n        console.error(err);\r\n    }\r\n}\n\nlet isFlushing = false;\r\nlet isFlushPending = false;\r\nconst runtime_core_esm_bundler_queue = [];\r\nlet flushIndex = 0;\r\nconst pendingPreFlushCbs = [];\r\nlet activePreFlushCbs = null;\r\nlet preFlushIndex = 0;\r\nconst pendingPostFlushCbs = [];\r\nlet activePostFlushCbs = null;\r\nlet postFlushIndex = 0;\r\nconst resolvedPromise = Promise.resolve();\r\nlet currentFlushPromise = null;\r\nlet currentPreFlushParentJob = null;\r\nconst RECURSION_LIMIT = 100;\r\nfunction runtime_core_esm_bundler_nextTick(fn) {\r\n    const p = currentFlushPromise || resolvedPromise;\r\n    return fn ? p.then(this ? fn.bind(this) : fn) : p;\r\n}\r\n// #2768\r\n// Use binary-search to find a suitable position in the queue,\r\n// so that the queue maintains the increasing order of job\'s id,\r\n// which can prevent the job from being skipped and also can avoid repeated patching.\r\nfunction findInsertionIndex(id) {\r\n    // the start index should be `flushIndex + 1`\r\n    let start = flushIndex + 1;\r\n    let end = runtime_core_esm_bundler_queue.length;\r\n    while (start < end) {\r\n        const middle = (start + end) >>> 1;\r\n        const middleJobId = getId(runtime_core_esm_bundler_queue[middle]);\r\n        middleJobId < id ? (start = middle + 1) : (end = middle);\r\n    }\r\n    return start;\r\n}\r\nfunction queueJob(job) {\r\n    // the dedupe search uses the startIndex argument of Array.includes()\r\n    // by default the search index includes the current job that is being run\r\n    // so it cannot recursively trigger itself again.\r\n    // if the job is a watch() callback, the search will start with a +1 index to\r\n    // allow it recursively trigger itself - it is the user\'s responsibility to\r\n    // ensure it doesn\'t end up in an infinite loop.\r\n    if ((!runtime_core_esm_bundler_queue.length ||\r\n        !runtime_core_esm_bundler_queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) &&\r\n        job !== currentPreFlushParentJob) {\r\n        if (job.id == null) {\r\n            runtime_core_esm_bundler_queue.push(job);\r\n        }\r\n        else {\r\n            runtime_core_esm_bundler_queue.splice(findInsertionIndex(job.id), 0, job);\r\n        }\r\n        queueFlush();\r\n    }\r\n}\r\nfunction queueFlush() {\r\n    if (!isFlushing && !isFlushPending) {\r\n        isFlushPending = true;\r\n        currentFlushPromise = resolvedPromise.then(flushJobs);\r\n    }\r\n}\r\nfunction invalidateJob(job) {\r\n    const i = runtime_core_esm_bundler_queue.indexOf(job);\r\n    if (i > flushIndex) {\r\n        runtime_core_esm_bundler_queue.splice(i, 1);\r\n    }\r\n}\r\nfunction queueCb(cb, activeQueue, pendingQueue, index) {\r\n    if (!shared_esm_bundler_isArray(cb)) {\r\n        if (!activeQueue ||\r\n            !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {\r\n            pendingQueue.push(cb);\r\n        }\r\n    }\r\n    else {\r\n        // if cb is an array, it is a component lifecycle hook which can only be\r\n        // triggered by a job, which is already deduped in the main queue, so\r\n        // we can skip duplicate check here to improve perf\r\n        pendingQueue.push(...cb);\r\n    }\r\n    queueFlush();\r\n}\r\nfunction queuePreFlushCb(cb) {\r\n    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);\r\n}\r\nfunction queuePostFlushCb(cb) {\r\n    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);\r\n}\r\nfunction flushPreFlushCbs(seen, parentJob = null) {\r\n    if (pendingPreFlushCbs.length) {\r\n        currentPreFlushParentJob = parentJob;\r\n        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];\r\n        pendingPreFlushCbs.length = 0;\r\n        if ((false)) {}\r\n        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {\r\n            if (false) {}\r\n            activePreFlushCbs[preFlushIndex]();\r\n        }\r\n        activePreFlushCbs = null;\r\n        preFlushIndex = 0;\r\n        currentPreFlushParentJob = null;\r\n        // recursively flush until it drains\r\n        flushPreFlushCbs(seen, parentJob);\r\n    }\r\n}\r\nfunction flushPostFlushCbs(seen) {\r\n    if (pendingPostFlushCbs.length) {\r\n        const deduped = [...new Set(pendingPostFlushCbs)];\r\n        pendingPostFlushCbs.length = 0;\r\n        // #1947 already has active queue, nested flushPostFlushCbs call\r\n        if (activePostFlushCbs) {\r\n            activePostFlushCbs.push(...deduped);\r\n            return;\r\n        }\r\n        activePostFlushCbs = deduped;\r\n        if ((false)) {}\r\n        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));\r\n        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {\r\n            if (false) {}\r\n            activePostFlushCbs[postFlushIndex]();\r\n        }\r\n        activePostFlushCbs = null;\r\n        postFlushIndex = 0;\r\n    }\r\n}\r\nconst getId = (job) => job.id == null ? Infinity : job.id;\r\nfunction flushJobs(seen) {\r\n    isFlushPending = false;\r\n    isFlushing = true;\r\n    if ((false)) {}\r\n    flushPreFlushCbs(seen);\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child so its render effect will have smaller\r\n    //    priority number)\r\n    // 2. If a component is unmounted during a parent component\'s update,\r\n    //    its update can be skipped.\r\n    runtime_core_esm_bundler_queue.sort((a, b) => getId(a) - getId(b));\r\n    // conditional usage of checkRecursiveUpdate must be determined out of\r\n    // try ... catch block since Rollup by default de-optimizes treeshaking\r\n    // inside try-catch. This can leave all warning code unshaked. Although\r\n    // they would get eventually shaken by a minifier like terser, some minifiers\r\n    // would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)\r\n    const check = ( false)\r\n        ? 0\r\n        : shared_esm_bundler_NOOP;\r\n    try {\r\n        for (flushIndex = 0; flushIndex < runtime_core_esm_bundler_queue.length; flushIndex++) {\r\n            const job = runtime_core_esm_bundler_queue[flushIndex];\r\n            if (job && job.active !== false) {\r\n                if (false) {}\r\n                // console.log(`running:`, job.id)\r\n                callWithErrorHandling(job, null, 14 /* SCHEDULER */);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        flushIndex = 0;\r\n        runtime_core_esm_bundler_queue.length = 0;\r\n        flushPostFlushCbs(seen);\r\n        isFlushing = false;\r\n        currentFlushPromise = null;\r\n        // some postFlushCb queued jobs!\r\n        // keep flushing until it drains.\r\n        if (runtime_core_esm_bundler_queue.length ||\r\n            pendingPreFlushCbs.length ||\r\n            pendingPostFlushCbs.length) {\r\n            flushJobs(seen);\r\n        }\r\n    }\r\n}\r\nfunction checkRecursiveUpdates(seen, fn) {\r\n    if (!seen.has(fn)) {\r\n        seen.set(fn, 1);\r\n    }\r\n    else {\r\n        const count = seen.get(fn);\r\n        if (count > RECURSION_LIMIT) {\r\n            const instance = fn.ownerInstance;\r\n            const componentName = instance && getComponentName(instance.type);\r\n            runtime_core_esm_bundler_warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` +\r\n                `This means you have a reactive effect that is mutating its own ` +\r\n                `dependencies and thus recursively triggering itself. Possible sources ` +\r\n                `include component template, render function, updated hook or ` +\r\n                `watcher source function.`);\r\n            return true;\r\n        }\r\n        else {\r\n            seen.set(fn, count + 1);\r\n        }\r\n    }\r\n}\n\n/* eslint-disable no-restricted-globals */\r\nlet isHmrUpdating = false;\r\nconst hmrDirtyComponents = new Set();\r\n// Expose the HMR runtime on the global object\r\n// This makes it entirely tree-shakable without polluting the exports and makes\r\n// it easier to be used in toolings like vue-loader\r\n// Note: for a component to be eligible for HMR it also needs the __hmrId option\r\n// to be set so that its instances can be registered / removed.\r\nif ((false)) {}\r\nconst map = new Map();\r\nfunction registerHMR(instance) {\r\n    const id = instance.type.__hmrId;\r\n    let record = map.get(id);\r\n    if (!record) {\r\n        createRecord(id, instance.type);\r\n        record = map.get(id);\r\n    }\r\n    record.instances.add(instance);\r\n}\r\nfunction unregisterHMR(instance) {\r\n    map.get(instance.type.__hmrId).instances.delete(instance);\r\n}\r\nfunction createRecord(id, initialDef) {\r\n    if (map.has(id)) {\r\n        return false;\r\n    }\r\n    map.set(id, {\r\n        initialDef: normalizeClassComponent(initialDef),\r\n        instances: new Set()\r\n    });\r\n    return true;\r\n}\r\nfunction normalizeClassComponent(component) {\r\n    return isClassComponent(component) ? component.__vccOpts : component;\r\n}\r\nfunction rerender(id, newRender) {\r\n    const record = map.get(id);\r\n    if (!record) {\r\n        return;\r\n    }\r\n    // update initial record (for not-yet-rendered component)\r\n    record.initialDef.render = newRender;\r\n    [...record.instances].forEach(instance => {\r\n        if (newRender) {\r\n            instance.render = newRender;\r\n            normalizeClassComponent(instance.type).render = newRender;\r\n        }\r\n        instance.renderCache = [];\r\n        // this flag forces child components with slot content to update\r\n        isHmrUpdating = true;\r\n        instance.update();\r\n        isHmrUpdating = false;\r\n    });\r\n}\r\nfunction reload(id, newComp) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    newComp = normalizeClassComponent(newComp);\r\n    // update initial def (for not-yet-rendered components)\r\n    updateComponentDef(record.initialDef, newComp);\r\n    // create a snapshot which avoids the set being mutated during updates\r\n    const instances = [...record.instances];\r\n    for (const instance of instances) {\r\n        const oldComp = normalizeClassComponent(instance.type);\r\n        if (!hmrDirtyComponents.has(oldComp)) {\r\n            // 1. Update existing comp definition to match new one\r\n            if (oldComp !== record.initialDef) {\r\n                updateComponentDef(oldComp, newComp);\r\n            }\r\n            // 2. mark definition dirty. This forces the renderer to replace the\r\n            // component on patch.\r\n            hmrDirtyComponents.add(oldComp);\r\n        }\r\n        // 3. invalidate options resolution cache\r\n        instance.appContext.optionsCache.delete(instance.type);\r\n        // 4. actually update\r\n        if (instance.ceReload) {\r\n            // custom element\r\n            hmrDirtyComponents.add(oldComp);\r\n            instance.ceReload(newComp.styles);\r\n            hmrDirtyComponents.delete(oldComp);\r\n        }\r\n        else if (instance.parent) {\r\n            // 4. Force the parent instance to re-render. This will cause all updated\r\n            // components to be unmounted and re-mounted. Queue the update so that we\r\n            // don\'t end up forcing the same parent to re-render multiple times.\r\n            queueJob(instance.parent.update);\r\n            // instance is the inner component of an async custom element\r\n            // invoke to reset styles\r\n            if (instance.parent.type.__asyncLoader &&\r\n                instance.parent.ceReload) {\r\n                instance.parent.ceReload(newComp.styles);\r\n            }\r\n        }\r\n        else if (instance.appContext.reload) {\r\n            // root instance mounted via createApp() has a reload method\r\n            instance.appContext.reload();\r\n        }\r\n        else if (typeof window !== \'undefined\') {\r\n            // root instance inside tree created via raw render(). Force reload.\r\n            window.location.reload();\r\n        }\r\n        else {\r\n            console.warn(\'[HMR] Root or manually mounted instance modified. Full reload required.\');\r\n        }\r\n    }\r\n    // 5. make sure to cleanup dirty hmr components after update\r\n    queuePostFlushCb(() => {\r\n        for (const instance of instances) {\r\n            hmrDirtyComponents.delete(normalizeClassComponent(instance.type));\r\n        }\r\n    });\r\n}\r\nfunction updateComponentDef(oldComp, newComp) {\r\n    extend(oldComp, newComp);\r\n    for (const key in oldComp) {\r\n        if (key !== \'__file\' && !(key in newComp)) {\r\n            delete oldComp[key];\r\n        }\r\n    }\r\n}\r\nfunction tryWrap(fn) {\r\n    return (id, arg) => {\r\n        try {\r\n            return fn(id, arg);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +\r\n                `Full reload required.`);\r\n        }\r\n    };\r\n}\n\nlet devtools;\r\nlet buffer = [];\r\nlet devtoolsNotInstalled = false;\r\nfunction emit(event, ...args) {\r\n    if (devtools) {\r\n        devtools.emit(event, ...args);\r\n    }\r\n    else if (!devtoolsNotInstalled) {\r\n        buffer.push({ event, args });\r\n    }\r\n}\r\nfunction setDevtoolsHook(hook, target) {\r\n    var _a, _b;\r\n    devtools = hook;\r\n    if (devtools) {\r\n        devtools.enabled = true;\r\n        buffer.forEach(({ event, args }) => devtools.emit(event, ...args));\r\n        buffer = [];\r\n    }\r\n    else if (\r\n    // handle late devtools injection - only do this if we are in an actual\r\n    // browser environment to avoid the timer handle stalling test runner exit\r\n    // (#4815)\r\n    // eslint-disable-next-line no-restricted-globals\r\n    typeof window !== \'undefined\' &&\r\n        // some envs mock window but not fully\r\n        window.HTMLElement &&\r\n        // also exclude jsdom\r\n        !((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.includes(\'jsdom\'))) {\r\n        const replay = (target.__VUE_DEVTOOLS_HOOK_REPLAY__ =\r\n            target.__VUE_DEVTOOLS_HOOK_REPLAY__ || []);\r\n        replay.push((newHook) => {\r\n            setDevtoolsHook(newHook, target);\r\n        });\r\n        // clear buffer after 3s - the user probably doesn\'t have devtools installed\r\n        // at all, and keeping the buffer will cause memory leaks (#4738)\r\n        setTimeout(() => {\r\n            if (!devtools) {\r\n                target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;\r\n                devtoolsNotInstalled = true;\r\n                buffer = [];\r\n            }\r\n        }, 3000);\r\n    }\r\n    else {\r\n        // non-browser env, assume not installed\r\n        devtoolsNotInstalled = true;\r\n        buffer = [];\r\n    }\r\n}\r\nfunction devtoolsInitApp(app, version) {\r\n    emit("app:init" /* APP_INIT */, app, version, {\r\n        Fragment: runtime_core_esm_bundler_Fragment,\r\n        Text: runtime_core_esm_bundler_Text,\r\n        Comment: runtime_core_esm_bundler_Comment,\r\n        Static\r\n    });\r\n}\r\nfunction devtoolsUnmountApp(app) {\r\n    emit("app:unmount" /* APP_UNMOUNT */, app);\r\n}\r\nconst devtoolsComponentAdded = /*#__PURE__*/ (/* unused pure expression or super */ null && (createDevtoolsComponentHook("component:added" /* COMPONENT_ADDED */)));\r\nconst devtoolsComponentUpdated = \r\n/*#__PURE__*/ (/* unused pure expression or super */ null && (createDevtoolsComponentHook("component:updated" /* COMPONENT_UPDATED */)));\r\nconst devtoolsComponentRemoved = \r\n/*#__PURE__*/ (/* unused pure expression or super */ null && (createDevtoolsComponentHook("component:removed" /* COMPONENT_REMOVED */)));\r\nfunction createDevtoolsComponentHook(hook) {\r\n    return (component) => {\r\n        emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);\r\n    };\r\n}\r\nconst devtoolsPerfStart = /*#__PURE__*/ (/* unused pure expression or super */ null && (createDevtoolsPerformanceHook("perf:start" /* PERFORMANCE_START */)));\r\nconst devtoolsPerfEnd = /*#__PURE__*/ (/* unused pure expression or super */ null && (createDevtoolsPerformanceHook("perf:end" /* PERFORMANCE_END */)));\r\nfunction createDevtoolsPerformanceHook(hook) {\r\n    return (component, type, time) => {\r\n        emit(hook, component.appContext.app, component.uid, component, type, time);\r\n    };\r\n}\r\nfunction devtoolsComponentEmit(component, event, params) {\r\n    emit("component:emit" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);\r\n}\n\nfunction emit$1(instance, event, ...rawArgs) {\r\n    const props = instance.vnode.props || EMPTY_OBJ;\r\n    if ((false)) {}\r\n    let args = rawArgs;\r\n    const isModelListener = event.startsWith(\'update:\');\r\n    // for v-model update:xxx events, apply modifiers on args\r\n    const modelArg = isModelListener && event.slice(7);\r\n    if (modelArg && modelArg in props) {\r\n        const modifiersKey = `${modelArg === \'modelValue\' ? \'model\' : modelArg}Modifiers`;\r\n        const { number, trim } = props[modifiersKey] || EMPTY_OBJ;\r\n        if (trim) {\r\n            args = rawArgs.map(a => a.trim());\r\n        }\r\n        else if (number) {\r\n            args = rawArgs.map(toNumber);\r\n        }\r\n    }\r\n    if (false) {}\r\n    if ((false)) {}\r\n    let handlerName;\r\n    let handler = props[(handlerName = toHandlerKey(event))] ||\r\n        // also try camelCase event handler (#2249)\r\n        props[(handlerName = toHandlerKey(shared_esm_bundler_camelize(event)))];\r\n    // for v-model update:xxx events, also trigger kebab-case equivalent\r\n    // for props passed via kebab-case\r\n    if (!handler && isModelListener) {\r\n        handler = props[(handlerName = toHandlerKey(shared_esm_bundler_hyphenate(event)))];\r\n    }\r\n    if (handler) {\r\n        callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n    const onceHandler = props[handlerName + `Once`];\r\n    if (onceHandler) {\r\n        if (!instance.emitted) {\r\n            instance.emitted = {};\r\n        }\r\n        else if (instance.emitted[handlerName]) {\r\n            return;\r\n        }\r\n        instance.emitted[handlerName] = true;\r\n        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n}\r\nfunction normalizeEmitsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.emitsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached !== undefined) {\r\n        return cached;\r\n    }\r\n    const raw = comp.emits;\r\n    let normalized = {};\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if ( true && !shared_esm_bundler_isFunction(comp)) {\r\n        const extendEmits = (raw) => {\r\n            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);\r\n            if (normalizedFromExtend) {\r\n                hasExtends = true;\r\n                shared_esm_bundler_extend(normalized, normalizedFromExtend);\r\n            }\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendEmits);\r\n        }\r\n        if (comp.extends) {\r\n            extendEmits(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendEmits);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, null);\r\n        return null;\r\n    }\r\n    if (shared_esm_bundler_isArray(raw)) {\r\n        raw.forEach(key => (normalized[key] = null));\r\n    }\r\n    else {\r\n        shared_esm_bundler_extend(normalized, raw);\r\n    }\r\n    cache.set(comp, normalized);\r\n    return normalized;\r\n}\r\n// Check if an incoming prop key is a declared emit event listener.\r\n// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are\r\n// both considered matched listeners.\r\nfunction isEmitListener(options, key) {\r\n    if (!options || !isOn(key)) {\r\n        return false;\r\n    }\r\n    key = key.slice(2).replace(/Once$/, \'\');\r\n    return (shared_esm_bundler_hasOwn(options, key[0].toLowerCase() + key.slice(1)) ||\r\n        shared_esm_bundler_hasOwn(options, shared_esm_bundler_hyphenate(key)) ||\r\n        shared_esm_bundler_hasOwn(options, key));\r\n}\n\n/**\r\n * mark the current rendering instance for asset resolution (e.g.\r\n * resolveComponent, resolveDirective) during render\r\n */\r\nlet currentRenderingInstance = null;\r\nlet currentScopeId = null;\r\n/**\r\n * Note: rendering calls maybe nested. The function returns the parent rendering\r\n * instance if present, which should be restored after the render is done:\r\n *\r\n * ```js\r\n * const prev = setCurrentRenderingInstance(i)\r\n * // ...render\r\n * setCurrentRenderingInstance(prev)\r\n * ```\r\n */\r\nfunction setCurrentRenderingInstance(instance) {\r\n    const prev = currentRenderingInstance;\r\n    currentRenderingInstance = instance;\r\n    currentScopeId = (instance && instance.type.__scopeId) || null;\r\n    return prev;\r\n}\r\n/**\r\n * Set scope id when creating hoisted vnodes.\r\n * @private compiler helper\r\n */\r\nfunction pushScopeId(id) {\r\n    currentScopeId = id;\r\n}\r\n/**\r\n * Technically we no longer need this after 3.0.8 but we need to keep the same\r\n * API for backwards compat w/ code generated by compilers.\r\n * @private\r\n */\r\nfunction popScopeId() {\r\n    currentScopeId = null;\r\n}\r\n/**\r\n * Only for backwards compat\r\n * @private\r\n */\r\nconst withScopeId = (_id) => withCtx;\r\n/**\r\n * Wrap a slot function to memoize current rendering instance\r\n * @private compiler helper\r\n */\r\nfunction withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only\r\n) {\r\n    if (!ctx)\r\n        return fn;\r\n    // already normalized\r\n    if (fn._n) {\r\n        return fn;\r\n    }\r\n    const renderFnWithContext = (...args) => {\r\n        // If a user calls a compiled slot inside a template expression (#1745), it\r\n        // can mess up block tracking, so by default we disable block tracking and\r\n        // force bail out when invoking a compiled slot (indicated by the ._d flag).\r\n        // This isn\'t necessary if rendering a compiled `<slot>`, so we flip the\r\n        // ._d flag off when invoking the wrapped fn inside `renderSlot`.\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(-1);\r\n        }\r\n        const prevInstance = setCurrentRenderingInstance(ctx);\r\n        const res = fn(...args);\r\n        setCurrentRenderingInstance(prevInstance);\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(1);\r\n        }\r\n        if (false) {}\r\n        return res;\r\n    };\r\n    // mark normalized to avoid duplicated wrapping\r\n    renderFnWithContext._n = true;\r\n    // mark this as compiled by default\r\n    // this is used in vnode.ts -> normalizeChildren() to set the slot\r\n    // rendering flag.\r\n    renderFnWithContext._c = true;\r\n    // disable block tracking by default\r\n    renderFnWithContext._d = true;\r\n    return renderFnWithContext;\r\n}\n\n/**\r\n * dev only flag to track whether $attrs was used during render.\r\n * If $attrs was used during render then the warning for failed attrs\r\n * fallthrough can be suppressed.\r\n */\r\nlet accessedAttrs = false;\r\nfunction markAttrsAccessed() {\r\n    accessedAttrs = true;\r\n}\r\nfunction renderComponentRoot(instance) {\r\n    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;\r\n    let result;\r\n    let fallthroughAttrs;\r\n    const prev = setCurrentRenderingInstance(instance);\r\n    if ((false)) {}\r\n    try {\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            // withProxy is a proxy with a different `has` trap only for\r\n            // runtime-compiled render functions using `with` block.\r\n            const proxyToUse = withProxy || proxy;\r\n            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\r\n            fallthroughAttrs = attrs;\r\n        }\r\n        else {\r\n            // functional\r\n            const render = Component;\r\n            // in dev, mark attrs accessed if optional props (attrs === props)\r\n            if (false) {}\r\n            result = normalizeVNode(render.length > 1\r\n                ? render(props, ( false)\r\n                    ? 0\r\n                    : { attrs, slots, emit })\r\n                : render(props, null /* we know it doesn\'t need it */));\r\n            fallthroughAttrs = Component.props\r\n                ? attrs\r\n                : getFunctionalFallthrough(attrs);\r\n        }\r\n    }\r\n    catch (err) {\r\n        blockStack.length = 0;\r\n        handleError(err, instance, 1 /* RENDER_FUNCTION */);\r\n        result = createVNode(runtime_core_esm_bundler_Comment);\r\n    }\r\n    // attr merging\r\n    // in dev mode, comments are preserved, and it\'s possible for a template\r\n    // to have comments along side the root element which makes it a fragment\r\n    let root = result;\r\n    let setRoot = undefined;\r\n    if (false /* DEV_ROOT_FRAGMENT */) {}\r\n    if (fallthroughAttrs && inheritAttrs !== false) {\r\n        const keys = Object.keys(fallthroughAttrs);\r\n        const { shapeFlag } = root;\r\n        if (keys.length) {\r\n            if (shapeFlag & (1 /* ELEMENT */ | 6 /* COMPONENT */)) {\r\n                if (propsOptions && keys.some(isModelListener)) {\r\n                    // If a v-model listener (onUpdate:xxx) has a corresponding declared\r\n                    // prop, it indicates this component expects to handle v-model and\r\n                    // it should not fallthrough.\r\n                    // related: #1543, #1643, #1989\r\n                    fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\r\n                }\r\n                root = cloneVNode(root, fallthroughAttrs);\r\n            }\r\n            else if (false) {}\r\n        }\r\n    }\r\n    // inherit directives\r\n    if (vnode.dirs) {\r\n        if (false) {}\r\n        root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\r\n    }\r\n    // inherit transition data\r\n    if (vnode.transition) {\r\n        if (false) {}\r\n        root.transition = vnode.transition;\r\n    }\r\n    if (false) {}\r\n    else {\r\n        result = root;\r\n    }\r\n    setCurrentRenderingInstance(prev);\r\n    return result;\r\n}\r\n/**\r\n * dev only\r\n * In dev mode, template root level comments are rendered, which turns the\r\n * template into a fragment root, but we need to locate the single element\r\n * root for attrs and scope id processing.\r\n */\r\nconst getChildRoot = (vnode) => {\r\n    const rawChildren = vnode.children;\r\n    const dynamicChildren = vnode.dynamicChildren;\r\n    const childRoot = filterSingleRoot(rawChildren);\r\n    if (!childRoot) {\r\n        return [vnode, undefined];\r\n    }\r\n    const index = rawChildren.indexOf(childRoot);\r\n    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\r\n    const setRoot = (updatedRoot) => {\r\n        rawChildren[index] = updatedRoot;\r\n        if (dynamicChildren) {\r\n            if (dynamicIndex > -1) {\r\n                dynamicChildren[dynamicIndex] = updatedRoot;\r\n            }\r\n            else if (updatedRoot.patchFlag > 0) {\r\n                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\r\n            }\r\n        }\r\n    };\r\n    return [normalizeVNode(childRoot), setRoot];\r\n};\r\nfunction filterSingleRoot(children) {\r\n    let singleRoot;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        if (runtime_core_esm_bundler_isVNode(child)) {\r\n            // ignore user comment\r\n            if (child.type !== runtime_core_esm_bundler_Comment || child.children === \'v-if\') {\r\n                if (singleRoot) {\r\n                    // has more than 1 non-comment child, return now\r\n                    return;\r\n                }\r\n                else {\r\n                    singleRoot = child;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    return singleRoot;\r\n}\r\nconst getFunctionalFallthrough = (attrs) => {\r\n    let res;\r\n    for (const key in attrs) {\r\n        if (key === \'class\' || key === \'style\' || isOn(key)) {\r\n            (res || (res = {}))[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst filterModelListeners = (attrs, props) => {\r\n    const res = {};\r\n    for (const key in attrs) {\r\n        if (!isModelListener(key) || !(key.slice(9) in props)) {\r\n            res[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst isElementRoot = (vnode) => {\r\n    return (vnode.shapeFlag & (6 /* COMPONENT */ | 1 /* ELEMENT */) ||\r\n        vnode.type === runtime_core_esm_bundler_Comment // potential v-if branch switch\r\n    );\r\n};\r\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\r\n    const { props: prevProps, children: prevChildren, component } = prevVNode;\r\n    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;\r\n    const emits = component.emitsOptions;\r\n    // Parent component\'s render function was hot-updated. Since this may have\r\n    // caused the child component\'s slots content to have changed, we need to\r\n    // force the child to update as well.\r\n    if (false) {}\r\n    // force child update for runtime directive or transition on component vnode.\r\n    if (nextVNode.dirs || nextVNode.transition) {\r\n        return true;\r\n    }\r\n    if (optimized && patchFlag >= 0) {\r\n        if (patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n            // slot content that references values that might have changed,\r\n            // e.g. in a v-for\r\n            return true;\r\n        }\r\n        if (patchFlag & 16 /* FULL_PROPS */) {\r\n            if (!prevProps) {\r\n                return !!nextProps;\r\n            }\r\n            // presence of this flag indicates props are always non-null\r\n            return hasPropsChanged(prevProps, nextProps, emits);\r\n        }\r\n        else if (patchFlag & 8 /* PROPS */) {\r\n            const dynamicProps = nextVNode.dynamicProps;\r\n            for (let i = 0; i < dynamicProps.length; i++) {\r\n                const key = dynamicProps[i];\r\n                if (nextProps[key] !== prevProps[key] &&\r\n                    !isEmitListener(emits, key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // this path is only taken by manually written render functions\r\n        // so presence of any children leads to a forced update\r\n        if (prevChildren || nextChildren) {\r\n            if (!nextChildren || !nextChildren.$stable) {\r\n                return true;\r\n            }\r\n        }\r\n        if (prevProps === nextProps) {\r\n            return false;\r\n        }\r\n        if (!prevProps) {\r\n            return !!nextProps;\r\n        }\r\n        if (!nextProps) {\r\n            return true;\r\n        }\r\n        return hasPropsChanged(prevProps, nextProps, emits);\r\n    }\r\n    return false;\r\n}\r\nfunction hasPropsChanged(prevProps, nextProps, emitsOptions) {\r\n    const nextKeys = Object.keys(nextProps);\r\n    if (nextKeys.length !== Object.keys(prevProps).length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < nextKeys.length; i++) {\r\n        const key = nextKeys[i];\r\n        if (nextProps[key] !== prevProps[key] &&\r\n            !isEmitListener(emitsOptions, key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction updateHOCHostEl({ vnode, parent }, el // HostNode\r\n) {\r\n    while (parent && parent.subTree === vnode) {\r\n        (vnode = parent.vnode).el = el;\r\n        parent = parent.parent;\r\n    }\r\n}\n\nconst isSuspense = (type) => type.__isSuspense;\r\n// Suspense exposes a component-like API, and is treated like a component\r\n// in the compiler, but internally it\'s a special built-in type that hooks\r\n// directly into the renderer.\r\nconst SuspenseImpl = {\r\n    name: \'Suspense\',\r\n    // In order to make Suspense tree-shakable, we need to avoid importing it\r\n    // directly in the renderer. The renderer checks for the __isSuspense flag\r\n    // on a vnode\'s type and calls the `process` method, passing in renderer\r\n    // internals.\r\n    __isSuspense: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, \r\n    // platform-specific impl passed from renderer\r\n    rendererInternals) {\r\n        if (n1 == null) {\r\n            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n        else {\r\n            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n    },\r\n    hydrate: hydrateSuspense,\r\n    create: createSuspenseBoundary,\r\n    normalize: normalizeSuspenseChildren\r\n};\r\n// Force-casted public typing for h and TSX props inference\r\nconst Suspense = (SuspenseImpl );\r\nfunction triggerEvent(vnode, name) {\r\n    const eventListener = vnode.props && vnode.props[name];\r\n    if (shared_esm_bundler_isFunction(eventListener)) {\r\n        eventListener();\r\n    }\r\n}\r\nfunction mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {\r\n    const { p: patch, o: { createElement } } = rendererInternals;\r\n    const hiddenContainer = createElement(\'div\');\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));\r\n    // start mounting the content subtree in an off-dom container\r\n    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);\r\n    // now check if we have encountered any async deps\r\n    if (suspense.deps > 0) {\r\n        // has async\r\n        // invoke @fallback event\r\n        triggerEvent(vnode, \'onPending\');\r\n        triggerEvent(vnode, \'onFallback\');\r\n        // mount the fallback tree\r\n        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n        isSVG, slotScopeIds);\r\n        setActiveBranch(suspense, vnode.ssFallback);\r\n    }\r\n    else {\r\n        // Suspense has no async deps. Just resolve.\r\n        suspense.resolve();\r\n    }\r\n}\r\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {\r\n    const suspense = (n2.suspense = n1.suspense);\r\n    suspense.vnode = n2;\r\n    n2.el = n1.el;\r\n    const newBranch = n2.ssContent;\r\n    const newFallback = n2.ssFallback;\r\n    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;\r\n    if (pendingBranch) {\r\n        suspense.pendingBranch = newBranch;\r\n        if (isSameVNodeType(newBranch, pendingBranch)) {\r\n            // same root type but content may have changed.\r\n            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                suspense.resolve();\r\n            }\r\n            else if (isInFallback) {\r\n                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, newFallback);\r\n            }\r\n        }\r\n        else {\r\n            // toggled before pending tree is resolved\r\n            suspense.pendingId++;\r\n            if (isHydrating) {\r\n                // if toggled before hydration is finished, the current DOM tree is\r\n                // no longer valid. set it as the active branch so it will be unmounted\r\n                // when resolved\r\n                suspense.isHydrating = false;\r\n                suspense.activeBranch = pendingBranch;\r\n            }\r\n            else {\r\n                unmount(pendingBranch, parentComponent, suspense);\r\n            }\r\n            // increment pending ID. this is used to invalidate async callbacks\r\n            // reset suspense state\r\n            suspense.deps = 0;\r\n            // discard effects from pending branch\r\n            suspense.effects.length = 0;\r\n            // discard previous container\r\n            suspense.hiddenContainer = createElement(\'div\');\r\n            if (isInFallback) {\r\n                // already in fallback state\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n                else {\r\n                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                    isSVG, slotScopeIds, optimized);\r\n                    setActiveBranch(suspense, newFallback);\r\n                }\r\n            }\r\n            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n                // toggled "back" to current active branch\r\n                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                // force resolve\r\n                suspense.resolve(true);\r\n            }\r\n            else {\r\n                // switched to a 3rd branch\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n            // root did not change, just normal patch\r\n            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            setActiveBranch(suspense, newBranch);\r\n        }\r\n        else {\r\n            // root node toggled\r\n            // invoke @pending event\r\n            triggerEvent(n2, \'onPending\');\r\n            // mount pending branch in off-dom container\r\n            suspense.pendingBranch = newBranch;\r\n            suspense.pendingId++;\r\n            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                // incoming branch has no async deps, resolve now.\r\n                suspense.resolve();\r\n            }\r\n            else {\r\n                const { timeout, pendingId } = suspense;\r\n                if (timeout > 0) {\r\n                    setTimeout(() => {\r\n                        if (suspense.pendingId === pendingId) {\r\n                            suspense.fallback(newFallback);\r\n                        }\r\n                    }, timeout);\r\n                }\r\n                else if (timeout === 0) {\r\n                    suspense.fallback(newFallback);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet hasWarned = false;\r\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\r\n    /* istanbul ignore if */\r\n    if (false) {}\r\n    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;\r\n    const timeout = toNumber(vnode.props && vnode.props.timeout);\r\n    const suspense = {\r\n        vnode,\r\n        parent,\r\n        parentComponent,\r\n        isSVG,\r\n        container,\r\n        hiddenContainer,\r\n        anchor,\r\n        deps: 0,\r\n        pendingId: 0,\r\n        timeout: typeof timeout === \'number\' ? timeout : -1,\r\n        activeBranch: null,\r\n        pendingBranch: null,\r\n        isInFallback: true,\r\n        isHydrating,\r\n        isUnmounted: false,\r\n        effects: [],\r\n        resolve(resume = false) {\r\n            if ((false)) {}\r\n            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;\r\n            if (suspense.isHydrating) {\r\n                suspense.isHydrating = false;\r\n            }\r\n            else if (!resume) {\r\n                const delayEnter = activeBranch &&\r\n                    pendingBranch.transition &&\r\n                    pendingBranch.transition.mode === \'out-in\';\r\n                if (delayEnter) {\r\n                    activeBranch.transition.afterLeave = () => {\r\n                        if (pendingId === suspense.pendingId) {\r\n                            move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                        }\r\n                    };\r\n                }\r\n                // this is initial anchor on mount\r\n                let { anchor } = suspense;\r\n                // unmount current active tree\r\n                if (activeBranch) {\r\n                    // if the fallback tree was mounted, it may have been moved\r\n                    // as part of a parent suspense. get the latest anchor for insertion\r\n                    anchor = next(activeBranch);\r\n                    unmount(activeBranch, parentComponent, suspense, true);\r\n                }\r\n                if (!delayEnter) {\r\n                    // move content from off-dom container to actual container\r\n                    move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                }\r\n            }\r\n            setActiveBranch(suspense, pendingBranch);\r\n            suspense.pendingBranch = null;\r\n            suspense.isInFallback = false;\r\n            // flush buffered effects\r\n            // check if there is a pending parent suspense\r\n            let parent = suspense.parent;\r\n            let hasUnresolvedAncestor = false;\r\n            while (parent) {\r\n                if (parent.pendingBranch) {\r\n                    // found a pending parent suspense, merge buffered post jobs\r\n                    // into that parent\r\n                    parent.effects.push(...effects);\r\n                    hasUnresolvedAncestor = true;\r\n                    break;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n            // no pending parent suspense, flush all jobs\r\n            if (!hasUnresolvedAncestor) {\r\n                queuePostFlushCb(effects);\r\n            }\r\n            suspense.effects = [];\r\n            // invoke @resolve event\r\n            triggerEvent(vnode, \'onResolve\');\r\n        },\r\n        fallback(fallbackVNode) {\r\n            if (!suspense.pendingBranch) {\r\n                return;\r\n            }\r\n            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;\r\n            // invoke @fallback event\r\n            triggerEvent(vnode, \'onFallback\');\r\n            const anchor = next(activeBranch);\r\n            const mountFallback = () => {\r\n                if (!suspense.isInFallback) {\r\n                    return;\r\n                }\r\n                // mount the fallback tree\r\n                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, fallbackVNode);\r\n            };\r\n            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === \'out-in\';\r\n            if (delayEnter) {\r\n                activeBranch.transition.afterLeave = mountFallback;\r\n            }\r\n            suspense.isInFallback = true;\r\n            // unmount current active branch\r\n            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now\r\n            true // shouldRemove\r\n            );\r\n            if (!delayEnter) {\r\n                mountFallback();\r\n            }\r\n        },\r\n        move(container, anchor, type) {\r\n            suspense.activeBranch &&\r\n                move(suspense.activeBranch, container, anchor, type);\r\n            suspense.container = container;\r\n        },\r\n        next() {\r\n            return suspense.activeBranch && next(suspense.activeBranch);\r\n        },\r\n        registerDep(instance, setupRenderEffect) {\r\n            const isInPendingSuspense = !!suspense.pendingBranch;\r\n            if (isInPendingSuspense) {\r\n                suspense.deps++;\r\n            }\r\n            const hydratedEl = instance.vnode.el;\r\n            instance\r\n                .asyncDep.catch(err => {\r\n                handleError(err, instance, 0 /* SETUP_FUNCTION */);\r\n            })\r\n                .then(asyncSetupResult => {\r\n                // retry when the setup() promise resolves.\r\n                // component may have been unmounted before resolve.\r\n                if (instance.isUnmounted ||\r\n                    suspense.isUnmounted ||\r\n                    suspense.pendingId !== instance.suspenseId) {\r\n                    return;\r\n                }\r\n                // retry from this component\r\n                instance.asyncResolved = true;\r\n                const { vnode } = instance;\r\n                if ((false)) {}\r\n                handleSetupResult(instance, asyncSetupResult, false);\r\n                if (hydratedEl) {\r\n                    // vnode may have been replaced if an update happened before the\r\n                    // async dep is resolved.\r\n                    vnode.el = hydratedEl;\r\n                }\r\n                const placeholder = !hydratedEl && instance.subTree.el;\r\n                setupRenderEffect(instance, vnode, \r\n                // component may have been moved before resolve.\r\n                // if this is not a hydration, instance.subTree will be the comment\r\n                // placeholder.\r\n                parentNode(hydratedEl || instance.subTree.el), \r\n                // anchor will not be used if this is hydration, so only need to\r\n                // consider the comment placeholder case.\r\n                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);\r\n                if (placeholder) {\r\n                    remove(placeholder);\r\n                }\r\n                updateHOCHostEl(instance, vnode.el);\r\n                if ((false)) {}\r\n                // only decrease deps count if suspense is not already resolved\r\n                if (isInPendingSuspense && --suspense.deps === 0) {\r\n                    suspense.resolve();\r\n                }\r\n            });\r\n        },\r\n        unmount(parentSuspense, doRemove) {\r\n            suspense.isUnmounted = true;\r\n            if (suspense.activeBranch) {\r\n                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n            if (suspense.pendingBranch) {\r\n                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n        }\r\n    };\r\n    return suspense;\r\n}\r\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {\r\n    /* eslint-disable no-restricted-globals */\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement(\'div\'), null, isSVG, slotScopeIds, optimized, rendererInternals, true /* hydrating */));\r\n    // there are two possible scenarios for server-rendered suspense:\r\n    // - success: ssr content should be fully resolved\r\n    // - failure: ssr content should be the fallback branch.\r\n    // however, on the client we don\'t really know if it has failed or not\r\n    // attempt to hydrate the DOM assuming it has succeeded, but we still\r\n    // need to construct a suspense boundary first\r\n    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);\r\n    if (suspense.deps === 0) {\r\n        suspense.resolve();\r\n    }\r\n    return result;\r\n    /* eslint-enable no-restricted-globals */\r\n}\r\nfunction normalizeSuspenseChildren(vnode) {\r\n    const { shapeFlag, children } = vnode;\r\n    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */;\r\n    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);\r\n    vnode.ssFallback = isSlotChildren\r\n        ? normalizeSuspenseSlot(children.fallback)\r\n        : createVNode(runtime_core_esm_bundler_Comment);\r\n}\r\nfunction normalizeSuspenseSlot(s) {\r\n    let block;\r\n    if (shared_esm_bundler_isFunction(s)) {\r\n        const trackBlock = isBlockTreeEnabled && s._c;\r\n        if (trackBlock) {\r\n            // disableTracking: false\r\n            // allow block tracking for compiled slots\r\n            // (see ./componentRenderContext.ts)\r\n            s._d = false;\r\n            runtime_core_esm_bundler_openBlock();\r\n        }\r\n        s = s();\r\n        if (trackBlock) {\r\n            s._d = true;\r\n            block = currentBlock;\r\n            closeBlock();\r\n        }\r\n    }\r\n    if (shared_esm_bundler_isArray(s)) {\r\n        const singleChild = filterSingleRoot(s);\r\n        if (false) {}\r\n        s = singleChild;\r\n    }\r\n    s = normalizeVNode(s);\r\n    if (block && !s.dynamicChildren) {\r\n        s.dynamicChildren = block.filter(c => c !== s);\r\n    }\r\n    return s;\r\n}\r\nfunction queueEffectWithSuspense(fn, suspense) {\r\n    if (suspense && suspense.pendingBranch) {\r\n        if (shared_esm_bundler_isArray(fn)) {\r\n            suspense.effects.push(...fn);\r\n        }\r\n        else {\r\n            suspense.effects.push(fn);\r\n        }\r\n    }\r\n    else {\r\n        queuePostFlushCb(fn);\r\n    }\r\n}\r\nfunction setActiveBranch(suspense, branch) {\r\n    suspense.activeBranch = branch;\r\n    const { vnode, parentComponent } = suspense;\r\n    const el = (vnode.el = branch.el);\r\n    // in case suspense is the root node of a component,\r\n    // recursively update the HOC el\r\n    if (parentComponent && parentComponent.subTree === vnode) {\r\n        parentComponent.vnode.el = el;\r\n        updateHOCHostEl(parentComponent, el);\r\n    }\r\n}\n\nfunction runtime_core_esm_bundler_provide(key, value) {\r\n    if (!currentInstance) {\r\n        if ((false)) {}\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent\'s provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        // TS doesn\'t allow symbol as index type\r\n        provides[key] = value;\r\n    }\r\n}\r\nfunction runtime_core_esm_bundler_inject(key, defaultValue, treatDefaultAsFactory = false) {\r\n    // fallback to `currentRenderingInstance` so that this can be called in\r\n    // a functional component\r\n    const instance = currentInstance || currentRenderingInstance;\r\n    if (instance) {\r\n        // #2400\r\n        // to support `app.use` plugins,\r\n        // fallback to appContext\'s `provides` if the instance is at root\r\n        const provides = instance.parent == null\r\n            ? instance.vnode.appContext && instance.vnode.appContext.provides\r\n            : instance.parent.provides;\r\n        if (provides && key in provides) {\r\n            // TS doesn\'t allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (arguments.length > 1) {\r\n            return treatDefaultAsFactory && shared_esm_bundler_isFunction(defaultValue)\r\n                ? defaultValue.call(instance.proxy)\r\n                : defaultValue;\r\n        }\r\n        else if ((false)) {}\r\n    }\r\n    else if ((false)) {}\r\n}\n\n// Simple effect.\r\nfunction runtime_core_esm_bundler_watchEffect(effect, options) {\r\n    return doWatch(effect, null, options);\r\n}\r\nfunction watchPostEffect(effect, options) {\r\n    return doWatch(effect, null, (( false)\r\n        ? 0\r\n        : { flush: \'post\' }));\r\n}\r\nfunction watchSyncEffect(effect, options) {\r\n    return doWatch(effect, null, (( false)\r\n        ? 0\r\n        : { flush: \'sync\' }));\r\n}\r\n// initial value for watchers to trigger on undefined initial values\r\nconst INITIAL_WATCHER_VALUE = {};\r\n// implementation\r\nfunction runtime_core_esm_bundler_watch(source, cb, options) {\r\n    if (false) {}\r\n    return doWatch(source, cb, options);\r\n}\r\nfunction doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {\r\n    if (false) {}\r\n    const warnInvalidSource = (s) => {\r\n        runtime_core_esm_bundler_warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +\r\n            `a reactive object, or an array of these types.`);\r\n    };\r\n    const instance = currentInstance;\r\n    let getter;\r\n    let forceTrigger = false;\r\n    let isMultiSource = false;\r\n    if (reactivity_esm_bundler_isRef(source)) {\r\n        getter = () => source.value;\r\n        forceTrigger = isShallow(source);\r\n    }\r\n    else if (isReactive(source)) {\r\n        getter = () => source;\r\n        deep = true;\r\n    }\r\n    else if (shared_esm_bundler_isArray(source)) {\r\n        isMultiSource = true;\r\n        forceTrigger = source.some(isReactive);\r\n        getter = () => source.map(s => {\r\n            if (reactivity_esm_bundler_isRef(s)) {\r\n                return s.value;\r\n            }\r\n            else if (isReactive(s)) {\r\n                return traverse(s);\r\n            }\r\n            else if (shared_esm_bundler_isFunction(s)) {\r\n                return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */);\r\n            }\r\n            else {\r\n                ( false) && 0;\r\n            }\r\n        });\r\n    }\r\n    else if (shared_esm_bundler_isFunction(source)) {\r\n        if (cb) {\r\n            // getter with cb\r\n            getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */);\r\n        }\r\n        else {\r\n            // no cb -> simple effect\r\n            getter = () => {\r\n                if (instance && instance.isUnmounted) {\r\n                    return;\r\n                }\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [onCleanup]);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        getter = shared_esm_bundler_NOOP;\r\n        ( false) && 0;\r\n    }\r\n    if (cb && deep) {\r\n        const baseGetter = getter;\r\n        getter = () => traverse(baseGetter());\r\n    }\r\n    let cleanup;\r\n    let onCleanup = (fn) => {\r\n        cleanup = effect.onStop = () => {\r\n            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);\r\n        };\r\n    };\r\n    // in SSR there is no need to setup an actual effect, and it should be noop\r\n    // unless it\'s eager\r\n    if (isInSSRComponentSetup) {\r\n        // we will also not call the invalidate callback (+ runner is not set up)\r\n        onCleanup = shared_esm_bundler_NOOP;\r\n        if (!cb) {\r\n            getter();\r\n        }\r\n        else if (immediate) {\r\n            callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                getter(),\r\n                isMultiSource ? [] : undefined,\r\n                onCleanup\r\n            ]);\r\n        }\r\n        return shared_esm_bundler_NOOP;\r\n    }\r\n    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;\r\n    const job = () => {\r\n        if (!effect.active) {\r\n            return;\r\n        }\r\n        if (cb) {\r\n            // watch(source, cb)\r\n            const newValue = effect.run();\r\n            if (deep ||\r\n                forceTrigger ||\r\n                (isMultiSource\r\n                    ? newValue.some((v, i) => hasChanged(v, oldValue[i]))\r\n                    : hasChanged(newValue, oldValue)) ||\r\n                (false  )) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                    newValue,\r\n                    // pass undefined as the old value when it\'s changed for the first time\r\n                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\r\n                    onCleanup\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        else {\r\n            // watchEffect\r\n            effect.run();\r\n        }\r\n    };\r\n    // important: mark the job as a watcher callback so that scheduler knows\r\n    // it is allowed to self-trigger (#1727)\r\n    job.allowRecurse = !!cb;\r\n    let scheduler;\r\n    if (flush === \'sync\') {\r\n        scheduler = job; // the scheduler function gets called directly\r\n    }\r\n    else if (flush === \'post\') {\r\n        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);\r\n    }\r\n    else {\r\n        // default: \'pre\'\r\n        scheduler = () => {\r\n            if (!instance || instance.isMounted) {\r\n                queuePreFlushCb(job);\r\n            }\r\n            else {\r\n                // with \'pre\' option, the first call must happen before\r\n                // the component is mounted so it is called synchronously.\r\n                job();\r\n            }\r\n        };\r\n    }\r\n    const effect = new ReactiveEffect(getter, scheduler);\r\n    if ((false)) {}\r\n    // initial run\r\n    if (cb) {\r\n        if (immediate) {\r\n            job();\r\n        }\r\n        else {\r\n            oldValue = effect.run();\r\n        }\r\n    }\r\n    else if (flush === \'post\') {\r\n        queuePostRenderEffect(effect.run.bind(effect), instance && instance.suspense);\r\n    }\r\n    else {\r\n        effect.run();\r\n    }\r\n    return () => {\r\n        effect.stop();\r\n        if (instance && instance.scope) {\r\n            remove(instance.scope.effects, effect);\r\n        }\r\n    };\r\n}\r\n// this.$watch\r\nfunction instanceWatch(source, value, options) {\r\n    const publicThis = this.proxy;\r\n    const getter = shared_esm_bundler_isString(source)\r\n        ? source.includes(\'.\')\r\n            ? createPathGetter(publicThis, source)\r\n            : () => publicThis[source]\r\n        : source.bind(publicThis, publicThis);\r\n    let cb;\r\n    if (shared_esm_bundler_isFunction(value)) {\r\n        cb = value;\r\n    }\r\n    else {\r\n        cb = value.handler;\r\n        options = value;\r\n    }\r\n    const cur = currentInstance;\r\n    setCurrentInstance(this);\r\n    const res = doWatch(getter, cb.bind(publicThis), options);\r\n    if (cur) {\r\n        setCurrentInstance(cur);\r\n    }\r\n    else {\r\n        unsetCurrentInstance();\r\n    }\r\n    return res;\r\n}\r\nfunction createPathGetter(ctx, path) {\r\n    const segments = path.split(\'.\');\r\n    return () => {\r\n        let cur = ctx;\r\n        for (let i = 0; i < segments.length && cur; i++) {\r\n            cur = cur[segments[i]];\r\n        }\r\n        return cur;\r\n    };\r\n}\r\nfunction traverse(value, seen) {\r\n    if (!shared_esm_bundler_isObject(value) || value["__v_skip" /* SKIP */]) {\r\n        return value;\r\n    }\r\n    seen = seen || new Set();\r\n    if (seen.has(value)) {\r\n        return value;\r\n    }\r\n    seen.add(value);\r\n    if (reactivity_esm_bundler_isRef(value)) {\r\n        traverse(value.value, seen);\r\n    }\r\n    else if (shared_esm_bundler_isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            traverse(value[i], seen);\r\n        }\r\n    }\r\n    else if (isSet(value) || isMap(value)) {\r\n        value.forEach((v) => {\r\n            traverse(v, seen);\r\n        });\r\n    }\r\n    else if (isPlainObject(value)) {\r\n        for (const key in value) {\r\n            traverse(value[key], seen);\r\n        }\r\n    }\r\n    return value;\r\n}\n\nfunction useTransitionState() {\r\n    const state = {\r\n        isMounted: false,\r\n        isLeaving: false,\r\n        isUnmounting: false,\r\n        leavingVNodes: new Map()\r\n    };\r\n    runtime_core_esm_bundler_onMounted(() => {\r\n        state.isMounted = true;\r\n    });\r\n    runtime_core_esm_bundler_onBeforeUnmount(() => {\r\n        state.isUnmounting = true;\r\n    });\r\n    return state;\r\n}\r\nconst TransitionHookValidator = [Function, Array];\r\nconst BaseTransitionImpl = {\r\n    name: `BaseTransition`,\r\n    props: {\r\n        mode: String,\r\n        appear: Boolean,\r\n        persisted: Boolean,\r\n        // enter\r\n        onBeforeEnter: TransitionHookValidator,\r\n        onEnter: TransitionHookValidator,\r\n        onAfterEnter: TransitionHookValidator,\r\n        onEnterCancelled: TransitionHookValidator,\r\n        // leave\r\n        onBeforeLeave: TransitionHookValidator,\r\n        onLeave: TransitionHookValidator,\r\n        onAfterLeave: TransitionHookValidator,\r\n        onLeaveCancelled: TransitionHookValidator,\r\n        // appear\r\n        onBeforeAppear: TransitionHookValidator,\r\n        onAppear: TransitionHookValidator,\r\n        onAfterAppear: TransitionHookValidator,\r\n        onAppearCancelled: TransitionHookValidator\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = runtime_core_esm_bundler_getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevTransitionKey;\r\n        return () => {\r\n            const children = slots.default && getTransitionRawChildren(slots.default(), true);\r\n            if (!children || !children.length) {\r\n                return;\r\n            }\r\n            // warn multiple elements\r\n            if (false) {}\r\n            // there\'s no need to track reactivity for these props so use the raw\r\n            // props for a bit better perf\r\n            const rawProps = reactivity_esm_bundler_toRaw(props);\r\n            const { mode } = rawProps;\r\n            // check mode\r\n            if (false) {}\r\n            // at this point children has a guaranteed length of 1.\r\n            const child = children[0];\r\n            if (state.isLeaving) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            // in the case of <transition><keep-alive/></transition>, we need to\r\n            // compare the type of the kept-alive children.\r\n            const innerChild = getKeepAliveChild(child);\r\n            if (!innerChild) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);\r\n            setTransitionHooks(innerChild, enterHooks);\r\n            const oldChild = instance.subTree;\r\n            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);\r\n            let transitionKeyChanged = false;\r\n            const { getTransitionKey } = innerChild.type;\r\n            if (getTransitionKey) {\r\n                const key = getTransitionKey();\r\n                if (prevTransitionKey === undefined) {\r\n                    prevTransitionKey = key;\r\n                }\r\n                else if (key !== prevTransitionKey) {\r\n                    prevTransitionKey = key;\r\n                    transitionKeyChanged = true;\r\n                }\r\n            }\r\n            // handle mode\r\n            if (oldInnerChild &&\r\n                oldInnerChild.type !== runtime_core_esm_bundler_Comment &&\r\n                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\r\n                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\r\n                // update old tree\'s hooks in case of dynamic transition\r\n                setTransitionHooks(oldInnerChild, leavingHooks);\r\n                // switching between different views\r\n                if (mode === \'out-in\') {\r\n                    state.isLeaving = true;\r\n                    // return placeholder node and queue update when leave finishes\r\n                    leavingHooks.afterLeave = () => {\r\n                        state.isLeaving = false;\r\n                        instance.update();\r\n                    };\r\n                    return emptyPlaceholder(child);\r\n                }\r\n                else if (mode === \'in-out\' && innerChild.type !== runtime_core_esm_bundler_Comment) {\r\n                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\r\n                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\r\n                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;\r\n                        // early removal callback\r\n                        el._leaveCb = () => {\r\n                            earlyRemove();\r\n                            el._leaveCb = undefined;\r\n                            delete enterHooks.delayedLeave;\r\n                        };\r\n                        enterHooks.delayedLeave = delayedLeave;\r\n                    };\r\n                }\r\n            }\r\n            return child;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst BaseTransition = BaseTransitionImpl;\r\nfunction getLeavingNodesForType(state, vnode) {\r\n    const { leavingVNodes } = state;\r\n    let leavingVNodesCache = leavingVNodes.get(vnode.type);\r\n    if (!leavingVNodesCache) {\r\n        leavingVNodesCache = Object.create(null);\r\n        leavingVNodes.set(vnode.type, leavingVNodesCache);\r\n    }\r\n    return leavingVNodesCache;\r\n}\r\n// The transition hooks are attached to the vnode as vnode.transition\r\n// and will be called at appropriate timing in the renderer.\r\nfunction resolveTransitionHooks(vnode, props, state, instance) {\r\n    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;\r\n    const key = String(vnode.key);\r\n    const leavingVNodesCache = getLeavingNodesForType(state, vnode);\r\n    const callHook = (hook, args) => {\r\n        hook &&\r\n            callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */, args);\r\n    };\r\n    const hooks = {\r\n        mode,\r\n        persisted,\r\n        beforeEnter(el) {\r\n            let hook = onBeforeEnter;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onBeforeAppear || onBeforeEnter;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            // for same element (v-show)\r\n            if (el._leaveCb) {\r\n                el._leaveCb(true /* cancelled */);\r\n            }\r\n            // for toggled element with same key (v-if)\r\n            const leavingVNode = leavingVNodesCache[key];\r\n            if (leavingVNode &&\r\n                isSameVNodeType(vnode, leavingVNode) &&\r\n                leavingVNode.el._leaveCb) {\r\n                // force early removal (not cancelled)\r\n                leavingVNode.el._leaveCb();\r\n            }\r\n            callHook(hook, [el]);\r\n        },\r\n        enter(el) {\r\n            let hook = onEnter;\r\n            let afterHook = onAfterEnter;\r\n            let cancelHook = onEnterCancelled;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onAppear || onEnter;\r\n                    afterHook = onAfterAppear || onAfterEnter;\r\n                    cancelHook = onAppearCancelled || onEnterCancelled;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            let called = false;\r\n            const done = (el._enterCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                if (cancelled) {\r\n                    callHook(cancelHook, [el]);\r\n                }\r\n                else {\r\n                    callHook(afterHook, [el]);\r\n                }\r\n                if (hooks.delayedLeave) {\r\n                    hooks.delayedLeave();\r\n                }\r\n                el._enterCb = undefined;\r\n            });\r\n            if (hook) {\r\n                hook(el, done);\r\n                if (hook.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        leave(el, remove) {\r\n            const key = String(vnode.key);\r\n            if (el._enterCb) {\r\n                el._enterCb(true /* cancelled */);\r\n            }\r\n            if (state.isUnmounting) {\r\n                return remove();\r\n            }\r\n            callHook(onBeforeLeave, [el]);\r\n            let called = false;\r\n            const done = (el._leaveCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                remove();\r\n                if (cancelled) {\r\n                    callHook(onLeaveCancelled, [el]);\r\n                }\r\n                else {\r\n                    callHook(onAfterLeave, [el]);\r\n                }\r\n                el._leaveCb = undefined;\r\n                if (leavingVNodesCache[key] === vnode) {\r\n                    delete leavingVNodesCache[key];\r\n                }\r\n            });\r\n            leavingVNodesCache[key] = vnode;\r\n            if (onLeave) {\r\n                onLeave(el, done);\r\n                if (onLeave.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        clone(vnode) {\r\n            return resolveTransitionHooks(vnode, props, state, instance);\r\n        }\r\n    };\r\n    return hooks;\r\n}\r\n// the placeholder really only handles one special case: KeepAlive\r\n// in the case of a KeepAlive in a leave phase we need to return a KeepAlive\r\n// placeholder with empty content to avoid the KeepAlive instance from being\r\n// unmounted.\r\nfunction emptyPlaceholder(vnode) {\r\n    if (isKeepAlive(vnode)) {\r\n        vnode = cloneVNode(vnode);\r\n        vnode.children = null;\r\n        return vnode;\r\n    }\r\n}\r\nfunction getKeepAliveChild(vnode) {\r\n    return isKeepAlive(vnode)\r\n        ? vnode.children\r\n            ? vnode.children[0]\r\n            : undefined\r\n        : vnode;\r\n}\r\nfunction setTransitionHooks(vnode, hooks) {\r\n    if (vnode.shapeFlag & 6 /* COMPONENT */ && vnode.component) {\r\n        setTransitionHooks(vnode.component.subTree, hooks);\r\n    }\r\n    else if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        vnode.ssContent.transition = hooks.clone(vnode.ssContent);\r\n        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\r\n    }\r\n    else {\r\n        vnode.transition = hooks;\r\n    }\r\n}\r\nfunction getTransitionRawChildren(children, keepComment = false) {\r\n    let ret = [];\r\n    let keyedFragmentCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // handle fragment children case, e.g. v-for\r\n        if (child.type === runtime_core_esm_bundler_Fragment) {\r\n            if (child.patchFlag & 128 /* KEYED_FRAGMENT */)\r\n                keyedFragmentCount++;\r\n            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));\r\n        }\r\n        // comment placeholders should be skipped, e.g. v-if\r\n        else if (keepComment || child.type !== runtime_core_esm_bundler_Comment) {\r\n            ret.push(child);\r\n        }\r\n    }\r\n    // #1126 if a transition children list contains multiple sub fragments, these\r\n    // fragments will be merged into a flat children array. Since each v-for\r\n    // fragment may contain different static bindings inside, we need to de-op\r\n    // these children to force full diffs to ensure correct behavior.\r\n    if (keyedFragmentCount > 1) {\r\n        for (let i = 0; i < ret.length; i++) {\r\n            ret[i].patchFlag = -2 /* BAIL */;\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n// implementation, close to no-op\r\nfunction defineComponent(options) {\r\n    return shared_esm_bundler_isFunction(options) ? { setup: options, name: options.name } : options;\r\n}\n\nconst isAsyncWrapper = (i) => !!i.type.__asyncLoader;\r\nfunction defineAsyncComponent(source) {\r\n    if (shared_esm_bundler_isFunction(source)) {\r\n        source = { loader: source };\r\n    }\r\n    const { loader, loadingComponent, errorComponent, delay = 200, timeout, // undefined = never times out\r\n    suspensible = true, onError: userOnError } = source;\r\n    let pendingRequest = null;\r\n    let resolvedComp;\r\n    let retries = 0;\r\n    const retry = () => {\r\n        retries++;\r\n        pendingRequest = null;\r\n        return load();\r\n    };\r\n    const load = () => {\r\n        let thisRequest;\r\n        return (pendingRequest ||\r\n            (thisRequest = pendingRequest =\r\n                loader()\r\n                    .catch(err => {\r\n                    err = err instanceof Error ? err : new Error(String(err));\r\n                    if (userOnError) {\r\n                        return new Promise((resolve, reject) => {\r\n                            const userRetry = () => resolve(retry());\r\n                            const userFail = () => reject(err);\r\n                            userOnError(err, userRetry, userFail, retries + 1);\r\n                        });\r\n                    }\r\n                    else {\r\n                        throw err;\r\n                    }\r\n                })\r\n                    .then((comp) => {\r\n                    if (thisRequest !== pendingRequest && pendingRequest) {\r\n                        return pendingRequest;\r\n                    }\r\n                    if (false) {}\r\n                    // interop module default\r\n                    if (comp &&\r\n                        (comp.__esModule || comp[Symbol.toStringTag] === \'Module\')) {\r\n                        comp = comp.default;\r\n                    }\r\n                    if (false) {}\r\n                    resolvedComp = comp;\r\n                    return comp;\r\n                })));\r\n    };\r\n    return defineComponent({\r\n        name: \'AsyncComponentWrapper\',\r\n        __asyncLoader: load,\r\n        get __asyncResolved() {\r\n            return resolvedComp;\r\n        },\r\n        setup() {\r\n            const instance = currentInstance;\r\n            // already resolved\r\n            if (resolvedComp) {\r\n                return () => createInnerComp(resolvedComp, instance);\r\n            }\r\n            const onError = (err) => {\r\n                pendingRequest = null;\r\n                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);\r\n            };\r\n            // suspense-controlled or SSR.\r\n            if ((suspensible && instance.suspense) ||\r\n                (isInSSRComponentSetup)) {\r\n                return load()\r\n                    .then(comp => {\r\n                    return () => createInnerComp(comp, instance);\r\n                })\r\n                    .catch(err => {\r\n                    onError(err);\r\n                    return () => errorComponent\r\n                        ? createVNode(errorComponent, {\r\n                            error: err\r\n                        })\r\n                        : null;\r\n                });\r\n            }\r\n            const loaded = reactivity_esm_bundler_ref(false);\r\n            const error = reactivity_esm_bundler_ref();\r\n            const delayed = reactivity_esm_bundler_ref(!!delay);\r\n            if (delay) {\r\n                setTimeout(() => {\r\n                    delayed.value = false;\r\n                }, delay);\r\n            }\r\n            if (timeout != null) {\r\n                setTimeout(() => {\r\n                    if (!loaded.value && !error.value) {\r\n                        const err = new Error(`Async component timed out after ${timeout}ms.`);\r\n                        onError(err);\r\n                        error.value = err;\r\n                    }\r\n                }, timeout);\r\n            }\r\n            load()\r\n                .then(() => {\r\n                loaded.value = true;\r\n                if (instance.parent && isKeepAlive(instance.parent.vnode)) {\r\n                    // parent is keep-alive, force update so the loaded component\'s\r\n                    // name is taken into account\r\n                    queueJob(instance.parent.update);\r\n                }\r\n            })\r\n                .catch(err => {\r\n                onError(err);\r\n                error.value = err;\r\n            });\r\n            return () => {\r\n                if (loaded.value && resolvedComp) {\r\n                    return createInnerComp(resolvedComp, instance);\r\n                }\r\n                else if (error.value && errorComponent) {\r\n                    return createVNode(errorComponent, {\r\n                        error: error.value\r\n                    });\r\n                }\r\n                else if (loadingComponent && !delayed.value) {\r\n                    return createVNode(loadingComponent);\r\n                }\r\n            };\r\n        }\r\n    });\r\n}\r\nfunction createInnerComp(comp, { vnode: { ref, props, children } }) {\r\n    const vnode = createVNode(comp, props, children);\r\n    // ensure inner component inherits the async wrapper\'s ref owner\r\n    vnode.ref = ref;\r\n    return vnode;\r\n}\n\nconst isKeepAlive = (vnode) => vnode.type.__isKeepAlive;\r\nconst KeepAliveImpl = {\r\n    name: `KeepAlive`,\r\n    // Marker for special handling inside the renderer. We are not using a ===\r\n    // check directly on KeepAlive in the renderer, because importing it directly\r\n    // would prevent it from being tree-shaken.\r\n    __isKeepAlive: true,\r\n    props: {\r\n        include: [String, RegExp, Array],\r\n        exclude: [String, RegExp, Array],\r\n        max: [String, Number]\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = runtime_core_esm_bundler_getCurrentInstance();\r\n        // KeepAlive communicates with the instantiated renderer via the\r\n        // ctx where the renderer passes in its internals,\r\n        // and the KeepAlive instance exposes activate/deactivate implementations.\r\n        // The whole point of this is to avoid importing KeepAlive directly in the\r\n        // renderer to facilitate tree-shaking.\r\n        const sharedContext = instance.ctx;\r\n        // if the internal renderer is not registered, it indicates that this is server-side rendering,\r\n        // for KeepAlive, we just need to render its children\r\n        if (!sharedContext.renderer) {\r\n            return slots.default;\r\n        }\r\n        const cache = new Map();\r\n        const keys = new Set();\r\n        let current = null;\r\n        if (false) {}\r\n        const parentSuspense = instance.suspense;\r\n        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;\r\n        const storageContainer = createElement(\'div\');\r\n        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {\r\n            const instance = vnode.component;\r\n            move(vnode, container, anchor, 0 /* ENTER */, parentSuspense);\r\n            // in case props have changed\r\n            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);\r\n            queuePostRenderEffect(() => {\r\n                instance.isDeactivated = false;\r\n                if (instance.a) {\r\n                    invokeArrayFns(instance.a);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n            }, parentSuspense);\r\n            if (false) {}\r\n        };\r\n        sharedContext.deactivate = (vnode) => {\r\n            const instance = vnode.component;\r\n            move(vnode, storageContainer, null, 1 /* LEAVE */, parentSuspense);\r\n            queuePostRenderEffect(() => {\r\n                if (instance.da) {\r\n                    invokeArrayFns(instance.da);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n                instance.isDeactivated = true;\r\n            }, parentSuspense);\r\n            if (false) {}\r\n        };\r\n        function unmount(vnode) {\r\n            // reset the shapeFlag so it can be properly unmounted\r\n            resetShapeFlag(vnode);\r\n            _unmount(vnode, instance, parentSuspense, true);\r\n        }\r\n        function pruneCache(filter) {\r\n            cache.forEach((vnode, key) => {\r\n                const name = getComponentName(vnode.type);\r\n                if (name && (!filter || !filter(name))) {\r\n                    pruneCacheEntry(key);\r\n                }\r\n            });\r\n        }\r\n        function pruneCacheEntry(key) {\r\n            const cached = cache.get(key);\r\n            if (!current || cached.type !== current.type) {\r\n                unmount(cached);\r\n            }\r\n            else if (current) {\r\n                // current active instance should no longer be kept-alive.\r\n                // we can\'t unmount it now but it might be later, so reset its flag now.\r\n                resetShapeFlag(current);\r\n            }\r\n            cache.delete(key);\r\n            keys.delete(key);\r\n        }\r\n        // prune cache on include/exclude prop change\r\n        runtime_core_esm_bundler_watch(() => [props.include, props.exclude], ([include, exclude]) => {\r\n            include && pruneCache(name => matches(include, name));\r\n            exclude && pruneCache(name => !matches(exclude, name));\r\n        }, \r\n        // prune post-render after `current` has been updated\r\n        { flush: \'post\', deep: true });\r\n        // cache sub tree after render\r\n        let pendingCacheKey = null;\r\n        const cacheSubtree = () => {\r\n            // fix #1621, the pendingCacheKey could be 0\r\n            if (pendingCacheKey != null) {\r\n                cache.set(pendingCacheKey, getInnerChild(instance.subTree));\r\n            }\r\n        };\r\n        runtime_core_esm_bundler_onMounted(cacheSubtree);\r\n        runtime_core_esm_bundler_onUpdated(cacheSubtree);\r\n        runtime_core_esm_bundler_onBeforeUnmount(() => {\r\n            cache.forEach(cached => {\r\n                const { subTree, suspense } = instance;\r\n                const vnode = getInnerChild(subTree);\r\n                if (cached.type === vnode.type) {\r\n                    // current instance will be unmounted as part of keep-alive\'s unmount\r\n                    resetShapeFlag(vnode);\r\n                    // but invoke its deactivated hook here\r\n                    const da = vnode.component.da;\r\n                    da && queuePostRenderEffect(da, suspense);\r\n                    return;\r\n                }\r\n                unmount(cached);\r\n            });\r\n        });\r\n        return () => {\r\n            pendingCacheKey = null;\r\n            if (!slots.default) {\r\n                return null;\r\n            }\r\n            const children = slots.default();\r\n            const rawVNode = children[0];\r\n            if (children.length > 1) {\r\n                if ((false)) {}\r\n                current = null;\r\n                return children;\r\n            }\r\n            else if (!runtime_core_esm_bundler_isVNode(rawVNode) ||\r\n                (!(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) &&\r\n                    !(rawVNode.shapeFlag & 128 /* SUSPENSE */))) {\r\n                current = null;\r\n                return rawVNode;\r\n            }\r\n            let vnode = getInnerChild(rawVNode);\r\n            const comp = vnode.type;\r\n            // for async components, name check should be based in its loaded\r\n            // inner component if available\r\n            const name = getComponentName(isAsyncWrapper(vnode)\r\n                ? vnode.type.__asyncResolved || {}\r\n                : comp);\r\n            const { include, exclude, max } = props;\r\n            if ((include && (!name || !matches(include, name))) ||\r\n                (exclude && name && matches(exclude, name))) {\r\n                current = vnode;\r\n                return rawVNode;\r\n            }\r\n            const key = vnode.key == null ? comp : vnode.key;\r\n            const cachedVNode = cache.get(key);\r\n            // clone vnode if it\'s reused because we are going to mutate it\r\n            if (vnode.el) {\r\n                vnode = cloneVNode(vnode);\r\n                if (rawVNode.shapeFlag & 128 /* SUSPENSE */) {\r\n                    rawVNode.ssContent = vnode;\r\n                }\r\n            }\r\n            // #1513 it\'s possible for the returned vnode to be cloned due to attr\r\n            // fallthrough or scopeId, so the vnode here may not be the final vnode\r\n            // that is mounted. Instead of caching it directly, we store the pending\r\n            // key and cache `instance.subTree` (the normalized vnode) in\r\n            // beforeMount/beforeUpdate hooks.\r\n            pendingCacheKey = key;\r\n            if (cachedVNode) {\r\n                // copy over mounted state\r\n                vnode.el = cachedVNode.el;\r\n                vnode.component = cachedVNode.component;\r\n                if (vnode.transition) {\r\n                    // recursively update transition hooks on subTree\r\n                    setTransitionHooks(vnode, vnode.transition);\r\n                }\r\n                // avoid vnode being mounted as fresh\r\n                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */;\r\n                // make this key the freshest\r\n                keys.delete(key);\r\n                keys.add(key);\r\n            }\r\n            else {\r\n                keys.add(key);\r\n                // prune oldest entry\r\n                if (max && keys.size > parseInt(max, 10)) {\r\n                    pruneCacheEntry(keys.values().next().value);\r\n                }\r\n            }\r\n            // avoid vnode being unmounted\r\n            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n            current = vnode;\r\n            return rawVNode;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst KeepAlive = KeepAliveImpl;\r\nfunction matches(pattern, name) {\r\n    if (shared_esm_bundler_isArray(pattern)) {\r\n        return pattern.some((p) => matches(p, name));\r\n    }\r\n    else if (shared_esm_bundler_isString(pattern)) {\r\n        return pattern.split(\',\').includes(name);\r\n    }\r\n    else if (pattern.test) {\r\n        return pattern.test(name);\r\n    }\r\n    /* istanbul ignore next */\r\n    return false;\r\n}\r\nfunction onActivated(hook, target) {\r\n    registerKeepAliveHook(hook, "a" /* ACTIVATED */, target);\r\n}\r\nfunction onDeactivated(hook, target) {\r\n    registerKeepAliveHook(hook, "da" /* DEACTIVATED */, target);\r\n}\r\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\r\n    // cache the deactivate branch check wrapper for injected hooks so the same\r\n    // hook can be properly deduped by the scheduler. "__wdc" stands for "with\r\n    // deactivation check".\r\n    const wrappedHook = hook.__wdc ||\r\n        (hook.__wdc = () => {\r\n            // only fire the hook if the target instance is NOT in a deactivated branch.\r\n            let current = target;\r\n            while (current) {\r\n                if (current.isDeactivated) {\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n            return hook();\r\n        });\r\n    injectHook(type, wrappedHook, target);\r\n    // In addition to registering it on the target instance, we walk up the parent\r\n    // chain and register it on all ancestor instances that are keep-alive roots.\r\n    // This avoids the need to walk the entire component tree when invoking these\r\n    // hooks, and more importantly, avoids the need to track child components in\r\n    // arrays.\r\n    if (target) {\r\n        let current = target.parent;\r\n        while (current && current.parent) {\r\n            if (isKeepAlive(current.parent.vnode)) {\r\n                injectToKeepAliveRoot(wrappedHook, type, target, current);\r\n            }\r\n            current = current.parent;\r\n        }\r\n    }\r\n}\r\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\r\n    // injectHook wraps the original for error handling, so make sure to remove\r\n    // the wrapped version.\r\n    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);\r\n    runtime_core_esm_bundler_onUnmounted(() => {\r\n        remove(keepAliveRoot[type], injected);\r\n    }, target);\r\n}\r\nfunction resetShapeFlag(vnode) {\r\n    let shapeFlag = vnode.shapeFlag;\r\n    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n        shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n    }\r\n    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n        shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */;\r\n    }\r\n    vnode.shapeFlag = shapeFlag;\r\n}\r\nfunction getInnerChild(vnode) {\r\n    return vnode.shapeFlag & 128 /* SUSPENSE */ ? vnode.ssContent : vnode;\r\n}\n\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\r\n    if (target) {\r\n        const hooks = target[type] || (target[type] = []);\r\n        // cache the error handling wrapper for injected hooks so the same hook\r\n        // can be properly deduped by the scheduler. "__weh" stands for "with error\r\n        // handling".\r\n        const wrappedHook = hook.__weh ||\r\n            (hook.__weh = (...args) => {\r\n                if (target.isUnmounted) {\r\n                    return;\r\n                }\r\n                // disable tracking inside all lifecycle hooks\r\n                // since they can potentially be called inside effects.\r\n                pauseTracking();\r\n                // Set currentInstance during hook invocation.\r\n                // This assumes the hook does not synchronously trigger other hooks, which\r\n                // can only be false when the user does something really funky.\r\n                setCurrentInstance(target);\r\n                const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n                unsetCurrentInstance();\r\n                resetTracking();\r\n                return res;\r\n            });\r\n        if (prepend) {\r\n            hooks.unshift(wrappedHook);\r\n        }\r\n        else {\r\n            hooks.push(wrappedHook);\r\n        }\r\n        return wrappedHook;\r\n    }\r\n    else if ((false)) {}\r\n}\r\nconst createHook = (lifecycle) => (hook, target = currentInstance) => \r\n// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)\r\n(!isInSSRComponentSetup || lifecycle === "sp" /* SERVER_PREFETCH */) &&\r\n    injectHook(lifecycle, hook, target);\r\nconst onBeforeMount = createHook("bm" /* BEFORE_MOUNT */);\r\nconst runtime_core_esm_bundler_onMounted = createHook("m" /* MOUNTED */);\r\nconst runtime_core_esm_bundler_onBeforeUpdate = createHook("bu" /* BEFORE_UPDATE */);\r\nconst runtime_core_esm_bundler_onUpdated = createHook("u" /* UPDATED */);\r\nconst runtime_core_esm_bundler_onBeforeUnmount = createHook("bum" /* BEFORE_UNMOUNT */);\r\nconst runtime_core_esm_bundler_onUnmounted = createHook("um" /* UNMOUNTED */);\r\nconst onServerPrefetch = createHook("sp" /* SERVER_PREFETCH */);\r\nconst onRenderTriggered = createHook("rtg" /* RENDER_TRIGGERED */);\r\nconst onRenderTracked = createHook("rtc" /* RENDER_TRACKED */);\r\nfunction onErrorCaptured(hook, target = currentInstance) {\r\n    injectHook("ec" /* ERROR_CAPTURED */, hook, target);\r\n}\n\nfunction createDuplicateChecker() {\r\n    const cache = Object.create(null);\r\n    return (type, key) => {\r\n        if (cache[key]) {\r\n            runtime_core_esm_bundler_warn(`${type} property "${key}" is already defined in ${cache[key]}.`);\r\n        }\r\n        else {\r\n            cache[key] = type;\r\n        }\r\n    };\r\n}\r\nlet shouldCacheAccess = true;\r\nfunction applyOptions(instance) {\r\n    const options = resolveMergedOptions(instance);\r\n    const publicThis = instance.proxy;\r\n    const ctx = instance.ctx;\r\n    // do not cache property access on public proxy during state initialization\r\n    shouldCacheAccess = false;\r\n    // call beforeCreate first before accessing other options since\r\n    // the hook may mutate resolved options (#2791)\r\n    if (options.beforeCreate) {\r\n        callHook(options.beforeCreate, instance, "bc" /* BEFORE_CREATE */);\r\n    }\r\n    const { \r\n    // state\r\n    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, \r\n    // lifecycle\r\n    created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, serverPrefetch, \r\n    // public API\r\n    expose, inheritAttrs, \r\n    // assets\r\n    components, directives, filters } = options;\r\n    const checkDuplicateProperties = ( false) ? 0 : null;\r\n    if ((false)) {}\r\n    // options initialization order (to be consistent with Vue 2):\r\n    // - props (already done outside of this function)\r\n    // - inject\r\n    // - methods\r\n    // - data (deferred since it relies on `this` access)\r\n    // - computed\r\n    // - watch (deferred since it relies on `this` access)\r\n    if (injectOptions) {\r\n        resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);\r\n    }\r\n    if (methods) {\r\n        for (const key in methods) {\r\n            const methodHandler = methods[key];\r\n            if (shared_esm_bundler_isFunction(methodHandler)) {\r\n                // In dev mode, we use the `createRenderContext` function to define\r\n                // methods to the proxy target, and those are read-only but\r\n                // reconfigurable, so it needs to be redefined here\r\n                if ((false)) {}\r\n                else {\r\n                    ctx[key] = methodHandler.bind(publicThis);\r\n                }\r\n                if ((false)) {}\r\n            }\r\n            else if ((false)) {}\r\n        }\r\n    }\r\n    if (dataOptions) {\r\n        if (false) {}\r\n        const data = dataOptions.call(publicThis, publicThis);\r\n        if (false) {}\r\n        if (!shared_esm_bundler_isObject(data)) {\r\n            ( false) && 0;\r\n        }\r\n        else {\r\n            instance.data = reactivity_esm_bundler_reactive(data);\r\n            if ((false)) {}\r\n        }\r\n    }\r\n    // state initialization complete at this point - start caching access\r\n    shouldCacheAccess = true;\r\n    if (computedOptions) {\r\n        for (const key in computedOptions) {\r\n            const opt = computedOptions[key];\r\n            const get = shared_esm_bundler_isFunction(opt)\r\n                ? opt.bind(publicThis, publicThis)\r\n                : shared_esm_bundler_isFunction(opt.get)\r\n                    ? opt.get.bind(publicThis, publicThis)\r\n                    : shared_esm_bundler_NOOP;\r\n            if (false) {}\r\n            const set = !shared_esm_bundler_isFunction(opt) && shared_esm_bundler_isFunction(opt.set)\r\n                ? opt.set.bind(publicThis)\r\n                : ( false)\r\n                    ? 0\r\n                    : shared_esm_bundler_NOOP;\r\n            const c = runtime_core_esm_bundler_computed({\r\n                get,\r\n                set\r\n            });\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => c.value,\r\n                set: v => (c.value = v)\r\n            });\r\n            if ((false)) {}\r\n        }\r\n    }\r\n    if (watchOptions) {\r\n        for (const key in watchOptions) {\r\n            createWatcher(watchOptions[key], ctx, publicThis, key);\r\n        }\r\n    }\r\n    if (provideOptions) {\r\n        const provides = shared_esm_bundler_isFunction(provideOptions)\r\n            ? provideOptions.call(publicThis)\r\n            : provideOptions;\r\n        Reflect.ownKeys(provides).forEach(key => {\r\n            runtime_core_esm_bundler_provide(key, provides[key]);\r\n        });\r\n    }\r\n    if (created) {\r\n        callHook(created, instance, "c" /* CREATED */);\r\n    }\r\n    function registerLifecycleHook(register, hook) {\r\n        if (shared_esm_bundler_isArray(hook)) {\r\n            hook.forEach(_hook => register(_hook.bind(publicThis)));\r\n        }\r\n        else if (hook) {\r\n            register(hook.bind(publicThis));\r\n        }\r\n    }\r\n    registerLifecycleHook(onBeforeMount, beforeMount);\r\n    registerLifecycleHook(runtime_core_esm_bundler_onMounted, mounted);\r\n    registerLifecycleHook(runtime_core_esm_bundler_onBeforeUpdate, beforeUpdate);\r\n    registerLifecycleHook(runtime_core_esm_bundler_onUpdated, updated);\r\n    registerLifecycleHook(onActivated, activated);\r\n    registerLifecycleHook(onDeactivated, deactivated);\r\n    registerLifecycleHook(onErrorCaptured, errorCaptured);\r\n    registerLifecycleHook(onRenderTracked, renderTracked);\r\n    registerLifecycleHook(onRenderTriggered, renderTriggered);\r\n    registerLifecycleHook(runtime_core_esm_bundler_onBeforeUnmount, beforeUnmount);\r\n    registerLifecycleHook(runtime_core_esm_bundler_onUnmounted, unmounted);\r\n    registerLifecycleHook(onServerPrefetch, serverPrefetch);\r\n    if (shared_esm_bundler_isArray(expose)) {\r\n        if (expose.length) {\r\n            const exposed = instance.exposed || (instance.exposed = {});\r\n            expose.forEach(key => {\r\n                Object.defineProperty(exposed, key, {\r\n                    get: () => publicThis[key],\r\n                    set: val => (publicThis[key] = val)\r\n                });\r\n            });\r\n        }\r\n        else if (!instance.exposed) {\r\n            instance.exposed = {};\r\n        }\r\n    }\r\n    // options that are handled when creating the instance but also need to be\r\n    // applied from mixins\r\n    if (render && instance.render === shared_esm_bundler_NOOP) {\r\n        instance.render = render;\r\n    }\r\n    if (inheritAttrs != null) {\r\n        instance.inheritAttrs = inheritAttrs;\r\n    }\r\n    // asset options.\r\n    if (components)\r\n        instance.components = components;\r\n    if (directives)\r\n        instance.directives = directives;\r\n}\r\nfunction resolveInjections(injectOptions, ctx, checkDuplicateProperties = shared_esm_bundler_NOOP, unwrapRef = false) {\r\n    if (shared_esm_bundler_isArray(injectOptions)) {\r\n        injectOptions = normalizeInject(injectOptions);\r\n    }\r\n    for (const key in injectOptions) {\r\n        const opt = injectOptions[key];\r\n        let injected;\r\n        if (shared_esm_bundler_isObject(opt)) {\r\n            if (\'default\' in opt) {\r\n                injected = runtime_core_esm_bundler_inject(opt.from || key, opt.default, true /* treat default function as factory */);\r\n            }\r\n            else {\r\n                injected = runtime_core_esm_bundler_inject(opt.from || key);\r\n            }\r\n        }\r\n        else {\r\n            injected = runtime_core_esm_bundler_inject(opt);\r\n        }\r\n        if (reactivity_esm_bundler_isRef(injected)) {\r\n            // TODO remove the check in 3.3\r\n            if (unwrapRef) {\r\n                Object.defineProperty(ctx, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    get: () => injected.value,\r\n                    set: v => (injected.value = v)\r\n                });\r\n            }\r\n            else {\r\n                if ((false)) {}\r\n                ctx[key] = injected;\r\n            }\r\n        }\r\n        else {\r\n            ctx[key] = injected;\r\n        }\r\n        if ((false)) {}\r\n    }\r\n}\r\nfunction callHook(hook, instance, type) {\r\n    callWithAsyncErrorHandling(shared_esm_bundler_isArray(hook)\r\n        ? hook.map(h => h.bind(instance.proxy))\r\n        : hook.bind(instance.proxy), instance, type);\r\n}\r\nfunction createWatcher(raw, ctx, publicThis, key) {\r\n    const getter = key.includes(\'.\')\r\n        ? createPathGetter(publicThis, key)\r\n        : () => publicThis[key];\r\n    if (shared_esm_bundler_isString(raw)) {\r\n        const handler = ctx[raw];\r\n        if (shared_esm_bundler_isFunction(handler)) {\r\n            runtime_core_esm_bundler_watch(getter, handler);\r\n        }\r\n        else if ((false)) {}\r\n    }\r\n    else if (shared_esm_bundler_isFunction(raw)) {\r\n        runtime_core_esm_bundler_watch(getter, raw.bind(publicThis));\r\n    }\r\n    else if (shared_esm_bundler_isObject(raw)) {\r\n        if (shared_esm_bundler_isArray(raw)) {\r\n            raw.forEach(r => createWatcher(r, ctx, publicThis, key));\r\n        }\r\n        else {\r\n            const handler = shared_esm_bundler_isFunction(raw.handler)\r\n                ? raw.handler.bind(publicThis)\r\n                : ctx[raw.handler];\r\n            if (shared_esm_bundler_isFunction(handler)) {\r\n                runtime_core_esm_bundler_watch(getter, handler, raw);\r\n            }\r\n            else if ((false)) {}\r\n        }\r\n    }\r\n    else if ((false)) {}\r\n}\r\n/**\r\n * Resolve merged options and cache it on the component.\r\n * This is done only once per-component since the merging does not involve\r\n * instances.\r\n */\r\nfunction resolveMergedOptions(instance) {\r\n    const base = instance.type;\r\n    const { mixins, extends: extendsOptions } = base;\r\n    const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;\r\n    const cached = cache.get(base);\r\n    let resolved;\r\n    if (cached) {\r\n        resolved = cached;\r\n    }\r\n    else if (!globalMixins.length && !mixins && !extendsOptions) {\r\n        {\r\n            resolved = base;\r\n        }\r\n    }\r\n    else {\r\n        resolved = {};\r\n        if (globalMixins.length) {\r\n            globalMixins.forEach(m => mergeOptions(resolved, m, optionMergeStrategies, true));\r\n        }\r\n        mergeOptions(resolved, base, optionMergeStrategies);\r\n    }\r\n    cache.set(base, resolved);\r\n    return resolved;\r\n}\r\nfunction mergeOptions(to, from, strats, asMixin = false) {\r\n    const { mixins, extends: extendsOptions } = from;\r\n    if (extendsOptions) {\r\n        mergeOptions(to, extendsOptions, strats, true);\r\n    }\r\n    if (mixins) {\r\n        mixins.forEach((m) => mergeOptions(to, m, strats, true));\r\n    }\r\n    for (const key in from) {\r\n        if (asMixin && key === \'expose\') {\r\n            ( false) &&\r\n                0;\r\n        }\r\n        else {\r\n            const strat = internalOptionMergeStrats[key] || (strats && strats[key]);\r\n            to[key] = strat ? strat(to[key], from[key]) : from[key];\r\n        }\r\n    }\r\n    return to;\r\n}\r\nconst internalOptionMergeStrats = {\r\n    data: mergeDataFn,\r\n    props: mergeObjectOptions,\r\n    emits: mergeObjectOptions,\r\n    // objects\r\n    methods: mergeObjectOptions,\r\n    computed: mergeObjectOptions,\r\n    // lifecycle\r\n    beforeCreate: mergeAsArray,\r\n    created: mergeAsArray,\r\n    beforeMount: mergeAsArray,\r\n    mounted: mergeAsArray,\r\n    beforeUpdate: mergeAsArray,\r\n    updated: mergeAsArray,\r\n    beforeDestroy: mergeAsArray,\r\n    beforeUnmount: mergeAsArray,\r\n    destroyed: mergeAsArray,\r\n    unmounted: mergeAsArray,\r\n    activated: mergeAsArray,\r\n    deactivated: mergeAsArray,\r\n    errorCaptured: mergeAsArray,\r\n    serverPrefetch: mergeAsArray,\r\n    // assets\r\n    components: mergeObjectOptions,\r\n    directives: mergeObjectOptions,\r\n    // watch\r\n    watch: mergeWatchOptions,\r\n    // provide / inject\r\n    provide: mergeDataFn,\r\n    inject: mergeInject\r\n};\r\nfunction mergeDataFn(to, from) {\r\n    if (!from) {\r\n        return to;\r\n    }\r\n    if (!to) {\r\n        return from;\r\n    }\r\n    return function mergedDataFn() {\r\n        return (shared_esm_bundler_extend)(shared_esm_bundler_isFunction(to) ? to.call(this, this) : to, shared_esm_bundler_isFunction(from) ? from.call(this, this) : from);\r\n    };\r\n}\r\nfunction mergeInject(to, from) {\r\n    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));\r\n}\r\nfunction normalizeInject(raw) {\r\n    if (shared_esm_bundler_isArray(raw)) {\r\n        const res = {};\r\n        for (let i = 0; i < raw.length; i++) {\r\n            res[raw[i]] = raw[i];\r\n        }\r\n        return res;\r\n    }\r\n    return raw;\r\n}\r\nfunction mergeAsArray(to, from) {\r\n    return to ? [...new Set([].concat(to, from))] : from;\r\n}\r\nfunction mergeObjectOptions(to, from) {\r\n    return to ? shared_esm_bundler_extend(shared_esm_bundler_extend(Object.create(null), to), from) : from;\r\n}\r\nfunction mergeWatchOptions(to, from) {\r\n    if (!to)\r\n        return from;\r\n    if (!from)\r\n        return to;\r\n    const merged = shared_esm_bundler_extend(Object.create(null), to);\r\n    for (const key in from) {\r\n        merged[key] = mergeAsArray(to[key], from[key]);\r\n    }\r\n    return merged;\r\n}\n\nfunction initProps(instance, rawProps, isStateful, // result of bitwise flag comparison\r\nisSSR = false) {\r\n    const props = {};\r\n    const attrs = {};\r\n    def(attrs, InternalObjectKey, 1);\r\n    instance.propsDefaults = Object.create(null);\r\n    setFullProps(instance, rawProps, props, attrs);\r\n    // ensure all declared prop keys are present\r\n    for (const key in instance.propsOptions[0]) {\r\n        if (!(key in props)) {\r\n            props[key] = undefined;\r\n        }\r\n    }\r\n    // validation\r\n    if ((false)) {}\r\n    if (isStateful) {\r\n        // stateful\r\n        instance.props = isSSR ? props : shallowReactive(props);\r\n    }\r\n    else {\r\n        if (!instance.type.props) {\r\n            // functional w/ optional props, props === attrs\r\n            instance.props = attrs;\r\n        }\r\n        else {\r\n            // functional w/ declared props\r\n            instance.props = props;\r\n        }\r\n    }\r\n    instance.attrs = attrs;\r\n}\r\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\r\n    const { props, attrs, vnode: { patchFlag } } = instance;\r\n    const rawCurrentProps = reactivity_esm_bundler_toRaw(props);\r\n    const [options] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    if (\r\n    // always force full diff in dev\r\n    // - #1942 if hmr is enabled with sfc component\r\n    // - vite#872 non-sfc component used by sfc component\r\n     true &&\r\n        (optimized || patchFlag > 0) &&\r\n        !(patchFlag & 16 /* FULL_PROPS */)) {\r\n        if (patchFlag & 8 /* PROPS */) {\r\n            // Compiler-generated props & no keys change, just set the updated\r\n            // the props.\r\n            const propsToUpdate = instance.vnode.dynamicProps;\r\n            for (let i = 0; i < propsToUpdate.length; i++) {\r\n                let key = propsToUpdate[i];\r\n                // PROPS flag guarantees rawProps to be non-null\r\n                const value = rawProps[key];\r\n                if (options) {\r\n                    // attr / props separation was done on init and will be consistent\r\n                    // in this code path, so just check if attrs have it.\r\n                    if (shared_esm_bundler_hasOwn(attrs, key)) {\r\n                        if (value !== attrs[key]) {\r\n                            attrs[key] = value;\r\n                            hasAttrsChanged = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        const camelizedKey = shared_esm_bundler_camelize(key);\r\n                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    if (value !== attrs[key]) {\r\n                        attrs[key] = value;\r\n                        hasAttrsChanged = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // full props update.\r\n        if (setFullProps(instance, rawProps, props, attrs)) {\r\n            hasAttrsChanged = true;\r\n        }\r\n        // in case of dynamic props, check if we need to delete keys from\r\n        // the props object\r\n        let kebabKey;\r\n        for (const key in rawCurrentProps) {\r\n            if (!rawProps ||\r\n                // for camelCase\r\n                (!shared_esm_bundler_hasOwn(rawProps, key) &&\r\n                    // it\'s possible the original props was passed in as kebab-case\r\n                    // and converted to camelCase (#955)\r\n                    ((kebabKey = shared_esm_bundler_hyphenate(key)) === key || !shared_esm_bundler_hasOwn(rawProps, kebabKey)))) {\r\n                if (options) {\r\n                    if (rawPrevProps &&\r\n                        // for camelCase\r\n                        (rawPrevProps[key] !== undefined ||\r\n                            // for kebab-case\r\n                            rawPrevProps[kebabKey] !== undefined)) {\r\n                        props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    delete props[key];\r\n                }\r\n            }\r\n        }\r\n        // in the case of functional component w/o props declaration, props and\r\n        // attrs point to the same object so it should already have been updated.\r\n        if (attrs !== rawCurrentProps) {\r\n            for (const key in attrs) {\r\n                if (!rawProps ||\r\n                    (!shared_esm_bundler_hasOwn(rawProps, key) &&\r\n                        (!false ))) {\r\n                    delete attrs[key];\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // trigger updates for $attrs in case it\'s used in component slots\r\n    if (hasAttrsChanged) {\r\n        trigger(instance, "set" /* SET */, \'$attrs\');\r\n    }\r\n    if ((false)) {}\r\n}\r\nfunction setFullProps(instance, rawProps, props, attrs) {\r\n    const [options, needCastKeys] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    let rawCastValues;\r\n    if (rawProps) {\r\n        for (let key in rawProps) {\r\n            // key, ref are reserved and never passed down\r\n            if (isReservedProp(key)) {\r\n                continue;\r\n            }\r\n            const value = rawProps[key];\r\n            // prop option names are camelized during normalization, so to support\r\n            // kebab -> camel conversion here we need to camelize the key.\r\n            let camelKey;\r\n            if (options && shared_esm_bundler_hasOwn(options, (camelKey = shared_esm_bundler_camelize(key)))) {\r\n                if (!needCastKeys || !needCastKeys.includes(camelKey)) {\r\n                    props[camelKey] = value;\r\n                }\r\n                else {\r\n                    (rawCastValues || (rawCastValues = {}))[camelKey] = value;\r\n                }\r\n            }\r\n            else if (!isEmitListener(instance.emitsOptions, key)) {\r\n                if (!(key in attrs) || value !== attrs[key]) {\r\n                    attrs[key] = value;\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (needCastKeys) {\r\n        const rawCurrentProps = reactivity_esm_bundler_toRaw(props);\r\n        const castValues = rawCastValues || EMPTY_OBJ;\r\n        for (let i = 0; i < needCastKeys.length; i++) {\r\n            const key = needCastKeys[i];\r\n            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !shared_esm_bundler_hasOwn(castValues, key));\r\n        }\r\n    }\r\n    return hasAttrsChanged;\r\n}\r\nfunction resolvePropValue(options, props, key, value, instance, isAbsent) {\r\n    const opt = options[key];\r\n    if (opt != null) {\r\n        const hasDefault = shared_esm_bundler_hasOwn(opt, \'default\');\r\n        // default values\r\n        if (hasDefault && value === undefined) {\r\n            const defaultValue = opt.default;\r\n            if (opt.type !== Function && shared_esm_bundler_isFunction(defaultValue)) {\r\n                const { propsDefaults } = instance;\r\n                if (key in propsDefaults) {\r\n                    value = propsDefaults[key];\r\n                }\r\n                else {\r\n                    setCurrentInstance(instance);\r\n                    value = propsDefaults[key] = defaultValue.call(null, props);\r\n                    unsetCurrentInstance();\r\n                }\r\n            }\r\n            else {\r\n                value = defaultValue;\r\n            }\r\n        }\r\n        // boolean casting\r\n        if (opt[0 /* shouldCast */]) {\r\n            if (isAbsent && !hasDefault) {\r\n                value = false;\r\n            }\r\n            else if (opt[1 /* shouldCastTrue */] &&\r\n                (value === \'\' || value === shared_esm_bundler_hyphenate(key))) {\r\n                value = true;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction normalizePropsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.propsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const raw = comp.props;\r\n    const normalized = {};\r\n    const needCastKeys = [];\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if ( true && !shared_esm_bundler_isFunction(comp)) {\r\n        const extendProps = (raw) => {\r\n            hasExtends = true;\r\n            const [props, keys] = normalizePropsOptions(raw, appContext, true);\r\n            shared_esm_bundler_extend(normalized, props);\r\n            if (keys)\r\n                needCastKeys.push(...keys);\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendProps);\r\n        }\r\n        if (comp.extends) {\r\n            extendProps(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendProps);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, EMPTY_ARR);\r\n        return EMPTY_ARR;\r\n    }\r\n    if (shared_esm_bundler_isArray(raw)) {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if (false) {}\r\n            const normalizedKey = shared_esm_bundler_camelize(raw[i]);\r\n            if (validatePropName(normalizedKey)) {\r\n                normalized[normalizedKey] = EMPTY_OBJ;\r\n            }\r\n        }\r\n    }\r\n    else if (raw) {\r\n        if (false) {}\r\n        for (const key in raw) {\r\n            const normalizedKey = shared_esm_bundler_camelize(key);\r\n            if (validatePropName(normalizedKey)) {\r\n                const opt = raw[key];\r\n                const prop = (normalized[normalizedKey] =\r\n                    shared_esm_bundler_isArray(opt) || shared_esm_bundler_isFunction(opt) ? { type: opt } : opt);\r\n                if (prop) {\r\n                    const booleanIndex = getTypeIndex(Boolean, prop.type);\r\n                    const stringIndex = getTypeIndex(String, prop.type);\r\n                    prop[0 /* shouldCast */] = booleanIndex > -1;\r\n                    prop[1 /* shouldCastTrue */] =\r\n                        stringIndex < 0 || booleanIndex < stringIndex;\r\n                    // if the prop needs boolean casting or default value\r\n                    if (booleanIndex > -1 || shared_esm_bundler_hasOwn(prop, \'default\')) {\r\n                        needCastKeys.push(normalizedKey);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const res = [normalized, needCastKeys];\r\n    cache.set(comp, res);\r\n    return res;\r\n}\r\nfunction validatePropName(key) {\r\n    if (key[0] !== \'$\') {\r\n        return true;\r\n    }\r\n    else if ((false)) {}\r\n    return false;\r\n}\r\n// use function string name to check type constructors\r\n// so that it works across vms / iframes.\r\nfunction getType(ctor) {\r\n    const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : ctor === null ? \'null\' : \'\';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (shared_esm_bundler_isArray(expectedTypes)) {\r\n        return expectedTypes.findIndex(t => isSameType(t, type));\r\n    }\r\n    else if (shared_esm_bundler_isFunction(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProps(rawProps, props, instance) {\r\n    const resolvedValues = toRaw(props);\r\n    const options = instance.propsOptions[0];\r\n    for (const key in options) {\r\n        let opt = options[key];\r\n        if (opt == null)\r\n            continue;\r\n        validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProp(name, value, prop, isAbsent) {\r\n    const { type, required, validator } = prop;\r\n    // required!\r\n    if (required && isAbsent) {\r\n        runtime_core_esm_bundler_warn(\'Missing required prop: "\' + name + \'"\');\r\n        return;\r\n    }\r\n    // missing but optional\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    // type check\r\n    if (type != null && type !== true) {\r\n        let isValid = false;\r\n        const types = isArray(type) ? type : [type];\r\n        const expectedTypes = [];\r\n        // value is valid as long as one of the specified types match\r\n        for (let i = 0; i < types.length && !isValid; i++) {\r\n            const { valid, expectedType } = assertType(value, types[i]);\r\n            expectedTypes.push(expectedType || \'\');\r\n            isValid = valid;\r\n        }\r\n        if (!isValid) {\r\n            runtime_core_esm_bundler_warn(getInvalidTypeMessage(name, value, expectedTypes));\r\n            return;\r\n        }\r\n    }\r\n    // custom validator\r\n    if (validator && !validator(value)) {\r\n        runtime_core_esm_bundler_warn(\'Invalid prop: custom validator check failed for prop "\' + name + \'".\');\r\n    }\r\n}\r\nconst isSimpleType = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(\'String,Number,Boolean,Function,Symbol,BigInt\')));\r\n/**\r\n * dev only\r\n */\r\nfunction assertType(value, type) {\r\n    let valid;\r\n    const expectedType = getType(type);\r\n    if (isSimpleType(expectedType)) {\r\n        const t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === \'object\') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === \'Object\') {\r\n        valid = isObject(value);\r\n    }\r\n    else if (expectedType === \'Array\') {\r\n        valid = isArray(value);\r\n    }\r\n    else if (expectedType === \'null\') {\r\n        valid = value === null;\r\n    }\r\n    else {\r\n        valid = value instanceof type;\r\n    }\r\n    return {\r\n        valid,\r\n        expectedType\r\n    };\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    let message = `Invalid prop: type check failed for prop "${name}".` +\r\n        ` Expected ${expectedTypes.map(capitalize).join(\' | \')}`;\r\n    const expectedType = expectedTypes[0];\r\n    const receivedType = toRawType(value);\r\n    const expectedValue = styleValue(value, expectedType);\r\n    const receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += ` with value ${expectedValue}`;\r\n    }\r\n    message += `, got ${receivedType} `;\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += `with value ${receivedValue}.`;\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction styleValue(value, type) {\r\n    if (type === \'String\') {\r\n        return `"${value}"`;\r\n    }\r\n    else if (type === \'Number\') {\r\n        return `${Number(value)}`;\r\n    }\r\n    else {\r\n        return `${value}`;\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isExplicable(type) {\r\n    const explicitTypes = [\'string\', \'number\', \'boolean\'];\r\n    return explicitTypes.some(elem => type.toLowerCase() === elem);\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isBoolean(...args) {\r\n    return args.some(elem => elem.toLowerCase() === \'boolean\');\r\n}\n\nconst isInternalKey = (key) => key[0] === \'_\' || key === \'$stable\';\r\nconst normalizeSlotValue = (value) => shared_esm_bundler_isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot, ctx) => {\r\n    const normalized = withCtx((...args) => {\r\n        if (false) {}\r\n        return normalizeSlotValue(rawSlot(...args));\r\n    }, ctx);\r\n    normalized._c = false;\r\n    return normalized;\r\n};\r\nconst normalizeObjectSlots = (rawSlots, slots, instance) => {\r\n    const ctx = rawSlots._ctx;\r\n    for (const key in rawSlots) {\r\n        if (isInternalKey(key))\r\n            continue;\r\n        const value = rawSlots[key];\r\n        if (shared_esm_bundler_isFunction(value)) {\r\n            slots[key] = normalizeSlot(key, value, ctx);\r\n        }\r\n        else if (value != null) {\r\n            if (false) {}\r\n            const normalized = normalizeSlotValue(value);\r\n            slots[key] = () => normalized;\r\n        }\r\n    }\r\n};\r\nconst normalizeVNodeSlots = (instance, children) => {\r\n    if (false) {}\r\n    const normalized = normalizeSlotValue(children);\r\n    instance.slots.default = () => normalized;\r\n};\r\nconst initSlots = (instance, children) => {\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // users can get the shallow readonly version of the slots object through `this.$slots`,\r\n            // we should avoid the proxy object polluting the slots of the internal instance\r\n            instance.slots = reactivity_esm_bundler_toRaw(children);\r\n            // make compiler marker non-enumerable\r\n            def(children, \'_\', type);\r\n        }\r\n        else {\r\n            normalizeObjectSlots(children, (instance.slots = {}));\r\n        }\r\n    }\r\n    else {\r\n        instance.slots = {};\r\n        if (children) {\r\n            normalizeVNodeSlots(instance, children);\r\n        }\r\n    }\r\n    def(instance.slots, InternalObjectKey, 1);\r\n};\r\nconst updateSlots = (instance, children, optimized) => {\r\n    const { vnode, slots } = instance;\r\n    let needDeletionCheck = true;\r\n    let deletionComparisonTarget = EMPTY_OBJ;\r\n    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // compiled slots.\r\n            if (false) {}\r\n            else if (optimized && type === 1 /* STABLE */) {\r\n                // compiled AND stable.\r\n                // no need to update, and skip stale slots removal.\r\n                needDeletionCheck = false;\r\n            }\r\n            else {\r\n                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip\r\n                // normalization.\r\n                shared_esm_bundler_extend(slots, children);\r\n                // #2893\r\n                // when rendering the optimized slots by manually written render function,\r\n                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,\r\n                // i.e. let the `renderSlot` create the bailed Fragment\r\n                if (!optimized && type === 1 /* STABLE */) {\r\n                    delete slots._;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            needDeletionCheck = !children.$stable;\r\n            normalizeObjectSlots(children, slots);\r\n        }\r\n        deletionComparisonTarget = children;\r\n    }\r\n    else if (children) {\r\n        // non slot object children (direct value) passed to a component\r\n        normalizeVNodeSlots(instance, children);\r\n        deletionComparisonTarget = { default: 1 };\r\n    }\r\n    // delete stale slots\r\n    if (needDeletionCheck) {\r\n        for (const key in slots) {\r\n            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {\r\n                delete slots[key];\r\n            }\r\n        }\r\n    }\r\n};\n\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent(\'comp\')\r\nconst foo = resolveDirective(\'foo\')\r\nconst bar = resolveDirective(\'bar\')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\r\nfunction validateDirectiveName(name) {\r\n    if (isBuiltInDirective(name)) {\r\n        runtime_core_esm_bundler_warn(\'Do not use built-in directive ids as custom directive id: \' + name);\r\n    }\r\n}\r\n/**\r\n * Adds directives to a VNode.\r\n */\r\nfunction withDirectives(vnode, directives) {\r\n    const internalInstance = currentRenderingInstance;\r\n    if (internalInstance === null) {\r\n        ( false) && 0;\r\n        return vnode;\r\n    }\r\n    const instance = internalInstance.proxy;\r\n    const bindings = vnode.dirs || (vnode.dirs = []);\r\n    for (let i = 0; i < directives.length; i++) {\r\n        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];\r\n        if (shared_esm_bundler_isFunction(dir)) {\r\n            dir = {\r\n                mounted: dir,\r\n                updated: dir\r\n            };\r\n        }\r\n        if (dir.deep) {\r\n            traverse(value);\r\n        }\r\n        bindings.push({\r\n            dir,\r\n            instance,\r\n            value,\r\n            oldValue: void 0,\r\n            arg,\r\n            modifiers\r\n        });\r\n    }\r\n    return vnode;\r\n}\r\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\r\n    const bindings = vnode.dirs;\r\n    const oldBindings = prevVNode && prevVNode.dirs;\r\n    for (let i = 0; i < bindings.length; i++) {\r\n        const binding = bindings[i];\r\n        if (oldBindings) {\r\n            binding.oldValue = oldBindings[i].value;\r\n        }\r\n        let hook = binding.dir[name];\r\n        if (hook) {\r\n            // disable tracking inside all lifecycle hooks\r\n            // since they can potentially be called inside effects.\r\n            pauseTracking();\r\n            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [\r\n                vnode.el,\r\n                binding,\r\n                vnode,\r\n                prevVNode\r\n            ]);\r\n            resetTracking();\r\n        }\r\n    }\r\n}\n\nfunction createAppContext() {\r\n    return {\r\n        app: null,\r\n        config: {\r\n            isNativeTag: shared_esm_bundler_NO,\r\n            performance: false,\r\n            globalProperties: {},\r\n            optionMergeStrategies: {},\r\n            errorHandler: undefined,\r\n            warnHandler: undefined,\r\n            compilerOptions: {}\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: Object.create(null),\r\n        optionsCache: new WeakMap(),\r\n        propsCache: new WeakMap(),\r\n        emitsCache: new WeakMap()\r\n    };\r\n}\r\nlet uid = 0;\r\nfunction createAppAPI(render, hydrate) {\r\n    return function createApp(rootComponent, rootProps = null) {\r\n        if (rootProps != null && !shared_esm_bundler_isObject(rootProps)) {\r\n            ( false) && 0;\r\n            rootProps = null;\r\n        }\r\n        const context = createAppContext();\r\n        const installedPlugins = new Set();\r\n        let isMounted = false;\r\n        const app = (context.app = {\r\n            _uid: uid++,\r\n            _component: rootComponent,\r\n            _props: rootProps,\r\n            _container: null,\r\n            _context: context,\r\n            _instance: null,\r\n            version,\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                if ((false)) {}\r\n            },\r\n            use(plugin, ...options) {\r\n                if (installedPlugins.has(plugin)) {\r\n                    ( false) && 0;\r\n                }\r\n                else if (plugin && shared_esm_bundler_isFunction(plugin.install)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin.install(app, ...options);\r\n                }\r\n                else if (shared_esm_bundler_isFunction(plugin)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin(app, ...options);\r\n                }\r\n                else if ((false)) {}\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                if (true) {\r\n                    if (!context.mixins.includes(mixin)) {\r\n                        context.mixins.push(mixin);\r\n                    }\r\n                    else if ((false)) {}\r\n                }\r\n                else {}\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                if ((false)) {}\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                if (false) {}\r\n                context.components[name] = component;\r\n                return app;\r\n            },\r\n            directive(name, directive) {\r\n                if ((false)) {}\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                if (false) {}\r\n                context.directives[name] = directive;\r\n                return app;\r\n            },\r\n            mount(rootContainer, isHydrate, isSVG) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    // HMR root reload\r\n                    if ((false)) {}\r\n                    if (isHydrate && hydrate) {\r\n                        hydrate(vnode, rootContainer);\r\n                    }\r\n                    else {\r\n                        render(vnode, rootContainer, isSVG);\r\n                    }\r\n                    isMounted = true;\r\n                    app._container = rootContainer;\r\n                    rootContainer.__vue_app__ = app;\r\n                    if (false) {}\r\n                    return getExposeProxy(vnode.component) || vnode.component.proxy;\r\n                }\r\n                else if ((false)) {}\r\n            },\r\n            unmount() {\r\n                if (isMounted) {\r\n                    render(null, app._container);\r\n                    if (false) {}\r\n                    delete app._container.__vue_app__;\r\n                }\r\n                else if ((false)) {}\r\n            },\r\n            provide(key, value) {\r\n                if (false) {}\r\n                // TypeScript doesn\'t allow symbols as index type\r\n                // https://github.com/Microsoft/TypeScript/issues/24587\r\n                context.provides[key] = value;\r\n                return app;\r\n            }\r\n        });\r\n        return app;\r\n    };\r\n}\n\n/**\r\n * Function for handling a template ref\r\n */\r\nfunction setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {\r\n    if (shared_esm_bundler_isArray(rawRef)) {\r\n        rawRef.forEach((r, i) => setRef(r, oldRawRef && (shared_esm_bundler_isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));\r\n        return;\r\n    }\r\n    if (isAsyncWrapper(vnode) && !isUnmount) {\r\n        // when mounting async components, nothing needs to be done,\r\n        // because the template ref is forwarded to inner component\r\n        return;\r\n    }\r\n    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */\r\n        ? getExposeProxy(vnode.component) || vnode.component.proxy\r\n        : vnode.el;\r\n    const value = isUnmount ? null : refValue;\r\n    const { i: owner, r: ref } = rawRef;\r\n    if (false) {}\r\n    const oldRef = oldRawRef && oldRawRef.r;\r\n    const refs = owner.refs === EMPTY_OBJ ? (owner.refs = {}) : owner.refs;\r\n    const setupState = owner.setupState;\r\n    // dynamic ref changed. unset old ref\r\n    if (oldRef != null && oldRef !== ref) {\r\n        if (shared_esm_bundler_isString(oldRef)) {\r\n            refs[oldRef] = null;\r\n            if (shared_esm_bundler_hasOwn(setupState, oldRef)) {\r\n                setupState[oldRef] = null;\r\n            }\r\n        }\r\n        else if (reactivity_esm_bundler_isRef(oldRef)) {\r\n            oldRef.value = null;\r\n        }\r\n    }\r\n    if (shared_esm_bundler_isFunction(ref)) {\r\n        callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */, [value, refs]);\r\n    }\r\n    else {\r\n        const _isString = shared_esm_bundler_isString(ref);\r\n        const _isRef = reactivity_esm_bundler_isRef(ref);\r\n        if (_isString || _isRef) {\r\n            const doSet = () => {\r\n                if (rawRef.f) {\r\n                    const existing = _isString ? refs[ref] : ref.value;\r\n                    if (isUnmount) {\r\n                        shared_esm_bundler_isArray(existing) && remove(existing, refValue);\r\n                    }\r\n                    else {\r\n                        if (!shared_esm_bundler_isArray(existing)) {\r\n                            if (_isString) {\r\n                                refs[ref] = [refValue];\r\n                            }\r\n                            else {\r\n                                ref.value = [refValue];\r\n                                if (rawRef.k)\r\n                                    refs[rawRef.k] = ref.value;\r\n                            }\r\n                        }\r\n                        else if (!existing.includes(refValue)) {\r\n                            existing.push(refValue);\r\n                        }\r\n                    }\r\n                }\r\n                else if (_isString) {\r\n                    refs[ref] = value;\r\n                    if (shared_esm_bundler_hasOwn(setupState, ref)) {\r\n                        setupState[ref] = value;\r\n                    }\r\n                }\r\n                else if (reactivity_esm_bundler_isRef(ref)) {\r\n                    ref.value = value;\r\n                    if (rawRef.k)\r\n                        refs[rawRef.k] = value;\r\n                }\r\n                else if ((false)) {}\r\n            };\r\n            if (value) {\r\n                doSet.id = -1;\r\n                queuePostRenderEffect(doSet, parentSuspense);\r\n            }\r\n            else {\r\n                doSet();\r\n            }\r\n        }\r\n        else if ((false)) {}\r\n    }\r\n}\n\nlet hasMismatch = false;\r\nconst isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== \'foreignObject\';\r\nconst isComment = (node) => node.nodeType === 8 /* COMMENT */;\r\n// Note: hydration is DOM-specific\r\n// But we have to place it in core due to tight coupling with core - splitting\r\n// it out creates a ton of unnecessary complexity.\r\n// Hydration also depends on some renderer internal logic which needs to be\r\n// passed in via arguments.\r\nfunction createHydrationFunctions(rendererInternals) {\r\n    const { mt: mountComponent, p: patch, o: { patchProp, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;\r\n    const hydrate = (vnode, container) => {\r\n        if (!container.hasChildNodes()) {\r\n            ( false) &&\r\n                0;\r\n            patch(null, vnode, container);\r\n            flushPostFlushCbs();\r\n            return;\r\n        }\r\n        hasMismatch = false;\r\n        hydrateNode(container.firstChild, vnode, null, null, null);\r\n        flushPostFlushCbs();\r\n        if (hasMismatch && !false) {\r\n            // this error should show up in production\r\n            console.error(`Hydration completed but contains mismatches.`);\r\n        }\r\n    };\r\n    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {\r\n        const isFragmentStart = isComment(node) && node.data === \'[\';\r\n        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);\r\n        const { type, ref, shapeFlag } = vnode;\r\n        const domType = node.nodeType;\r\n        vnode.el = node;\r\n        let nextNode = null;\r\n        switch (type) {\r\n            case runtime_core_esm_bundler_Text:\r\n                if (domType !== 3 /* TEXT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    if (node.data !== vnode.children) {\r\n                        hasMismatch = true;\r\n                        ( false) &&\r\n                            0;\r\n                        node.data = vnode.children;\r\n                    }\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case runtime_core_esm_bundler_Comment:\r\n                if (domType !== 8 /* COMMENT */ || isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Static:\r\n                if (domType !== 1 /* ELEMENT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    // determine anchor, adopt content\r\n                    nextNode = node;\r\n                    // if the static vnode has its content stripped during build,\r\n                    // adopt it from the server-rendered HTML.\r\n                    const needToAdoptContent = !vnode.children.length;\r\n                    for (let i = 0; i < vnode.staticCount; i++) {\r\n                        if (needToAdoptContent)\r\n                            vnode.children += nextNode.outerHTML;\r\n                        if (i === vnode.staticCount - 1) {\r\n                            vnode.anchor = nextNode;\r\n                        }\r\n                        nextNode = nextSibling(nextNode);\r\n                    }\r\n                    return nextNode;\r\n                }\r\n                break;\r\n            case runtime_core_esm_bundler_Fragment:\r\n                if (!isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                }\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    if (domType !== 1 /* ELEMENT */ ||\r\n                        vnode.type.toLowerCase() !==\r\n                            node.tagName.toLowerCase()) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    // when setting up the render effect, if the initial vnode already\r\n                    // has .el set, the component will perform hydration instead of mount\r\n                    // on its sub-tree.\r\n                    vnode.slotScopeIds = slotScopeIds;\r\n                    const container = parentNode(node);\r\n                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);\r\n                    // component may be async, so in the case of fragments we cannot rely\r\n                    // on component\'s rendered output to determine the end of the fragment\r\n                    // instead, we do a lookahead to find the end anchor node.\r\n                    nextNode = isFragmentStart\r\n                        ? locateClosingAsyncAnchor(node)\r\n                        : nextSibling(node);\r\n                    // #3787\r\n                    // if component is async, it may get moved / unmounted before its\r\n                    // inner component is loaded, so we need to give it a placeholder\r\n                    // vnode that matches its adopted DOM.\r\n                    if (isAsyncWrapper(vnode)) {\r\n                        let subTree;\r\n                        if (isFragmentStart) {\r\n                            subTree = createVNode(runtime_core_esm_bundler_Fragment);\r\n                            subTree.anchor = nextNode\r\n                                ? nextNode.previousSibling\r\n                                : container.lastChild;\r\n                        }\r\n                        else {\r\n                            subTree =\r\n                                node.nodeType === 3 ? createTextVNode(\'\') : createVNode(\'div\');\r\n                        }\r\n                        subTree.el = node;\r\n                        vnode.component.subTree = subTree;\r\n                    }\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    if (domType !== 8 /* COMMENT */) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);\r\n                }\r\n                else if ((false)) {}\r\n        }\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode);\r\n        }\r\n        return nextNode;\r\n    };\r\n    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!vnode.dynamicChildren;\r\n        const { type, props, patchFlag, shapeFlag, dirs } = vnode;\r\n        // #4006 for form elements with non-string v-model value bindings\r\n        // e.g. <option :value="obj">, <input type="checkbox" :true-value="1">\r\n        const forcePatchValue = (type === \'input\' && dirs) || type === \'option\';\r\n        // skip props & children if this is hoisted static nodes\r\n        // #5405 in dev, always hydrate children for HMR\r\n        if (( false) || forcePatchValue || patchFlag !== -1 /* HOISTED */) {\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, \'created\');\r\n            }\r\n            // props\r\n            if (props) {\r\n                if (forcePatchValue ||\r\n                    !optimized ||\r\n                    patchFlag & (16 /* FULL_PROPS */ | 32 /* HYDRATE_EVENTS */)) {\r\n                    for (const key in props) {\r\n                        if ((forcePatchValue && key.endsWith(\'value\')) ||\r\n                            (isOn(key) && !isReservedProp(key))) {\r\n                            patchProp(el, key, null, props[key], false, undefined, parentComponent);\r\n                        }\r\n                    }\r\n                }\r\n                else if (props.onClick) {\r\n                    // Fast path for click listeners (which is most often) to avoid\r\n                    // iterating through props.\r\n                    patchProp(el, \'onClick\', null, props.onClick, false, undefined, parentComponent);\r\n                }\r\n            }\r\n            // vnode / directive hooks\r\n            let vnodeHooks;\r\n            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {\r\n                invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, \'beforeMount\');\r\n            }\r\n            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {\r\n                queueEffectWithSuspense(() => {\r\n                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n                    dirs && invokeDirectiveHook(vnode, null, parentComponent, \'mounted\');\r\n                }, parentSuspense);\r\n            }\r\n            // children\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */ &&\r\n                // skip if element has innerHTML / textContent\r\n                !(props && (props.innerHTML || props.textContent))) {\r\n                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                let hasWarned = false;\r\n                while (next) {\r\n                    hasMismatch = true;\r\n                    if (false) {}\r\n                    // The SSRed DOM contains more nodes than it should. Remove them.\r\n                    const cur = next;\r\n                    next = next.nextSibling;\r\n                    remove(cur);\r\n                }\r\n            }\r\n            else if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                if (el.textContent !== vnode.children) {\r\n                    hasMismatch = true;\r\n                    ( false) &&\r\n                        0;\r\n                    el.textContent = vnode.children;\r\n                }\r\n            }\r\n        }\r\n        return el.nextSibling;\r\n    };\r\n    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!parentVNode.dynamicChildren;\r\n        const children = parentVNode.children;\r\n        const l = children.length;\r\n        let hasWarned = false;\r\n        for (let i = 0; i < l; i++) {\r\n            const vnode = optimized\r\n                ? children[i]\r\n                : (children[i] = normalizeVNode(children[i]));\r\n            if (node) {\r\n                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            else if (vnode.type === runtime_core_esm_bundler_Text && !vnode.children) {\r\n                continue;\r\n            }\r\n            else {\r\n                hasMismatch = true;\r\n                if (false) {}\r\n                // the SSRed DOM didn\'t contain enough nodes. Mount the missing ones.\r\n                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        const { slotScopeIds: fragmentSlotScopeIds } = vnode;\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        const container = parentNode(node);\r\n        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n        if (next && isComment(next) && next.data === \']\') {\r\n            return nextSibling((vnode.anchor = next));\r\n        }\r\n        else {\r\n            // fragment didn\'t hydrate successfully, since we didn\'t get a end anchor\r\n            // back. This should have led to node/children mismatch warnings.\r\n            hasMismatch = true;\r\n            // since the anchor is missing, we need to create one and insert it\r\n            insert((vnode.anchor = createComment(`]`)), container, next);\r\n            return next;\r\n        }\r\n    };\r\n    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {\r\n        hasMismatch = true;\r\n        ( false) &&\r\n            0;\r\n        vnode.el = null;\r\n        if (isFragment) {\r\n            // remove excessive fragment nodes\r\n            const end = locateClosingAsyncAnchor(node);\r\n            while (true) {\r\n                const next = nextSibling(node);\r\n                if (next && next !== end) {\r\n                    remove(next);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const next = nextSibling(node);\r\n        const container = parentNode(node);\r\n        remove(node);\r\n        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n        return next;\r\n    };\r\n    const locateClosingAsyncAnchor = (node) => {\r\n        let match = 0;\r\n        while (node) {\r\n            node = nextSibling(node);\r\n            if (node && isComment(node)) {\r\n                if (node.data === \'[\')\r\n                    match++;\r\n                if (node.data === \']\') {\r\n                    if (match === 0) {\r\n                        return nextSibling(node);\r\n                    }\r\n                    else {\r\n                        match--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    return [hydrate, hydrateNode];\r\n}\n\n/* eslint-disable no-restricted-globals */\r\nlet supported;\r\nlet perf;\r\nfunction startMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        perf.mark(`vue-${type}-${instance.uid}`);\r\n    }\r\n    if (false) {}\r\n}\r\nfunction endMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        const startTag = `vue-${type}-${instance.uid}`;\r\n        const endTag = startTag + `:end`;\r\n        perf.mark(endTag);\r\n        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\r\n        perf.clearMarks(startTag);\r\n        perf.clearMarks(endTag);\r\n    }\r\n    if (false) {}\r\n}\r\nfunction isSupported() {\r\n    if (supported !== undefined) {\r\n        return supported;\r\n    }\r\n    if (typeof window !== \'undefined\' && window.performance) {\r\n        supported = true;\r\n        perf = window.performance;\r\n    }\r\n    else {\r\n        supported = false;\r\n    }\r\n    return supported;\r\n}\n\n/**\r\n * This is only called in esm-bundler builds.\r\n * It is called when a renderer is created, in `baseCreateRenderer` so that\r\n * importing runtime-core is side-effects free.\r\n *\r\n * istanbul-ignore-next\r\n */\r\nfunction initFeatureFlags() {\r\n    const needWarn = [];\r\n    if (false) {}\r\n    if (false) {}\r\n    if (false) {}\r\n}\n\nconst queuePostRenderEffect = queueEffectWithSuspense\r\n    ;\r\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\r\nfunction createRenderer(options) {\r\n    return baseCreateRenderer(options);\r\n}\r\n// Separate API for creating hydration-enabled renderer.\r\n// Hydration logic is only used when calling this function, making it\r\n// tree-shakable.\r\nfunction createHydrationRenderer(options) {\r\n    return baseCreateRenderer(options, createHydrationFunctions);\r\n}\r\n// implementation\r\nfunction baseCreateRenderer(options, createHydrationFns) {\r\n    // compile-time feature flags check\r\n    {\r\n        initFeatureFlags();\r\n    }\r\n    const target = getGlobalThis();\r\n    target.__VUE__ = true;\r\n    if (false) {}\r\n    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = shared_esm_bundler_NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;\r\n    // Note: functions inside this closure should use `const xxx = () => {}`\r\n    // style in order to prevent being inlined by minifiers.\r\n    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized =  false ? 0 : !!n2.dynamicChildren) => {\r\n        if (n1 === n2) {\r\n            return;\r\n        }\r\n        // patching & not same type, unmount old tree\r\n        if (n1 && !isSameVNodeType(n1, n2)) {\r\n            anchor = getNextHostNode(n1);\r\n            unmount(n1, parentComponent, parentSuspense, true);\r\n            n1 = null;\r\n        }\r\n        if (n2.patchFlag === -2 /* BAIL */) {\r\n            optimized = false;\r\n            n2.dynamicChildren = null;\r\n        }\r\n        const { type, ref, shapeFlag } = n2;\r\n        switch (type) {\r\n            case runtime_core_esm_bundler_Text:\r\n                processText(n1, n2, container, anchor);\r\n                break;\r\n            case runtime_core_esm_bundler_Comment:\r\n                processCommentNode(n1, n2, container, anchor);\r\n                break;\r\n            case Static:\r\n                if (n1 == null) {\r\n                    mountStaticNode(n2, container, anchor, isSVG);\r\n                }\r\n                else if ((false)) {}\r\n                break;\r\n            case runtime_core_esm_bundler_Fragment:\r\n                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if ((false)) {}\r\n        }\r\n        // set ref\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);\r\n        }\r\n    };\r\n    const processText = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);\r\n        }\r\n        else {\r\n            const el = (n2.el = n1.el);\r\n            if (n2.children !== n1.children) {\r\n                hostSetText(el, n2.children);\r\n            }\r\n        }\r\n    };\r\n    const processCommentNode = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateComment(n2.children || \'\')), container, anchor);\r\n        }\r\n        else {\r\n            // there\'s no support for dynamic comments\r\n            n2.el = n1.el;\r\n        }\r\n    };\r\n    const mountStaticNode = (n2, container, anchor, isSVG) => {\r\n        [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG, n2.el, n2.anchor);\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const patchStaticNode = (n1, n2, container, isSVG) => {\r\n        // static nodes are only patched during dev for HMR\r\n        if (n2.children !== n1.children) {\r\n            const anchor = hostNextSibling(n1.anchor);\r\n            // remove existing\r\n            removeStaticNode(n1);\r\n            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n        }\r\n        else {\r\n            n2.el = n1.el;\r\n            n2.anchor = n1.anchor;\r\n        }\r\n    };\r\n    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostInsert(el, container, nextSibling);\r\n            el = next;\r\n        }\r\n        hostInsert(anchor, container, nextSibling);\r\n    };\r\n    const removeStaticNode = ({ el, anchor }) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostRemove(el);\r\n            el = next;\r\n        }\r\n        hostRemove(anchor);\r\n    };\r\n    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        isSVG = isSVG || n2.type === \'svg\';\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let el;\r\n        let vnodeHook;\r\n        const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;\r\n        if ( true &&\r\n            vnode.el &&\r\n            hostCloneNode !== undefined &&\r\n            patchFlag === -1 /* HOISTED */) {\r\n            // If a vnode has non-null el, it means it\'s being reused.\r\n            // Only static vnodes can be reused, so its mounted DOM nodes should be\r\n            // exactly the same, and we can simply do a clone here.\r\n            // only do this in production since cloned trees cannot be HMR updated.\r\n            el = vnode.el = hostCloneNode(vnode.el);\r\n        }\r\n        else {\r\n            el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);\r\n            // mount children first, since some props may rely on child content\r\n            // being already rendered, e.g. `<select value>`\r\n            if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                hostSetElementText(el, vnode.children);\r\n            }\r\n            else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== \'foreignObject\', slotScopeIds, optimized);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, \'created\');\r\n            }\r\n            // props\r\n            if (props) {\r\n                for (const key in props) {\r\n                    if (key !== \'value\' && !isReservedProp(key)) {\r\n                        hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n                /**\r\n                 * Special case for setting value on DOM elements:\r\n                 * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)\r\n                 * - it needs to be forced (#1471)\r\n                 * #2353 proposes adding another renderer option to configure this, but\r\n                 * the properties affects are so finite it is worth special casing it\r\n                 * here to reduce the complexity. (Special casing it also should not\r\n                 * affect non-DOM renderers)\r\n                 */\r\n                if (\'value\' in props) {\r\n                    hostPatchProp(el, \'value\', null, props.value);\r\n                }\r\n                if ((vnodeHook = props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                }\r\n            }\r\n            // scopeId\r\n            setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);\r\n        }\r\n        if (false) {}\r\n        if (dirs) {\r\n            invokeDirectiveHook(vnode, null, parentComponent, \'beforeMount\');\r\n        }\r\n        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved\r\n        // #1689 For inside suspense + suspense resolved case, just call it\r\n        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&\r\n            transition &&\r\n            !transition.persisted;\r\n        if (needCallTransitionHooks) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        hostInsert(el, container, anchor);\r\n        if ((vnodeHook = props && props.onVnodeMounted) ||\r\n            needCallTransitionHooks ||\r\n            dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                needCallTransitionHooks && transition.enter(el);\r\n                dirs && invokeDirectiveHook(vnode, null, parentComponent, \'mounted\');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {\r\n        if (scopeId) {\r\n            hostSetScopeId(el, scopeId);\r\n        }\r\n        if (slotScopeIds) {\r\n            for (let i = 0; i < slotScopeIds.length; i++) {\r\n                hostSetScopeId(el, slotScopeIds[i]);\r\n            }\r\n        }\r\n        if (parentComponent) {\r\n            let subTree = parentComponent.subTree;\r\n            if (false /* DEV_ROOT_FRAGMENT */) {}\r\n            if (vnode === subTree) {\r\n                const parentVNode = parentComponent.vnode;\r\n                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);\r\n            }\r\n        }\r\n    };\r\n    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            const child = (children[i] = optimized\r\n                ? cloneIfMounted(children[i])\r\n                : normalizeVNode(children[i]));\r\n            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const el = (n2.el = n1.el);\r\n        let { patchFlag, dynamicChildren, dirs } = n2;\r\n        // #1426 take the old vnode\'s patch flag into account since user may clone a\r\n        // compiler-generated vnode, which de-opts to FULL_PROPS\r\n        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */;\r\n        const oldProps = n1.props || EMPTY_OBJ;\r\n        const newProps = n2.props || EMPTY_OBJ;\r\n        let vnodeHook;\r\n        // disable recurse in beforeUpdate hooks\r\n        parentComponent && toggleRecurse(parentComponent, false);\r\n        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(n2, n1, parentComponent, \'beforeUpdate\');\r\n        }\r\n        parentComponent && toggleRecurse(parentComponent, true);\r\n        if (false) {}\r\n        const areChildrenSVG = isSVG && n2.type !== \'foreignObject\';\r\n        if (dynamicChildren) {\r\n            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);\r\n            if (false) {}\r\n        }\r\n        else if (!optimized) {\r\n            // full diff\r\n            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);\r\n        }\r\n        if (patchFlag > 0) {\r\n            // the presence of a patchFlag means this element\'s render code was\r\n            // generated by the compiler and can take the fast path.\r\n            // in this path old node and new node are guaranteed to have the same shape\r\n            // (i.e. at the exact same position in the source template)\r\n            if (patchFlag & 16 /* FULL_PROPS */) {\r\n                // element props contain dynamic keys, full diff needed\r\n                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else {\r\n                // class\r\n                // this flag is matched when the element has dynamic class bindings.\r\n                if (patchFlag & 2 /* CLASS */) {\r\n                    if (oldProps.class !== newProps.class) {\r\n                        hostPatchProp(el, \'class\', null, newProps.class, isSVG);\r\n                    }\r\n                }\r\n                // style\r\n                // this flag is matched when the element has dynamic style bindings\r\n                if (patchFlag & 4 /* STYLE */) {\r\n                    hostPatchProp(el, \'style\', oldProps.style, newProps.style, isSVG);\r\n                }\r\n                // props\r\n                // This flag is matched when the element has dynamic prop/attr bindings\r\n                // other than class and style. The keys of dynamic prop/attrs are saved for\r\n                // faster iteration.\r\n                // Note dynamic keys like :[foo]="bar" will cause this optimization to\r\n                // bail out and go through a full diff because we need to unset the old key\r\n                if (patchFlag & 8 /* PROPS */) {\r\n                    // if the flag is present then dynamicProps must be non-null\r\n                    const propsToUpdate = n2.dynamicProps;\r\n                    for (let i = 0; i < propsToUpdate.length; i++) {\r\n                        const key = propsToUpdate[i];\r\n                        const prev = oldProps[key];\r\n                        const next = newProps[key];\r\n                        // #1471 force patch value\r\n                        if (next !== prev || key === \'value\') {\r\n                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // text\r\n            // This flag is matched when the element has only dynamic text children.\r\n            if (patchFlag & 1 /* TEXT */) {\r\n                if (n1.children !== n2.children) {\r\n                    hostSetElementText(el, n2.children);\r\n                }\r\n            }\r\n        }\r\n        else if (!optimized && dynamicChildren == null) {\r\n            // unoptimized, full diff\r\n            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n                dirs && invokeDirectiveHook(n2, n1, parentComponent, \'updated\');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    // The fast path for blocks.\r\n    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {\r\n        for (let i = 0; i < newChildren.length; i++) {\r\n            const oldVNode = oldChildren[i];\r\n            const newVNode = newChildren[i];\r\n            // Determine the container (parent element) for the patch.\r\n            const container = \r\n            // oldVNode may be an errored async setup() component inside Suspense\r\n            // which will not have a mounted element\r\n            oldVNode.el &&\r\n                // - In the case of a Fragment, we need to provide the actual parent\r\n                // of the Fragment itself so it can move its children.\r\n                (oldVNode.type === runtime_core_esm_bundler_Fragment ||\r\n                    // - In the case of different nodes, there is going to be a replacement\r\n                    // which also requires the correct parent container\r\n                    !isSameVNodeType(oldVNode, newVNode) ||\r\n                    // - In the case of a component, it could contain anything.\r\n                    oldVNode.shapeFlag & (6 /* COMPONENT */ | 64 /* TELEPORT */))\r\n                ? hostParentNode(oldVNode.el)\r\n                : // In other cases, the parent container is not actually used so we\r\n                    // just pass the block element here to avoid a DOM parentNode call.\r\n                    fallbackContainer;\r\n            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);\r\n        }\r\n    };\r\n    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {\r\n        if (oldProps !== newProps) {\r\n            for (const key in newProps) {\r\n                // empty string is not valid prop\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                const next = newProps[key];\r\n                const prev = oldProps[key];\r\n                // defer patching value\r\n                if (next !== prev && key !== \'value\') {\r\n                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                }\r\n            }\r\n            if (oldProps !== EMPTY_OBJ) {\r\n                for (const key in oldProps) {\r\n                    if (!isReservedProp(key) && !(key in newProps)) {\r\n                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n            }\r\n            if (\'value\' in newProps) {\r\n                hostPatchProp(el, \'value\', oldProps.value, newProps.value);\r\n            }\r\n        }\r\n    };\r\n    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(\'\'));\r\n        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(\'\'));\r\n        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;\r\n        if (false) {}\r\n        // check if this is a slot fragment with :slotted scope ids\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        if (n1 == null) {\r\n            hostInsert(fragmentStartAnchor, container, anchor);\r\n            hostInsert(fragmentEndAnchor, container, anchor);\r\n            // a fragment can only have array children\r\n            // since they are either generated by the compiler, or implicitly created\r\n            // from arrays.\r\n            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            if (patchFlag > 0 &&\r\n                patchFlag & 64 /* STABLE_FRAGMENT */ &&\r\n                dynamicChildren &&\r\n                // #2715 the previous fragment could\'ve been a BAILed one as a result\r\n                // of renderSlot() with no valid children\r\n                n1.dynamicChildren) {\r\n                // a stable fragment (template root or <template v-for>) doesn\'t need to\r\n                // patch children order, but it may contain dynamicChildren.\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                if (false) {}\r\n                else if (\r\n                // #2080 if the stable fragment has a key, it\'s a <template v-for> that may\r\n                //  get moved around. Make sure all root level vnodes inherit el.\r\n                // #2134 or if it\'s a component root, it may also get moved around\r\n                // as the component is being moved.\r\n                n2.key != null ||\r\n                    (parentComponent && n2 === parentComponent.subTree)) {\r\n                    traverseStaticChildren(n1, n2, true /* shallow */);\r\n                }\r\n            }\r\n            else {\r\n                // keyed / unkeyed, or manual fragments.\r\n                // for keyed & unkeyed, since they are compiler generated from v-for,\r\n                // each child is guaranteed to be a block so the fragment will never\r\n                // have dynamicChildren.\r\n                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n        }\r\n    };\r\n    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        n2.slotScopeIds = slotScopeIds;\r\n        if (n1 == null) {\r\n            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\r\n            }\r\n            else {\r\n                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n        }\r\n        else {\r\n            updateComponent(n1, n2, optimized);\r\n        }\r\n    };\r\n    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));\r\n        if (false) {}\r\n        if ((false)) {}\r\n        // inject renderer internals for keepAlive\r\n        if (isKeepAlive(initialVNode)) {\r\n            instance.ctx.renderer = internals;\r\n        }\r\n        // resolve props and slots for setup context\r\n        {\r\n            if ((false)) {}\r\n            setupComponent(instance);\r\n            if ((false)) {}\r\n        }\r\n        // setup() is async. This component relies on async logic to be resolved\r\n        // before proceeding\r\n        if (instance.asyncDep) {\r\n            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);\r\n            // Give it a placeholder if this is not hydration\r\n            // TODO handle self-defined fallback\r\n            if (!initialVNode.el) {\r\n                const placeholder = (instance.subTree = createVNode(runtime_core_esm_bundler_Comment));\r\n                processCommentNode(null, placeholder, container, anchor);\r\n            }\r\n            return;\r\n        }\r\n        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);\r\n        if ((false)) {}\r\n    };\r\n    const updateComponent = (n1, n2, optimized) => {\r\n        const instance = (n2.component = n1.component);\r\n        if (shouldUpdateComponent(n1, n2, optimized)) {\r\n            if (instance.asyncDep &&\r\n                !instance.asyncResolved) {\r\n                // async & still pending - just update props and slots\r\n                // since the component\'s reactive effect for render isn\'t set-up yet\r\n                if ((false)) {}\r\n                updateComponentPreRender(instance, n2, optimized);\r\n                if ((false)) {}\r\n                return;\r\n            }\r\n            else {\r\n                // normal update\r\n                instance.next = n2;\r\n                // in case the child component is also queued, remove it to avoid\r\n                // double updating the same child component in the same flush.\r\n                invalidateJob(instance.update);\r\n                // instance.update is the reactive effect.\r\n                instance.update();\r\n            }\r\n        }\r\n        else {\r\n            // no update needed. just copy over properties\r\n            n2.component = n1.component;\r\n            n2.el = n1.el;\r\n            instance.vnode = n2;\r\n        }\r\n    };\r\n    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\r\n        const componentUpdateFn = () => {\r\n            if (!instance.isMounted) {\r\n                let vnodeHook;\r\n                const { el, props } = initialVNode;\r\n                const { bm, m, parent } = instance;\r\n                const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);\r\n                toggleRecurse(instance, false);\r\n                // beforeMount hook\r\n                if (bm) {\r\n                    invokeArrayFns(bm);\r\n                }\r\n                // onVnodeBeforeMount\r\n                if (!isAsyncWrapperVNode &&\r\n                    (vnodeHook = props && props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parent, initialVNode);\r\n                }\r\n                toggleRecurse(instance, true);\r\n                if (el && hydrateNode) {\r\n                    // vnode has adopted host node - perform hydration instead of mount.\r\n                    const hydrateSubTree = () => {\r\n                        if ((false)) {}\r\n                        instance.subTree = renderComponentRoot(instance);\r\n                        if ((false)) {}\r\n                        if ((false)) {}\r\n                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);\r\n                        if ((false)) {}\r\n                    };\r\n                    if (isAsyncWrapperVNode) {\r\n                        initialVNode.type.__asyncLoader().then(\r\n                        // note: we are moving the render call into an async callback,\r\n                        // which means it won\'t track dependencies - but it\'s ok because\r\n                        // a server-rendered async wrapper is already in resolved state\r\n                        // and it will never need to change.\r\n                        () => !instance.isUnmounted && hydrateSubTree());\r\n                    }\r\n                    else {\r\n                        hydrateSubTree();\r\n                    }\r\n                }\r\n                else {\r\n                    if ((false)) {}\r\n                    const subTree = (instance.subTree = renderComponentRoot(instance));\r\n                    if ((false)) {}\r\n                    if ((false)) {}\r\n                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\r\n                    if ((false)) {}\r\n                    initialVNode.el = subTree.el;\r\n                }\r\n                // mounted hook\r\n                if (m) {\r\n                    queuePostRenderEffect(m, parentSuspense);\r\n                }\r\n                // onVnodeMounted\r\n                if (!isAsyncWrapperVNode &&\r\n                    (vnodeHook = props && props.onVnodeMounted)) {\r\n                    const scopedInitialVNode = initialVNode;\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);\r\n                }\r\n                // activated hook for keep-alive roots.\r\n                // #1742 activated hook must be accessed after first render\r\n                // since the hook may be injected by a child keep-alive\r\n                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n                    instance.a && queuePostRenderEffect(instance.a, parentSuspense);\r\n                }\r\n                instance.isMounted = true;\r\n                if (false) {}\r\n                // #2458: deference mount-only object parameters to prevent memleaks\r\n                initialVNode = container = anchor = null;\r\n            }\r\n            else {\r\n                // updateComponent\r\n                // This is triggered by mutation of component\'s own state (next: null)\r\n                // OR parent calling processComponent (next: VNode)\r\n                let { next, bu, u, parent, vnode } = instance;\r\n                let originNext = next;\r\n                let vnodeHook;\r\n                if ((false)) {}\r\n                // Disallow component effect recursion during pre-lifecycle hooks.\r\n                toggleRecurse(instance, false);\r\n                if (next) {\r\n                    next.el = vnode.el;\r\n                    updateComponentPreRender(instance, next, optimized);\r\n                }\r\n                else {\r\n                    next = vnode;\r\n                }\r\n                // beforeUpdate hook\r\n                if (bu) {\r\n                    invokeArrayFns(bu);\r\n                }\r\n                // onVnodeBeforeUpdate\r\n                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {\r\n                    invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                }\r\n                toggleRecurse(instance, true);\r\n                // render\r\n                if ((false)) {}\r\n                const nextTree = renderComponentRoot(instance);\r\n                if ((false)) {}\r\n                const prevTree = instance.subTree;\r\n                instance.subTree = nextTree;\r\n                if ((false)) {}\r\n                patch(prevTree, nextTree, \r\n                // parent may have changed if it\'s in a teleport\r\n                hostParentNode(prevTree.el), \r\n                // anchor may have changed if it\'s in a fragment\r\n                getNextHostNode(prevTree), instance, parentSuspense, isSVG);\r\n                if ((false)) {}\r\n                next.el = nextTree.el;\r\n                if (originNext === null) {\r\n                    // self-triggered update. In case of HOC, update parent component\r\n                    // vnode el. HOC is indicated by parent instance\'s subTree pointing\r\n                    // to child component\'s vnode\r\n                    updateHOCHostEl(instance, nextTree.el);\r\n                }\r\n                // updated hook\r\n                if (u) {\r\n                    queuePostRenderEffect(u, parentSuspense);\r\n                }\r\n                // onVnodeUpdated\r\n                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);\r\n                }\r\n                if (false) {}\r\n                if ((false)) {}\r\n            }\r\n        };\r\n        // create reactive effect for rendering\r\n        const effect = (instance.effect = new ReactiveEffect(componentUpdateFn, () => queueJob(instance.update), instance.scope // track it in component\'s effect scope\r\n        ));\r\n        const update = (instance.update = effect.run.bind(effect));\r\n        update.id = instance.uid;\r\n        // allowRecurse\r\n        // #1801, #2043 component render effects should allow recursive updates\r\n        toggleRecurse(instance, true);\r\n        if ((false)) {}\r\n        update();\r\n    };\r\n    const updateComponentPreRender = (instance, nextVNode, optimized) => {\r\n        nextVNode.component = instance;\r\n        const prevProps = instance.vnode.props;\r\n        instance.vnode = nextVNode;\r\n        instance.next = null;\r\n        updateProps(instance, nextVNode.props, prevProps, optimized);\r\n        updateSlots(instance, nextVNode.children, optimized);\r\n        pauseTracking();\r\n        // props update may have triggered pre-flush watchers.\r\n        // flush them before the render update.\r\n        flushPreFlushCbs(undefined, instance.update);\r\n        resetTracking();\r\n    };\r\n    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {\r\n        const c1 = n1 && n1.children;\r\n        const prevShapeFlag = n1 ? n1.shapeFlag : 0;\r\n        const c2 = n2.children;\r\n        const { patchFlag, shapeFlag } = n2;\r\n        // fast path\r\n        if (patchFlag > 0) {\r\n            if (patchFlag & 128 /* KEYED_FRAGMENT */) {\r\n                // this could be either fully-keyed or mixed (some keyed some not)\r\n                // presence of patchFlag means children are guaranteed to be arrays\r\n                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n            else if (patchFlag & 256 /* UNKEYED_FRAGMENT */) {\r\n                // unkeyed\r\n                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n        }\r\n        // children has 3 possibilities: text, array or no children.\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            // text children fast path\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                unmountChildren(c1, parentComponent, parentSuspense);\r\n            }\r\n            if (c2 !== c1) {\r\n                hostSetElementText(container, c2);\r\n            }\r\n        }\r\n        else {\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                // prev children was array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    // two arrays, cannot assume anything, do full diff\r\n                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else {\r\n                    // no new children, just unmount old\r\n                    unmountChildren(c1, parentComponent, parentSuspense, true);\r\n                }\r\n            }\r\n            else {\r\n                // prev children was text OR null\r\n                // new children is array OR null\r\n                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(container, \'\');\r\n                }\r\n                // mount new if array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        c1 = c1 || EMPTY_ARR;\r\n        c2 = c2 || EMPTY_ARR;\r\n        const oldLength = c1.length;\r\n        const newLength = c2.length;\r\n        const commonLength = Math.min(oldLength, newLength);\r\n        let i;\r\n        for (i = 0; i < commonLength; i++) {\r\n            const nextChild = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        if (oldLength > newLength) {\r\n            // remove old\r\n            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);\r\n        }\r\n        else {\r\n            // mount new\r\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);\r\n        }\r\n    };\r\n    // can be all-keyed or mixed\r\n    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let i = 0;\r\n        const l2 = c2.length;\r\n        let e1 = c1.length - 1; // prev ending index\r\n        let e2 = l2 - 1; // next ending index\r\n        // 1. sync from start\r\n        // (a b) c\r\n        // (a b) d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // 2. sync from end\r\n        // a (b c)\r\n        // d e (b c)\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = (c2[e2] = optimized\r\n                ? cloneIfMounted(c2[e2])\r\n                : normalizeVNode(c2[e2]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 3. common sequence + mount\r\n        // (a b)\r\n        // (a b) c\r\n        // i = 2, e1 = 1, e2 = 2\r\n        // (a b)\r\n        // c (a b)\r\n        // i = 0, e1 = -1, e2 = 0\r\n        if (i > e1) {\r\n            if (i <= e2) {\r\n                const nextPos = e2 + 1;\r\n                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\r\n                while (i <= e2) {\r\n                    patch(null, (c2[i] = optimized\r\n                        ? cloneIfMounted(c2[i])\r\n                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // 4. common sequence + unmount\r\n        // (a b) c\r\n        // (a b)\r\n        // i = 2, e1 = 2, e2 = 1\r\n        // a (b c)\r\n        // (b c)\r\n        // i = 0, e1 = 0, e2 = -1\r\n        else if (i > e2) {\r\n            while (i <= e1) {\r\n                unmount(c1[i], parentComponent, parentSuspense, true);\r\n                i++;\r\n            }\r\n        }\r\n        // 5. unknown sequence\r\n        // [i ... e1 + 1]: a b [c d e] f g\r\n        // [i ... e2 + 1]: a b [e d c h] f g\r\n        // i = 2, e1 = 4, e2 = 5\r\n        else {\r\n            const s1 = i; // prev starting index\r\n            const s2 = i; // next starting index\r\n            // 5.1 build key:index map for newChildren\r\n            const keyToNewIndexMap = new Map();\r\n            for (i = s2; i <= e2; i++) {\r\n                const nextChild = (c2[i] = optimized\r\n                    ? cloneIfMounted(c2[i])\r\n                    : normalizeVNode(c2[i]));\r\n                if (nextChild.key != null) {\r\n                    if (false) {}\r\n                    keyToNewIndexMap.set(nextChild.key, i);\r\n                }\r\n            }\r\n            // 5.2 loop through old children left to be patched and try to patch\r\n            // matching nodes & remove nodes that are no longer present\r\n            let j;\r\n            let patched = 0;\r\n            const toBePatched = e2 - s2 + 1;\r\n            let moved = false;\r\n            // used to track whether any node has moved\r\n            let maxNewIndexSoFar = 0;\r\n            // works as Map<newIndex, oldIndex>\r\n            // Note that oldIndex is offset by +1\r\n            // and oldIndex = 0 is a special value indicating the new node has\r\n            // no corresponding old node.\r\n            // used for determining longest stable subsequence\r\n            const newIndexToOldIndexMap = new Array(toBePatched);\r\n            for (i = 0; i < toBePatched; i++)\r\n                newIndexToOldIndexMap[i] = 0;\r\n            for (i = s1; i <= e1; i++) {\r\n                const prevChild = c1[i];\r\n                if (patched >= toBePatched) {\r\n                    // all new children have been patched so this can only be a removal\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                    continue;\r\n                }\r\n                let newIndex;\r\n                if (prevChild.key != null) {\r\n                    newIndex = keyToNewIndexMap.get(prevChild.key);\r\n                }\r\n                else {\r\n                    // key-less node, try to locate a key-less node of the same type\r\n                    for (j = s2; j <= e2; j++) {\r\n                        if (newIndexToOldIndexMap[j - s2] === 0 &&\r\n                            isSameVNodeType(prevChild, c2[j])) {\r\n                            newIndex = j;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (newIndex === undefined) {\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                }\r\n                else {\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1;\r\n                    if (newIndex >= maxNewIndexSoFar) {\r\n                        maxNewIndexSoFar = newIndex;\r\n                    }\r\n                    else {\r\n                        moved = true;\r\n                    }\r\n                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    patched++;\r\n                }\r\n            }\r\n            // 5.3 move and mount\r\n            // generate longest stable subsequence only when nodes have moved\r\n            const increasingNewIndexSequence = moved\r\n                ? getSequence(newIndexToOldIndexMap)\r\n                : EMPTY_ARR;\r\n            j = increasingNewIndexSequence.length - 1;\r\n            // looping backwards so that we can use last patched node as anchor\r\n            for (i = toBePatched - 1; i >= 0; i--) {\r\n                const nextIndex = s2 + i;\r\n                const nextChild = c2[nextIndex];\r\n                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\r\n                if (newIndexToOldIndexMap[i] === 0) {\r\n                    // mount new\r\n                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (moved) {\r\n                    // move if:\r\n                    // There is no stable subsequence (e.g. a reverse)\r\n                    // OR current node is not among the stable sequence\r\n                    if (j < 0 || i !== increasingNewIndexSequence[j]) {\r\n                        move(nextChild, container, anchor, 2 /* REORDER */);\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\r\n        const { el, type, transition, children, shapeFlag } = vnode;\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            move(vnode.component.subTree, container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 128 /* SUSPENSE */) {\r\n            vnode.suspense.move(container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type.move(vnode, container, anchor, internals);\r\n            return;\r\n        }\r\n        if (type === runtime_core_esm_bundler_Fragment) {\r\n            hostInsert(el, container, anchor);\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, anchor, moveType);\r\n            }\r\n            hostInsert(vnode.anchor, container, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            moveStaticNode(vnode, container, anchor);\r\n            return;\r\n        }\r\n        // single nodes\r\n        const needTransition = moveType !== 2 /* REORDER */ &&\r\n            shapeFlag & 1 /* ELEMENT */ &&\r\n            transition;\r\n        if (needTransition) {\r\n            if (moveType === 0 /* ENTER */) {\r\n                transition.beforeEnter(el);\r\n                hostInsert(el, container, anchor);\r\n                queuePostRenderEffect(() => transition.enter(el), parentSuspense);\r\n            }\r\n            else {\r\n                const { leave, delayLeave, afterLeave } = transition;\r\n                const remove = () => hostInsert(el, container, anchor);\r\n                const performLeave = () => {\r\n                    leave(el, () => {\r\n                        remove();\r\n                        afterLeave && afterLeave();\r\n                    });\r\n                };\r\n                if (delayLeave) {\r\n                    delayLeave(el, remove, performLeave);\r\n                }\r\n                else {\r\n                    performLeave();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            hostInsert(el, container, anchor);\r\n        }\r\n    };\r\n    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {\r\n        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;\r\n        // unset ref\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode, true);\r\n        }\r\n        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n            parentComponent.ctx.deactivate(vnode);\r\n            return;\r\n        }\r\n        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */ && dirs;\r\n        const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);\r\n        let vnodeHook;\r\n        if (shouldInvokeVnodeHook &&\r\n            (vnodeHook = props && props.onVnodeBeforeUnmount)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n        }\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            unmountComponent(vnode.component, parentSuspense, doRemove);\r\n        }\r\n        else {\r\n            if (shapeFlag & 128 /* SUSPENSE */) {\r\n                vnode.suspense.unmount(parentSuspense, doRemove);\r\n                return;\r\n            }\r\n            if (shouldInvokeDirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, \'beforeUnmount\');\r\n            }\r\n            if (shapeFlag & 64 /* TELEPORT */) {\r\n                vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);\r\n            }\r\n            else if (dynamicChildren &&\r\n                // #1153: fast path should not be taken for non-stable (v-for) fragments\r\n                (type !== runtime_core_esm_bundler_Fragment ||\r\n                    (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */))) {\r\n                // fast path for block nodes: only need to unmount dynamic children.\r\n                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);\r\n            }\r\n            else if ((type === runtime_core_esm_bundler_Fragment &&\r\n                patchFlag &\r\n                    (128 /* KEYED_FRAGMENT */ | 256 /* UNKEYED_FRAGMENT */)) ||\r\n                (!optimized && shapeFlag & 16 /* ARRAY_CHILDREN */)) {\r\n                unmountChildren(children, parentComponent, parentSuspense);\r\n            }\r\n            if (doRemove) {\r\n                remove(vnode);\r\n            }\r\n        }\r\n        if ((shouldInvokeVnodeHook &&\r\n            (vnodeHook = props && props.onVnodeUnmounted)) ||\r\n            shouldInvokeDirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                shouldInvokeDirs &&\r\n                    invokeDirectiveHook(vnode, null, parentComponent, \'unmounted\');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const remove = vnode => {\r\n        const { type, el, anchor, transition } = vnode;\r\n        if (type === runtime_core_esm_bundler_Fragment) {\r\n            removeFragment(el, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            removeStaticNode(vnode);\r\n            return;\r\n        }\r\n        const performRemove = () => {\r\n            hostRemove(el);\r\n            if (transition && !transition.persisted && transition.afterLeave) {\r\n                transition.afterLeave();\r\n            }\r\n        };\r\n        if (vnode.shapeFlag & 1 /* ELEMENT */ &&\r\n            transition &&\r\n            !transition.persisted) {\r\n            const { leave, delayLeave } = transition;\r\n            const performLeave = () => leave(el, performRemove);\r\n            if (delayLeave) {\r\n                delayLeave(vnode.el, performRemove, performLeave);\r\n            }\r\n            else {\r\n                performLeave();\r\n            }\r\n        }\r\n        else {\r\n            performRemove();\r\n        }\r\n    };\r\n    const removeFragment = (cur, end) => {\r\n        // For fragments, directly remove all contained DOM nodes.\r\n        // (fragment child nodes cannot have transition)\r\n        let next;\r\n        while (cur !== end) {\r\n            next = hostNextSibling(cur);\r\n            hostRemove(cur);\r\n            cur = next;\r\n        }\r\n        hostRemove(end);\r\n    };\r\n    const unmountComponent = (instance, parentSuspense, doRemove) => {\r\n        if (false) {}\r\n        const { bum, scope, update, subTree, um } = instance;\r\n        // beforeUnmount hook\r\n        if (bum) {\r\n            invokeArrayFns(bum);\r\n        }\r\n        // stop effects in component scope\r\n        scope.stop();\r\n        // update may be null if a component is unmounted before its async\r\n        // setup has resolved.\r\n        if (update) {\r\n            // so that scheduler will no longer invoke it\r\n            update.active = false;\r\n            unmount(subTree, instance, parentSuspense, doRemove);\r\n        }\r\n        // unmounted hook\r\n        if (um) {\r\n            queuePostRenderEffect(um, parentSuspense);\r\n        }\r\n        queuePostRenderEffect(() => {\r\n            instance.isUnmounted = true;\r\n        }, parentSuspense);\r\n        // A component with async dep inside a pending suspense is unmounted before\r\n        // its async dep resolves. This should remove the dep from the suspense, and\r\n        // cause the suspense to resolve immediately if that was the last dep.\r\n        if (parentSuspense &&\r\n            parentSuspense.pendingBranch &&\r\n            !parentSuspense.isUnmounted &&\r\n            instance.asyncDep &&\r\n            !instance.asyncResolved &&\r\n            instance.suspenseId === parentSuspense.pendingId) {\r\n            parentSuspense.deps--;\r\n            if (parentSuspense.deps === 0) {\r\n                parentSuspense.resolve();\r\n            }\r\n        }\r\n        if (false) {}\r\n    };\r\n    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);\r\n        }\r\n    };\r\n    const getNextHostNode = vnode => {\r\n        if (vnode.shapeFlag & 6 /* COMPONENT */) {\r\n            return getNextHostNode(vnode.component.subTree);\r\n        }\r\n        if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n            return vnode.suspense.next();\r\n        }\r\n        return hostNextSibling((vnode.anchor || vnode.el));\r\n    };\r\n    const render = (vnode, container, isSVG) => {\r\n        if (vnode == null) {\r\n            if (container._vnode) {\r\n                unmount(container._vnode, null, null, true);\r\n            }\r\n        }\r\n        else {\r\n            patch(container._vnode || null, vnode, container, null, null, null, isSVG);\r\n        }\r\n        flushPostFlushCbs();\r\n        container._vnode = vnode;\r\n    };\r\n    const internals = {\r\n        p: patch,\r\n        um: unmount,\r\n        m: move,\r\n        r: remove,\r\n        mt: mountComponent,\r\n        mc: mountChildren,\r\n        pc: patchChildren,\r\n        pbc: patchBlockChildren,\r\n        n: getNextHostNode,\r\n        o: options\r\n    };\r\n    let hydrate;\r\n    let hydrateNode;\r\n    if (createHydrationFns) {\r\n        [hydrate, hydrateNode] = createHydrationFns(internals);\r\n    }\r\n    return {\r\n        render,\r\n        hydrate,\r\n        createApp: createAppAPI(render, hydrate)\r\n    };\r\n}\r\nfunction toggleRecurse({ effect, update }, allowed) {\r\n    effect.allowRecurse = update.allowRecurse = allowed;\r\n}\r\n/**\r\n * #1156\r\n * When a component is HMR-enabled, we need to make sure that all static nodes\r\n * inside a block also inherit the DOM element from the previous tree so that\r\n * HMR updates (which are full updates) can retrieve the element for patching.\r\n *\r\n * #2080\r\n * Inside keyed `template` fragment static children, if a fragment is moved,\r\n * the children will always be moved. Therefore, in order to ensure correct move\r\n * position, el should be inherited from previous nodes.\r\n */\r\nfunction traverseStaticChildren(n1, n2, shallow = false) {\r\n    const ch1 = n1.children;\r\n    const ch2 = n2.children;\r\n    if (shared_esm_bundler_isArray(ch1) && shared_esm_bundler_isArray(ch2)) {\r\n        for (let i = 0; i < ch1.length; i++) {\r\n            // this is only called in the optimized path so array children are\r\n            // guaranteed to be vnodes\r\n            const c1 = ch1[i];\r\n            let c2 = ch2[i];\r\n            if (c2.shapeFlag & 1 /* ELEMENT */ && !c2.dynamicChildren) {\r\n                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */) {\r\n                    c2 = ch2[i] = cloneIfMounted(ch2[i]);\r\n                    c2.el = c1.el;\r\n                }\r\n                if (!shallow)\r\n                    traverseStaticChildren(c1, c2);\r\n            }\r\n            // also inherit for comment nodes, but not placeholders (e.g. v-if which\r\n            // would have received .el during block patch)\r\n            if (false) {}\r\n        }\r\n    }\r\n}\r\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction getSequence(arr) {\r\n    const p = arr.slice();\r\n    const result = [0];\r\n    let i, j, u, v, c;\r\n    const len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        const arrI = arr[i];\r\n        if (arrI !== 0) {\r\n            j = result[result.length - 1];\r\n            if (arr[j] < arrI) {\r\n                p[i] = j;\r\n                result.push(i);\r\n                continue;\r\n            }\r\n            u = 0;\r\n            v = result.length - 1;\r\n            while (u < v) {\r\n                c = (u + v) >> 1;\r\n                if (arr[result[c]] < arrI) {\r\n                    u = c + 1;\r\n                }\r\n                else {\r\n                    v = c;\r\n                }\r\n            }\r\n            if (arrI < arr[result[u]]) {\r\n                if (u > 0) {\r\n                    p[i] = result[u - 1];\r\n                }\r\n                result[u] = i;\r\n            }\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\n\nconst isTeleport = (type) => type.__isTeleport;\r\nconst isTeleportDisabled = (props) => props && (props.disabled || props.disabled === \'\');\r\nconst isTargetSVG = (target) => typeof SVGElement !== \'undefined\' && target instanceof SVGElement;\r\nconst resolveTarget = (props, select) => {\r\n    const targetSelector = props && props.to;\r\n    if (shared_esm_bundler_isString(targetSelector)) {\r\n        if (!select) {\r\n            ( false) &&\r\n                0;\r\n            return null;\r\n        }\r\n        else {\r\n            const target = select(targetSelector);\r\n            if (!target) {\r\n                ( false) &&\r\n                    0;\r\n            }\r\n            return target;\r\n        }\r\n    }\r\n    else {\r\n        if (false) {}\r\n        return targetSelector;\r\n    }\r\n};\r\nconst TeleportImpl = {\r\n    __isTeleport: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {\r\n        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;\r\n        const disabled = isTeleportDisabled(n2.props);\r\n        let { shapeFlag, children, dynamicChildren } = n2;\r\n        // #3302\r\n        // HMR updated, force full diff\r\n        if (false) {}\r\n        if (n1 == null) {\r\n            // insert anchors in the main view\r\n            const placeholder = (n2.el = ( false)\r\n                ? 0\r\n                : createText(\'\'));\r\n            const mainAnchor = (n2.anchor = ( false)\r\n                ? 0\r\n                : createText(\'\'));\r\n            insert(placeholder, container, anchor);\r\n            insert(mainAnchor, container, anchor);\r\n            const target = (n2.target = resolveTarget(n2.props, querySelector));\r\n            const targetAnchor = (n2.targetAnchor = createText(\'\'));\r\n            if (target) {\r\n                insert(targetAnchor, target);\r\n                // #2652 we could be teleporting from a non-SVG tree into an SVG tree\r\n                isSVG = isSVG || isTargetSVG(target);\r\n            }\r\n            else if (false) {}\r\n            const mount = (container, anchor) => {\r\n                // Teleport *always* has Array children. This is enforced in both the\r\n                // compiler and vnode children normalization.\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            };\r\n            if (disabled) {\r\n                mount(container, mainAnchor);\r\n            }\r\n            else if (target) {\r\n                mount(target, targetAnchor);\r\n            }\r\n        }\r\n        else {\r\n            // update content\r\n            n2.el = n1.el;\r\n            const mainAnchor = (n2.anchor = n1.anchor);\r\n            const target = (n2.target = n1.target);\r\n            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);\r\n            const wasDisabled = isTeleportDisabled(n1.props);\r\n            const currentContainer = wasDisabled ? container : target;\r\n            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\r\n            isSVG = isSVG || isTargetSVG(target);\r\n            if (dynamicChildren) {\r\n                // fast path when the teleport happens to be a block root\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                // even in block tree mode we need to make sure all root-level nodes\r\n                // in the teleport inherit previous DOM references so that they can\r\n                // be moved in future patches.\r\n                traverseStaticChildren(n1, n2, true);\r\n            }\r\n            else if (!optimized) {\r\n                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);\r\n            }\r\n            if (disabled) {\r\n                if (!wasDisabled) {\r\n                    // enabled -> disabled\r\n                    // move into main container\r\n                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n            else {\r\n                // target changed\r\n                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\r\n                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));\r\n                    if (nextTarget) {\r\n                        moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */);\r\n                    }\r\n                    else if ((false)) {}\r\n                }\r\n                else if (wasDisabled) {\r\n                    // disabled -> enabled\r\n                    // move into teleport target\r\n                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {\r\n        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;\r\n        if (target) {\r\n            hostRemove(targetAnchor);\r\n        }\r\n        // an unmounted teleport should always remove its children if not disabled\r\n        if (doRemove || !isTeleportDisabled(props)) {\r\n            hostRemove(anchor);\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                for (let i = 0; i < children.length; i++) {\r\n                    const child = children[i];\r\n                    unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    move: moveTeleport,\r\n    hydrate: hydrateTeleport\r\n};\r\nfunction moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* REORDER */) {\r\n    // move target anchor if this is a target change.\r\n    if (moveType === 0 /* TARGET_CHANGE */) {\r\n        insert(vnode.targetAnchor, container, parentAnchor);\r\n    }\r\n    const { el, anchor, shapeFlag, children, props } = vnode;\r\n    const isReorder = moveType === 2 /* REORDER */;\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(el, container, parentAnchor);\r\n    }\r\n    // if this is a re-order and teleport is enabled (content is in target)\r\n    // do not move children. So the opposite is: only move children if this\r\n    // is not a reorder, or the teleport is disabled\r\n    if (!isReorder || isTeleportDisabled(props)) {\r\n        // Teleport has either Array children or no children.\r\n        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, parentAnchor, 2 /* REORDER */);\r\n            }\r\n        }\r\n    }\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(anchor, container, parentAnchor);\r\n    }\r\n}\r\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {\r\n    const target = (vnode.target = resolveTarget(vnode.props, querySelector));\r\n    if (target) {\r\n        // if multiple teleports rendered to the same target element, we need to\r\n        // pick up from where the last teleport finished instead of the first node\r\n        const targetNode = target._lpa || target.firstChild;\r\n        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            if (isTeleportDisabled(vnode.props)) {\r\n                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                vnode.targetAnchor = targetNode;\r\n            }\r\n            else {\r\n                vnode.anchor = nextSibling(node);\r\n                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            target._lpa =\r\n                vnode.targetAnchor && nextSibling(vnode.targetAnchor);\r\n        }\r\n    }\r\n    return vnode.anchor && nextSibling(vnode.anchor);\r\n}\r\n// Force-casted public typing for h and TSX props inference\r\nconst Teleport = TeleportImpl;\n\nconst COMPONENTS = \'components\';\r\nconst DIRECTIVES = \'directives\';\r\n/**\r\n * @private\r\n */\r\nfunction resolveComponent(name, maybeSelfReference) {\r\n    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;\r\n}\r\nconst NULL_DYNAMIC_COMPONENT = Symbol();\r\n/**\r\n * @private\r\n */\r\nfunction resolveDynamicComponent(component) {\r\n    if (shared_esm_bundler_isString(component)) {\r\n        return resolveAsset(COMPONENTS, component, false) || component;\r\n    }\r\n    else {\r\n        // invalid types will fallthrough to createVNode and raise warning\r\n        return (component || NULL_DYNAMIC_COMPONENT);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction resolveDirective(name) {\r\n    return resolveAsset(DIRECTIVES, name);\r\n}\r\n// implementation\r\nfunction resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {\r\n    const instance = currentRenderingInstance || currentInstance;\r\n    if (instance) {\r\n        const Component = instance.type;\r\n        // explicit self name has highest priority\r\n        if (type === COMPONENTS) {\r\n            const selfName = getComponentName(Component);\r\n            if (selfName &&\r\n                (selfName === name ||\r\n                    selfName === shared_esm_bundler_camelize(name) ||\r\n                    selfName === shared_esm_bundler_capitalize(shared_esm_bundler_camelize(name)))) {\r\n                return Component;\r\n            }\r\n        }\r\n        const res = \r\n        // local registration\r\n        // check instance[type] first which is resolved for options API\r\n        resolve(instance[type] || Component[type], name) ||\r\n            // global registration\r\n            resolve(instance.appContext[type], name);\r\n        if (!res && maybeSelfReference) {\r\n            // fallback to implicit self-reference\r\n            return Component;\r\n        }\r\n        if (false) {}\r\n        return res;\r\n    }\r\n    else if ((false)) {}\r\n}\r\nfunction resolve(registry, name) {\r\n    return (registry &&\r\n        (registry[name] ||\r\n            registry[shared_esm_bundler_camelize(name)] ||\r\n            registry[shared_esm_bundler_capitalize(shared_esm_bundler_camelize(name))]));\r\n}\n\nconst runtime_core_esm_bundler_Fragment = Symbol(( false) ? 0 : undefined);\r\nconst runtime_core_esm_bundler_Text = Symbol(( false) ? 0 : undefined);\r\nconst runtime_core_esm_bundler_Comment = Symbol(( false) ? 0 : undefined);\r\nconst Static = Symbol(( false) ? 0 : undefined);\r\n// Since v-if and v-for are the two possible ways node structure can dynamically\r\n// change, once we consider v-if branches and each v-for fragment a block, we\r\n// can divide a template into nested blocks, and within each block the node\r\n// structure would be stable. This allows us to skip most children diffing\r\n// and only worry about the dynamic nodes (indicated by patch flags).\r\nconst blockStack = [];\r\nlet currentBlock = null;\r\n/**\r\n * Open a block.\r\n * This must be called before `createBlock`. It cannot be part of `createBlock`\r\n * because the children of the block are evaluated before `createBlock` itself\r\n * is called. The generated code typically looks like this:\r\n *\r\n * ```js\r\n * function render() {\r\n *   return (openBlock(),createBlock(\'div\', null, [...]))\r\n * }\r\n * ```\r\n * disableTracking is true when creating a v-for fragment block, since a v-for\r\n * fragment always diffs its children.\r\n *\r\n * @private\r\n */\r\nfunction runtime_core_esm_bundler_openBlock(disableTracking = false) {\r\n    blockStack.push((currentBlock = disableTracking ? null : []));\r\n}\r\nfunction closeBlock() {\r\n    blockStack.pop();\r\n    currentBlock = blockStack[blockStack.length - 1] || null;\r\n}\r\n// Whether we should be tracking dynamic child nodes inside a block.\r\n// Only tracks when this value is > 0\r\n// We are not using a simple boolean because this value may need to be\r\n// incremented/decremented by nested usage of v-once (see below)\r\nlet isBlockTreeEnabled = 1;\r\n/**\r\n * Block tracking sometimes needs to be disabled, for example during the\r\n * creation of a tree that needs to be cached by v-once. The compiler generates\r\n * code like this:\r\n *\r\n * ``` js\r\n * _cache[1] || (\r\n *   setBlockTracking(-1),\r\n *   _cache[1] = createVNode(...),\r\n *   setBlockTracking(1),\r\n *   _cache[1]\r\n * )\r\n * ```\r\n *\r\n * @private\r\n */\r\nfunction setBlockTracking(value) {\r\n    isBlockTreeEnabled += value;\r\n}\r\nfunction setupBlock(vnode) {\r\n    // save current block children on the block vnode\r\n    vnode.dynamicChildren =\r\n        isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;\r\n    // close block\r\n    closeBlock();\r\n    // a block is always going to be patched, so track it as a child of its\r\n    // parent block\r\n    if (isBlockTreeEnabled > 0 && currentBlock) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {\r\n    return setupBlock(createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, true /* isBlock */));\r\n}\r\n/**\r\n * Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n * A block root keeps track of dynamic nodes within the block in the\r\n * `dynamicChildren` array.\r\n *\r\n * @private\r\n */\r\nfunction runtime_core_esm_bundler_createBlock(type, props, children, patchFlag, dynamicProps) {\r\n    return setupBlock(createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */));\r\n}\r\nfunction runtime_core_esm_bundler_isVNode(value) {\r\n    return value ? value.__v_isVNode === true : false;\r\n}\r\nfunction isSameVNodeType(n1, n2) {\r\n    if (false) {}\r\n    return n1.type === n2.type && n1.key === n2.key;\r\n}\r\nlet vnodeArgsTransformer;\r\n/**\r\n * Internal API for registering an arguments transform for createVNode\r\n * used for creating stubs in the test-utils\r\n * It is *internal* but needs to be exposed for test-utils to pick up proper\r\n * typings\r\n */\r\nfunction transformVNodeArgs(transformer) {\r\n    vnodeArgsTransformer = transformer;\r\n}\r\nconst createVNodeWithArgsTransform = (...args) => {\r\n    return _createVNode(...(vnodeArgsTransformer\r\n        ? vnodeArgsTransformer(args, currentRenderingInstance)\r\n        : args));\r\n};\r\nconst InternalObjectKey = `__vInternal`;\r\nconst normalizeKey = ({ key }) => key != null ? key : null;\r\nconst normalizeRef = ({ ref, ref_key, ref_for }) => {\r\n    return (ref != null\r\n        ? shared_esm_bundler_isString(ref) || reactivity_esm_bundler_isRef(ref) || shared_esm_bundler_isFunction(ref)\r\n            ? { i: currentRenderingInstance, r: ref, k: ref_key, f: !!ref_for }\r\n            : ref\r\n        : null);\r\n};\r\nfunction createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === runtime_core_esm_bundler_Fragment ? 0 : 1 /* ELEMENT */, isBlockNode = false, needFullChildrenNormalization = false) {\r\n    const vnode = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type,\r\n        props,\r\n        key: props && normalizeKey(props),\r\n        ref: props && normalizeRef(props),\r\n        scopeId: currentScopeId,\r\n        slotScopeIds: null,\r\n        children,\r\n        component: null,\r\n        suspense: null,\r\n        ssContent: null,\r\n        ssFallback: null,\r\n        dirs: null,\r\n        transition: null,\r\n        el: null,\r\n        anchor: null,\r\n        target: null,\r\n        targetAnchor: null,\r\n        staticCount: 0,\r\n        shapeFlag,\r\n        patchFlag,\r\n        dynamicProps,\r\n        dynamicChildren: null,\r\n        appContext: null\r\n    };\r\n    if (needFullChildrenNormalization) {\r\n        normalizeChildren(vnode, children);\r\n        // normalize suspense children\r\n        if (shapeFlag & 128 /* SUSPENSE */) {\r\n            type.normalize(vnode);\r\n        }\r\n    }\r\n    else if (children) {\r\n        // compiled element vnode - if children is passed, only possible types are\r\n        // string or Array.\r\n        vnode.shapeFlag |= shared_esm_bundler_isString(children)\r\n            ? 8 /* TEXT_CHILDREN */\r\n            : 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    // validate key\r\n    if (false) {}\r\n    // track vnode for block tree\r\n    if (isBlockTreeEnabled > 0 &&\r\n        // avoid a block node from tracking itself\r\n        !isBlockNode &&\r\n        // has current parent block\r\n        currentBlock &&\r\n        // presence of a patch flag indicates this node needs patching on updates.\r\n        // component nodes also should always be patched, because even if the\r\n        // component doesn\'t need to update, it needs to persist the instance on to\r\n        // the next vnode so that it can be properly unmounted later.\r\n        (vnode.patchFlag > 0 || shapeFlag & 6 /* COMPONENT */) &&\r\n        // the EVENTS flag is only for hydration and if it is the only flag, the\r\n        // vnode should not be considered dynamic due to handler caching.\r\n        vnode.patchFlag !== 32 /* HYDRATE_EVENTS */) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nconst createVNode = (( false) ? 0 : _createVNode);\r\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\r\n    if (!type || type === NULL_DYNAMIC_COMPONENT) {\r\n        if (false) {}\r\n        type = runtime_core_esm_bundler_Comment;\r\n    }\r\n    if (runtime_core_esm_bundler_isVNode(type)) {\r\n        // createVNode receiving an existing vnode. This happens in cases like\r\n        // <component :is="vnode"/>\r\n        // #2078 make sure to merge refs during the clone instead of overwriting it\r\n        const cloned = cloneVNode(type, props, true /* mergeRef: true */);\r\n        if (children) {\r\n            normalizeChildren(cloned, children);\r\n        }\r\n        return cloned;\r\n    }\r\n    // class component normalization.\r\n    if (isClassComponent(type)) {\r\n        type = type.__vccOpts;\r\n    }\r\n    // class & style normalization.\r\n    if (props) {\r\n        // for reactive or proxy objects, we need to clone it to enable mutation.\r\n        props = guardReactiveProps(props);\r\n        let { class: klass, style } = props;\r\n        if (klass && !shared_esm_bundler_isString(klass)) {\r\n            props.class = normalizeClass(klass);\r\n        }\r\n        if (shared_esm_bundler_isObject(style)) {\r\n            // reactive state objects need to be cloned since they are likely to be\r\n            // mutated\r\n            if (isProxy(style) && !shared_esm_bundler_isArray(style)) {\r\n                style = shared_esm_bundler_extend({}, style);\r\n            }\r\n            props.style = normalizeStyle(style);\r\n        }\r\n    }\r\n    // encode the vnode type information into a bitmap\r\n    const shapeFlag = shared_esm_bundler_isString(type)\r\n        ? 1 /* ELEMENT */\r\n        : isSuspense(type)\r\n            ? 128 /* SUSPENSE */\r\n            : isTeleport(type)\r\n                ? 64 /* TELEPORT */\r\n                : shared_esm_bundler_isObject(type)\r\n                    ? 4 /* STATEFUL_COMPONENT */\r\n                    : shared_esm_bundler_isFunction(type)\r\n                        ? 2 /* FUNCTIONAL_COMPONENT */\r\n                        : 0;\r\n    if (false) {}\r\n    return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);\r\n}\r\nfunction guardReactiveProps(props) {\r\n    if (!props)\r\n        return null;\r\n    return isProxy(props) || InternalObjectKey in props\r\n        ? shared_esm_bundler_extend({}, props)\r\n        : props;\r\n}\r\nfunction cloneVNode(vnode, extraProps, mergeRef = false) {\r\n    // This is intentionally NOT using spread or extend to avoid the runtime\r\n    // key enumeration cost.\r\n    const { props, ref, patchFlag, children } = vnode;\r\n    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;\r\n    const cloned = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type: vnode.type,\r\n        props: mergedProps,\r\n        key: mergedProps && normalizeKey(mergedProps),\r\n        ref: extraProps && extraProps.ref\r\n            ? // #2078 in the case of <component :is="vnode" ref="extra"/>\r\n                // if the vnode itself already has a ref, cloneVNode will need to merge\r\n                // the refs so the single vnode can be set on multiple refs\r\n                mergeRef && ref\r\n                    ? shared_esm_bundler_isArray(ref)\r\n                        ? ref.concat(normalizeRef(extraProps))\r\n                        : [ref, normalizeRef(extraProps)]\r\n                    : normalizeRef(extraProps)\r\n            : ref,\r\n        scopeId: vnode.scopeId,\r\n        slotScopeIds: vnode.slotScopeIds,\r\n        children:  false\r\n            ? 0\r\n            : children,\r\n        target: vnode.target,\r\n        targetAnchor: vnode.targetAnchor,\r\n        staticCount: vnode.staticCount,\r\n        shapeFlag: vnode.shapeFlag,\r\n        // if the vnode is cloned with extra props, we can no longer assume its\r\n        // existing patch flag to be reliable and need to add the FULL_PROPS flag.\r\n        // note: preserve flag for fragments since they use the flag for children\r\n        // fast paths only.\r\n        patchFlag: extraProps && vnode.type !== runtime_core_esm_bundler_Fragment\r\n            ? patchFlag === -1 // hoisted node\r\n                ? 16 /* FULL_PROPS */\r\n                : patchFlag | 16 /* FULL_PROPS */\r\n            : patchFlag,\r\n        dynamicProps: vnode.dynamicProps,\r\n        dynamicChildren: vnode.dynamicChildren,\r\n        appContext: vnode.appContext,\r\n        dirs: vnode.dirs,\r\n        transition: vnode.transition,\r\n        // These should technically only be non-null on mounted VNodes. However,\r\n        // they *should* be copied for kept-alive vnodes. So we just always copy\r\n        // them since them being non-null during a mount doesn\'t affect the logic as\r\n        // they will simply be overwritten.\r\n        component: vnode.component,\r\n        suspense: vnode.suspense,\r\n        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),\r\n        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),\r\n        el: vnode.el,\r\n        anchor: vnode.anchor\r\n    };\r\n    return cloned;\r\n}\r\n/**\r\n * Dev only, for HMR of hoisted vnodes reused in v-for\r\n * https://github.com/vitejs/vite/issues/2022\r\n */\r\nfunction deepCloneVNode(vnode) {\r\n    const cloned = cloneVNode(vnode);\r\n    if (isArray(vnode.children)) {\r\n        cloned.children = vnode.children.map(deepCloneVNode);\r\n    }\r\n    return cloned;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createTextVNode(text = \' \', flag = 0) {\r\n    return createVNode(runtime_core_esm_bundler_Text, null, text, flag);\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createStaticVNode(content, numberOfNodes) {\r\n    // A static vnode can contain multiple stringified elements, and the number\r\n    // of elements is necessary for hydration.\r\n    const vnode = createVNode(Static, null, content);\r\n    vnode.staticCount = numberOfNodes;\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction runtime_core_esm_bundler_createCommentVNode(text = \'\', \r\n// when used as the v-else branch, the comment node must be created as a\r\n// block to ensure correct updates.\r\nasBlock = false) {\r\n    return asBlock\r\n        ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(runtime_core_esm_bundler_Comment, null, text))\r\n        : createVNode(runtime_core_esm_bundler_Comment, null, text);\r\n}\r\nfunction normalizeVNode(child) {\r\n    if (child == null || typeof child === \'boolean\') {\r\n        // empty placeholder\r\n        return createVNode(runtime_core_esm_bundler_Comment);\r\n    }\r\n    else if (shared_esm_bundler_isArray(child)) {\r\n        // fragment\r\n        return createVNode(runtime_core_esm_bundler_Fragment, null, \r\n        // #3666, avoid reference pollution when reusing vnode\r\n        child.slice());\r\n    }\r\n    else if (typeof child === \'object\') {\r\n        // already vnode, this should be the most common since compiled templates\r\n        // always produce all-vnode children arrays\r\n        return cloneIfMounted(child);\r\n    }\r\n    else {\r\n        // strings and numbers\r\n        return createVNode(runtime_core_esm_bundler_Text, null, String(child));\r\n    }\r\n}\r\n// optimized normalization for template-compiled render fns\r\nfunction cloneIfMounted(child) {\r\n    return child.el === null || child.memo ? child : cloneVNode(child);\r\n}\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0;\r\n    const { shapeFlag } = vnode;\r\n    if (children == null) {\r\n        children = null;\r\n    }\r\n    else if (shared_esm_bundler_isArray(children)) {\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else if (typeof children === \'object\') {\r\n        if (shapeFlag & (1 /* ELEMENT */ | 64 /* TELEPORT */)) {\r\n            // Normalize slot to plain children for plain element and Teleport\r\n            const slot = children.default;\r\n            if (slot) {\r\n                // _c marker is added by withCtx() indicating this is a compiled slot\r\n                slot._c && (slot._d = false);\r\n                normalizeChildren(vnode, slot());\r\n                slot._c && (slot._d = true);\r\n            }\r\n            return;\r\n        }\r\n        else {\r\n            type = 32 /* SLOTS_CHILDREN */;\r\n            const slotFlag = children._;\r\n            if (!slotFlag && !(InternalObjectKey in children)) {\r\n                children._ctx = currentRenderingInstance;\r\n            }\r\n            else if (slotFlag === 3 /* FORWARDED */ && currentRenderingInstance) {\r\n                // a child component receives forwarded slots from the parent.\r\n                // its slot type is determined by its parent\'s slot type.\r\n                if (currentRenderingInstance.slots._ === 1 /* STABLE */) {\r\n                    children._ = 1 /* STABLE */;\r\n                }\r\n                else {\r\n                    children._ = 2 /* DYNAMIC */;\r\n                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (shared_esm_bundler_isFunction(children)) {\r\n        children = { default: children, _ctx: currentRenderingInstance };\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else {\r\n        children = String(children);\r\n        // force teleport children to array so it can be moved around\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type = 16 /* ARRAY_CHILDREN */;\r\n            children = [createTextVNode(children)];\r\n        }\r\n        else {\r\n            type = 8 /* TEXT_CHILDREN */;\r\n        }\r\n    }\r\n    vnode.children = children;\r\n    vnode.shapeFlag |= type;\r\n}\r\nfunction mergeProps(...args) {\r\n    const ret = {};\r\n    for (let i = 0; i < args.length; i++) {\r\n        const toMerge = args[i];\r\n        for (const key in toMerge) {\r\n            if (key === \'class\') {\r\n                if (ret.class !== toMerge.class) {\r\n                    ret.class = normalizeClass([ret.class, toMerge.class]);\r\n                }\r\n            }\r\n            else if (key === \'style\') {\r\n                ret.style = normalizeStyle([ret.style, toMerge.style]);\r\n            }\r\n            else if (isOn(key)) {\r\n                const existing = ret[key];\r\n                const incoming = toMerge[key];\r\n                if (incoming &&\r\n                    existing !== incoming &&\r\n                    !(shared_esm_bundler_isArray(existing) && existing.includes(incoming))) {\r\n                    ret[key] = existing\r\n                        ? [].concat(existing, incoming)\r\n                        : incoming;\r\n                }\r\n            }\r\n            else if (key !== \'\') {\r\n                ret[key] = toMerge[key];\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\r\n    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */, [\r\n        vnode,\r\n        prevVNode\r\n    ]);\r\n}\n\n/**\r\n * Actual implementation\r\n */\r\nfunction renderList(source, renderItem, cache, index) {\r\n    let ret;\r\n    const cached = (cache && cache[index]);\r\n    if (shared_esm_bundler_isArray(source) || shared_esm_bundler_isString(source)) {\r\n        ret = new Array(source.length);\r\n        for (let i = 0, l = source.length; i < l; i++) {\r\n            ret[i] = renderItem(source[i], i, undefined, cached && cached[i]);\r\n        }\r\n    }\r\n    else if (typeof source === \'number\') {\r\n        if (false) {}\r\n        ret = new Array(source);\r\n        for (let i = 0; i < source; i++) {\r\n            ret[i] = renderItem(i + 1, i, undefined, cached && cached[i]);\r\n        }\r\n    }\r\n    else if (shared_esm_bundler_isObject(source)) {\r\n        if (source[Symbol.iterator]) {\r\n            ret = Array.from(source, (item, i) => renderItem(item, i, undefined, cached && cached[i]));\r\n        }\r\n        else {\r\n            const keys = Object.keys(source);\r\n            ret = new Array(keys.length);\r\n            for (let i = 0, l = keys.length; i < l; i++) {\r\n                const key = keys[i];\r\n                ret[i] = renderItem(source[key], key, i, cached && cached[i]);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ret = [];\r\n    }\r\n    if (cache) {\r\n        cache[index] = ret;\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Compiler runtime helper for creating dynamic slots object\r\n * @private\r\n */\r\nfunction createSlots(slots, dynamicSlots) {\r\n    for (let i = 0; i < dynamicSlots.length; i++) {\r\n        const slot = dynamicSlots[i];\r\n        // array of dynamic slot generated by <template v-for="..." #[...]>\r\n        if (shared_esm_bundler_isArray(slot)) {\r\n            for (let j = 0; j < slot.length; j++) {\r\n                slots[slot[j].name] = slot[j].fn;\r\n            }\r\n        }\r\n        else if (slot) {\r\n            // conditional single slot generated by <template v-if="..." #foo>\r\n            slots[slot.name] = slot.fn;\r\n        }\r\n    }\r\n    return slots;\r\n}\n\n/**\r\n * Compiler runtime helper for rendering `<slot/>`\r\n * @private\r\n */\r\nfunction renderSlot(slots, name, props = {}, \r\n// this is not a user-facing function, so the fallback is always generated by\r\n// the compiler and guaranteed to be a function returning an array\r\nfallback, noSlotted) {\r\n    if (currentRenderingInstance.isCE) {\r\n        return createVNode(\'slot\', name === \'default\' ? null : { name }, fallback && fallback());\r\n    }\r\n    let slot = slots[name];\r\n    if (false) {}\r\n    // a compiled slot disables block tracking by default to avoid manual\r\n    // invocation interfering with template-based block tracking, but in\r\n    // `renderSlot` we can be sure that it\'s template-based so we can force\r\n    // enable it.\r\n    if (slot && slot._c) {\r\n        slot._d = false;\r\n    }\r\n    runtime_core_esm_bundler_openBlock();\r\n    const validSlotContent = slot && ensureValidVNode(slot(props));\r\n    const rendered = runtime_core_esm_bundler_createBlock(runtime_core_esm_bundler_Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */\r\n        ? 64 /* STABLE_FRAGMENT */\r\n        : -2 /* BAIL */);\r\n    if (!noSlotted && rendered.scopeId) {\r\n        rendered.slotScopeIds = [rendered.scopeId + \'-s\'];\r\n    }\r\n    if (slot && slot._c) {\r\n        slot._d = true;\r\n    }\r\n    return rendered;\r\n}\r\nfunction ensureValidVNode(vnodes) {\r\n    return vnodes.some(child => {\r\n        if (!runtime_core_esm_bundler_isVNode(child))\r\n            return true;\r\n        if (child.type === runtime_core_esm_bundler_Comment)\r\n            return false;\r\n        if (child.type === runtime_core_esm_bundler_Fragment &&\r\n            !ensureValidVNode(child.children))\r\n            return false;\r\n        return true;\r\n    })\r\n        ? vnodes\r\n        : null;\r\n}\n\n/**\r\n * For prefixing keys in v-on="obj" with "on"\r\n * @private\r\n */\r\nfunction toHandlers(obj) {\r\n    const ret = {};\r\n    if (false) {}\r\n    for (const key in obj) {\r\n        ret[toHandlerKey(key)] = obj[key];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * #2437 In Vue 3, functional components do not have a public instance proxy but\r\n * they exist in the internal parent chain. For code that relies on traversing\r\n * public $parent chains, skip functional ones and go to the parent instead.\r\n */\r\nconst getPublicInstance = (i) => {\r\n    if (!i)\r\n        return null;\r\n    if (isStatefulComponent(i))\r\n        return getExposeProxy(i) || i.proxy;\r\n    return getPublicInstance(i.parent);\r\n};\r\nconst publicPropertiesMap = shared_esm_bundler_extend(Object.create(null), {\r\n    $: i => i,\r\n    $el: i => i.vnode.el,\r\n    $data: i => i.data,\r\n    $props: i => (( false) ? 0 : i.props),\r\n    $attrs: i => (( false) ? 0 : i.attrs),\r\n    $slots: i => (( false) ? 0 : i.slots),\r\n    $refs: i => (( false) ? 0 : i.refs),\r\n    $parent: i => getPublicInstance(i.parent),\r\n    $root: i => getPublicInstance(i.root),\r\n    $emit: i => i.emit,\r\n    $options: i => ( true ? resolveMergedOptions(i) : 0),\r\n    $forceUpdate: i => () => queueJob(i.update),\r\n    $nextTick: i => runtime_core_esm_bundler_nextTick.bind(i.proxy),\r\n    $watch: i => ( true ? instanceWatch.bind(i) : 0)\r\n});\r\nconst PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;\r\n        // for internal formatters to know that this is a Vue instance\r\n        if (false) {}\r\n        // prioritize <script setup> bindings during dev.\r\n        // this allows even properties that start with _ or $ to be used - so that\r\n        // it aligns with the production behavior where the render fn is inlined and\r\n        // indeed has access to all declared variables.\r\n        if (false) {}\r\n        // data / props / ctx\r\n        // This getter gets called for every property access on the render context\r\n        // during render and is a major hotspot. The most expensive part of this\r\n        // is the multiple hasOwn() calls. It\'s much faster to do a simple property\r\n        // access on a plain object, so we use an accessCache object (with null\r\n        // prototype) to memoize what access type a key corresponds to.\r\n        let normalizedProps;\r\n        if (key[0] !== \'$\') {\r\n            const n = accessCache[key];\r\n            if (n !== undefined) {\r\n                switch (n) {\r\n                    case 1 /* SETUP */:\r\n                        return setupState[key];\r\n                    case 2 /* DATA */:\r\n                        return data[key];\r\n                    case 4 /* CONTEXT */:\r\n                        return ctx[key];\r\n                    case 3 /* PROPS */:\r\n                        return props[key];\r\n                    // default: just fallthrough\r\n                }\r\n            }\r\n            else if (setupState !== EMPTY_OBJ && shared_esm_bundler_hasOwn(setupState, key)) {\r\n                accessCache[key] = 1 /* SETUP */;\r\n                return setupState[key];\r\n            }\r\n            else if (data !== EMPTY_OBJ && shared_esm_bundler_hasOwn(data, key)) {\r\n                accessCache[key] = 2 /* DATA */;\r\n                return data[key];\r\n            }\r\n            else if (\r\n            // only cache other properties when instance has declared (thus stable)\r\n            // props\r\n            (normalizedProps = instance.propsOptions[0]) &&\r\n                shared_esm_bundler_hasOwn(normalizedProps, key)) {\r\n                accessCache[key] = 3 /* PROPS */;\r\n                return props[key];\r\n            }\r\n            else if (ctx !== EMPTY_OBJ && shared_esm_bundler_hasOwn(ctx, key)) {\r\n                accessCache[key] = 4 /* CONTEXT */;\r\n                return ctx[key];\r\n            }\r\n            else if ( false || shouldCacheAccess) {\r\n                accessCache[key] = 0 /* OTHER */;\r\n            }\r\n        }\r\n        const publicGetter = publicPropertiesMap[key];\r\n        let cssModule, globalProperties;\r\n        // public $xxx properties\r\n        if (publicGetter) {\r\n            if (key === \'$attrs\') {\r\n                track(instance, "get" /* GET */, key);\r\n                ( false) && 0;\r\n            }\r\n            return publicGetter(instance);\r\n        }\r\n        else if (\r\n        // css module (injected by vue-loader)\r\n        (cssModule = type.__cssModules) &&\r\n            (cssModule = cssModule[key])) {\r\n            return cssModule;\r\n        }\r\n        else if (ctx !== EMPTY_OBJ && shared_esm_bundler_hasOwn(ctx, key)) {\r\n            // user may set custom properties to `this` that start with `$`\r\n            accessCache[key] = 4 /* CONTEXT */;\r\n            return ctx[key];\r\n        }\r\n        else if (\r\n        // global properties\r\n        ((globalProperties = appContext.config.globalProperties),\r\n            shared_esm_bundler_hasOwn(globalProperties, key))) {\r\n            {\r\n                return globalProperties[key];\r\n            }\r\n        }\r\n        else if (false) {}\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { data, setupState, ctx } = instance;\r\n        if (setupState !== EMPTY_OBJ && shared_esm_bundler_hasOwn(setupState, key)) {\r\n            setupState[key] = value;\r\n            return true;\r\n        }\r\n        else if (data !== EMPTY_OBJ && shared_esm_bundler_hasOwn(data, key)) {\r\n            data[key] = value;\r\n            return true;\r\n        }\r\n        else if (shared_esm_bundler_hasOwn(instance.props, key)) {\r\n            ( false) &&\r\n                0;\r\n            return false;\r\n        }\r\n        if (key[0] === \'$\' && key.slice(1) in instance) {\r\n            ( false) &&\r\n                0;\r\n            return false;\r\n        }\r\n        else {\r\n            if (false) {}\r\n            else {\r\n                ctx[key] = value;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {\r\n        let normalizedProps;\r\n        return (!!accessCache[key] ||\r\n            (data !== EMPTY_OBJ && shared_esm_bundler_hasOwn(data, key)) ||\r\n            (setupState !== EMPTY_OBJ && shared_esm_bundler_hasOwn(setupState, key)) ||\r\n            ((normalizedProps = propsOptions[0]) && shared_esm_bundler_hasOwn(normalizedProps, key)) ||\r\n            shared_esm_bundler_hasOwn(ctx, key) ||\r\n            shared_esm_bundler_hasOwn(publicPropertiesMap, key) ||\r\n            shared_esm_bundler_hasOwn(appContext.config.globalProperties, key));\r\n    },\r\n    defineProperty(target, key, descriptor) {\r\n        if (descriptor.get != null) {\r\n            this.set(target, key, descriptor.get(), null);\r\n        }\r\n        else if (descriptor.value != null) {\r\n            this.set(target, key, descriptor.value, null);\r\n        }\r\n        return Reflect.defineProperty(target, key, descriptor);\r\n    }\r\n};\r\nif (false) {}\r\nconst RuntimeCompiledPublicInstanceProxyHandlers = /*#__PURE__*/ shared_esm_bundler_extend({}, PublicInstanceProxyHandlers, {\r\n    get(target, key) {\r\n        // fast path for unscopables when using `with` block\r\n        if (key === Symbol.unscopables) {\r\n            return;\r\n        }\r\n        return PublicInstanceProxyHandlers.get(target, key, target);\r\n    },\r\n    has(_, key) {\r\n        const has = key[0] !== \'_\' && !isGloballyWhitelisted(key);\r\n        if (false) {}\r\n        return has;\r\n    }\r\n});\r\n// dev only\r\n// In dev mode, the proxy target exposes the same properties as seen on `this`\r\n// for easier console inspection. In prod mode it will be an empty object so\r\n// these properties definitions can be skipped.\r\nfunction createDevRenderContext(instance) {\r\n    const target = {};\r\n    // expose internal instance for proxy handlers\r\n    Object.defineProperty(target, `_`, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        get: () => instance\r\n    });\r\n    // expose public properties\r\n    Object.keys(publicPropertiesMap).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => publicPropertiesMap[key](instance),\r\n            // intercepted by the proxy so no need for implementation,\r\n            // but needed to prevent set errors\r\n            set: NOOP\r\n        });\r\n    });\r\n    return target;\r\n}\r\n// dev only\r\nfunction exposePropsOnRenderContext(instance) {\r\n    const { ctx, propsOptions: [propsOptions] } = instance;\r\n    if (propsOptions) {\r\n        Object.keys(propsOptions).forEach(key => {\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => instance.props[key],\r\n                set: NOOP\r\n            });\r\n        });\r\n    }\r\n}\r\n// dev only\r\nfunction exposeSetupStateOnRenderContext(instance) {\r\n    const { ctx, setupState } = instance;\r\n    Object.keys(toRaw(setupState)).forEach(key => {\r\n        if (!setupState.__isScriptSetup) {\r\n            if (key[0] === \'$\' || key[0] === \'_\') {\r\n                runtime_core_esm_bundler_warn(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" ` +\r\n                    `which are reserved prefixes for Vue internals.`);\r\n                return;\r\n            }\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => setupState[key],\r\n                set: NOOP\r\n            });\r\n        }\r\n    });\r\n}\n\nconst emptyAppContext = createAppContext();\r\nlet uid$1 = 0;\r\nfunction createComponentInstance(vnode, parent, suspense) {\r\n    const type = vnode.type;\r\n    // inherit parent app context - or - if root, adopt from root vnode\r\n    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\r\n    const instance = {\r\n        uid: uid$1++,\r\n        vnode,\r\n        type,\r\n        parent,\r\n        appContext,\r\n        root: null,\r\n        next: null,\r\n        subTree: null,\r\n        effect: null,\r\n        update: null,\r\n        scope: new EffectScope(true /* detached */),\r\n        render: null,\r\n        proxy: null,\r\n        exposed: null,\r\n        exposeProxy: null,\r\n        withProxy: null,\r\n        provides: parent ? parent.provides : Object.create(appContext.provides),\r\n        accessCache: null,\r\n        renderCache: [],\r\n        // local resovled assets\r\n        components: null,\r\n        directives: null,\r\n        // resolved props and emits options\r\n        propsOptions: normalizePropsOptions(type, appContext),\r\n        emitsOptions: normalizeEmitsOptions(type, appContext),\r\n        // emit\r\n        emit: null,\r\n        emitted: null,\r\n        // props default value\r\n        propsDefaults: EMPTY_OBJ,\r\n        // inheritAttrs\r\n        inheritAttrs: type.inheritAttrs,\r\n        // state\r\n        ctx: EMPTY_OBJ,\r\n        data: EMPTY_OBJ,\r\n        props: EMPTY_OBJ,\r\n        attrs: EMPTY_OBJ,\r\n        slots: EMPTY_OBJ,\r\n        refs: EMPTY_OBJ,\r\n        setupState: EMPTY_OBJ,\r\n        setupContext: null,\r\n        // suspense related\r\n        suspense,\r\n        suspenseId: suspense ? suspense.pendingId : 0,\r\n        asyncDep: null,\r\n        asyncResolved: false,\r\n        // lifecycle hooks\r\n        // not using enums here because it results in computed properties\r\n        isMounted: false,\r\n        isUnmounted: false,\r\n        isDeactivated: false,\r\n        bc: null,\r\n        c: null,\r\n        bm: null,\r\n        m: null,\r\n        bu: null,\r\n        u: null,\r\n        um: null,\r\n        bum: null,\r\n        da: null,\r\n        a: null,\r\n        rtg: null,\r\n        rtc: null,\r\n        ec: null,\r\n        sp: null\r\n    };\r\n    if ((false)) {}\r\n    else {\r\n        instance.ctx = { _: instance };\r\n    }\r\n    instance.root = parent ? parent.root : instance;\r\n    instance.emit = emit$1.bind(null, instance);\r\n    // apply custom element special handling\r\n    if (vnode.ce) {\r\n        vnode.ce(instance);\r\n    }\r\n    return instance;\r\n}\r\nlet currentInstance = null;\r\nconst runtime_core_esm_bundler_getCurrentInstance = () => currentInstance || currentRenderingInstance;\r\nconst setCurrentInstance = (instance) => {\r\n    currentInstance = instance;\r\n    instance.scope.on();\r\n};\r\nconst unsetCurrentInstance = () => {\r\n    currentInstance && currentInstance.scope.off();\r\n    currentInstance = null;\r\n};\r\nconst isBuiltInTag = /*#__PURE__*/ (/* unused pure expression or super */ null && (makeMap(\'slot,component\')));\r\nfunction validateComponentName(name, config) {\r\n    const appIsNativeTag = config.isNativeTag || NO;\r\n    if (isBuiltInTag(name) || appIsNativeTag(name)) {\r\n        runtime_core_esm_bundler_warn(\'Do not use built-in or reserved HTML elements as component id: \' + name);\r\n    }\r\n}\r\nfunction isStatefulComponent(instance) {\r\n    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */;\r\n}\r\nlet isInSSRComponentSetup = false;\r\nfunction setupComponent(instance, isSSR = false) {\r\n    isInSSRComponentSetup = isSSR;\r\n    const { props, children } = instance.vnode;\r\n    const isStateful = isStatefulComponent(instance);\r\n    initProps(instance, props, isStateful, isSSR);\r\n    initSlots(instance, children);\r\n    const setupResult = isStateful\r\n        ? setupStatefulComponent(instance, isSSR)\r\n        : undefined;\r\n    isInSSRComponentSetup = false;\r\n    return setupResult;\r\n}\r\nfunction setupStatefulComponent(instance, isSSR) {\r\n    const Component = instance.type;\r\n    if ((false)) {}\r\n    // 0. create render proxy property access cache\r\n    instance.accessCache = Object.create(null);\r\n    // 1. create public instance / render proxy\r\n    // also mark it raw so it\'s never observed\r\n    instance.proxy = reactivity_esm_bundler_markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));\r\n    if ((false)) {}\r\n    // 2. call setup()\r\n    const { setup } = Component;\r\n    if (setup) {\r\n        const setupContext = (instance.setupContext =\r\n            setup.length > 1 ? createSetupContext(instance) : null);\r\n        setCurrentInstance(instance);\r\n        pauseTracking();\r\n        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [( false) ? 0 : instance.props, setupContext]);\r\n        resetTracking();\r\n        unsetCurrentInstance();\r\n        if (isPromise(setupResult)) {\r\n            setupResult.then(unsetCurrentInstance, unsetCurrentInstance);\r\n            if (isSSR) {\r\n                // return the promise so server-renderer can wait on it\r\n                return setupResult\r\n                    .then((resolvedResult) => {\r\n                    handleSetupResult(instance, resolvedResult, isSSR);\r\n                })\r\n                    .catch(e => {\r\n                    handleError(e, instance, 0 /* SETUP_FUNCTION */);\r\n                });\r\n            }\r\n            else {\r\n                // async setup returned Promise.\r\n                // bail here and wait for re-entry.\r\n                instance.asyncDep = setupResult;\r\n            }\r\n        }\r\n        else {\r\n            handleSetupResult(instance, setupResult, isSSR);\r\n        }\r\n    }\r\n    else {\r\n        finishComponentSetup(instance, isSSR);\r\n    }\r\n}\r\nfunction handleSetupResult(instance, setupResult, isSSR) {\r\n    if (shared_esm_bundler_isFunction(setupResult)) {\r\n        // setup returned an inline render function\r\n        if (instance.type.__ssrInlineRender) {\r\n            // when the function\'s name is `ssrRender` (compiled by SFC inline mode),\r\n            // set it as ssrRender instead.\r\n            instance.ssrRender = setupResult;\r\n        }\r\n        else {\r\n            instance.render = setupResult;\r\n        }\r\n    }\r\n    else if (shared_esm_bundler_isObject(setupResult)) {\r\n        if (false) {}\r\n        // setup returned bindings.\r\n        // assuming a render function compiled from template is present.\r\n        if (false) {}\r\n        instance.setupState = proxyRefs(setupResult);\r\n        if ((false)) {}\r\n    }\r\n    else if (false) {}\r\n    finishComponentSetup(instance, isSSR);\r\n}\r\nlet compile;\r\nlet installWithProxy;\r\n/**\r\n * For runtime-dom to register the compiler.\r\n * Note the exported method uses any to avoid d.ts relying on the compiler types.\r\n */\r\nfunction registerRuntimeCompiler(_compile) {\r\n    compile = _compile;\r\n    installWithProxy = i => {\r\n        if (i.render._rc) {\r\n            i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\r\n        }\r\n    };\r\n}\r\n// dev only\r\nconst runtime_core_esm_bundler_isRuntimeOnly = () => !compile;\r\nfunction finishComponentSetup(instance, isSSR, skipOptions) {\r\n    const Component = instance.type;\r\n    // template / render function normalization\r\n    // could be already set when returned from setup()\r\n    if (!instance.render) {\r\n        // only do on-the-fly compile if not in SSR - SSR on-the-fly compilation\r\n        // is done by server-renderer\r\n        if (!isSSR && compile && !Component.render) {\r\n            const template = Component.template;\r\n            if (template) {\r\n                if ((false)) {}\r\n                const { isCustomElement, compilerOptions } = instance.appContext.config;\r\n                const { delimiters, compilerOptions: componentCompilerOptions } = Component;\r\n                const finalCompilerOptions = shared_esm_bundler_extend(shared_esm_bundler_extend({\r\n                    isCustomElement,\r\n                    delimiters\r\n                }, compilerOptions), componentCompilerOptions);\r\n                Component.render = compile(template, finalCompilerOptions);\r\n                if ((false)) {}\r\n            }\r\n        }\r\n        instance.render = (Component.render || shared_esm_bundler_NOOP);\r\n        // for runtime-compiled render functions using `with` blocks, the render\r\n        // proxy used needs a different `has` handler which is more performant and\r\n        // also only allows a whitelist of globals to fallthrough.\r\n        if (installWithProxy) {\r\n            installWithProxy(instance);\r\n        }\r\n    }\r\n    // support for 2.x options\r\n    if (true) {\r\n        setCurrentInstance(instance);\r\n        pauseTracking();\r\n        applyOptions(instance);\r\n        resetTracking();\r\n        unsetCurrentInstance();\r\n    }\r\n    // warn missing template/render\r\n    // the runtime compilation of template in SSR is done by server-render\r\n    if (false) {}\r\n}\r\nfunction createAttrsProxy(instance) {\r\n    return new Proxy(instance.attrs, ( false)\r\n        ? 0\r\n        : {\r\n            get(target, key) {\r\n                track(instance, "get" /* GET */, \'$attrs\');\r\n                return target[key];\r\n            }\r\n        });\r\n}\r\nfunction createSetupContext(instance) {\r\n    const expose = exposed => {\r\n        if (false) {}\r\n        instance.exposed = exposed || {};\r\n    };\r\n    let attrs;\r\n    if ((false)) {}\r\n    else {\r\n        return {\r\n            get attrs() {\r\n                return attrs || (attrs = createAttrsProxy(instance));\r\n            },\r\n            slots: instance.slots,\r\n            emit: instance.emit,\r\n            expose\r\n        };\r\n    }\r\n}\r\nfunction getExposeProxy(instance) {\r\n    if (instance.exposed) {\r\n        return (instance.exposeProxy ||\r\n            (instance.exposeProxy = new Proxy(proxyRefs(reactivity_esm_bundler_markRaw(instance.exposed)), {\r\n                get(target, key) {\r\n                    if (key in target) {\r\n                        return target[key];\r\n                    }\r\n                    else if (key in publicPropertiesMap) {\r\n                        return publicPropertiesMap[key](instance);\r\n                    }\r\n                }\r\n            })));\r\n    }\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, \'\');\r\nfunction getComponentName(Component) {\r\n    return shared_esm_bundler_isFunction(Component)\r\n        ? Component.displayName || Component.name\r\n        : Component.name;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatComponentName(instance, Component, isRoot = false) {\r\n    let name = getComponentName(Component);\r\n    if (!name && Component.__file) {\r\n        const match = Component.__file.match(/([^/\\\\]+)\\.\\w+$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    if (!name && instance && instance.parent) {\r\n        // try to infer the name based on reverse resolution\r\n        const inferFromRegistry = (registry) => {\r\n            for (const key in registry) {\r\n                if (registry[key] === Component) {\r\n                    return key;\r\n                }\r\n            }\r\n        };\r\n        name =\r\n            inferFromRegistry(instance.components ||\r\n                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\r\n    }\r\n    return name ? classify(name) : isRoot ? `App` : `Anonymous`;\r\n}\r\nfunction isClassComponent(value) {\r\n    return shared_esm_bundler_isFunction(value) && \'__vccOpts\' in value;\r\n}\n\nconst runtime_core_esm_bundler_computed = ((getterOrOptions, debugOptions) => {\r\n    // @ts-ignore\r\n    return reactivity_esm_bundler_computed(getterOrOptions, debugOptions, isInSSRComponentSetup);\r\n});\n\n// dev only\r\nconst warnRuntimeUsage = (method) => runtime_core_esm_bundler_warn(`${method}() is a compiler-hint helper that is only usable inside ` +\r\n    `<script setup> of a single file component. Its arguments should be ` +\r\n    `compiled away and passing it at runtime has no effect.`);\r\n// implementation\r\nfunction defineProps() {\r\n    if ((false)) {}\r\n    return null;\r\n}\r\n// implementation\r\nfunction defineEmits() {\r\n    if ((false)) {}\r\n    return null;\r\n}\r\n/**\r\n * Vue `<script setup>` compiler macro for declaring a component\'s exposed\r\n * instance properties when it is accessed by a parent component via template\r\n * refs.\r\n *\r\n * `<script setup>` components are closed by default - i.e. variables inside\r\n * the `<script setup>` scope is not exposed to parent unless explicitly exposed\r\n * via `defineExpose`.\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the\r\n * output and should **not** be actually called at runtime.\r\n */\r\nfunction defineExpose(exposed) {\r\n    if ((false)) {}\r\n}\r\n/**\r\n * Vue `<script setup>` compiler macro for providing props default values when\r\n * using type-based `defineProps` declaration.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * withDefaults(defineProps<{\r\n *   size?: number\r\n *   labels?: string[]\r\n * }>(), {\r\n *   size: 3,\r\n *   labels: () => [\'default label\']\r\n * })\r\n * ```\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the output\r\n * and should **not** be actually called at runtime.\r\n */\r\nfunction withDefaults(props, defaults) {\r\n    if ((false)) {}\r\n    return null;\r\n}\r\nfunction useSlots() {\r\n    return getContext().slots;\r\n}\r\nfunction useAttrs() {\r\n    return getContext().attrs;\r\n}\r\nfunction getContext() {\r\n    const i = runtime_core_esm_bundler_getCurrentInstance();\r\n    if (false) {}\r\n    return i.setupContext || (i.setupContext = createSetupContext(i));\r\n}\r\n/**\r\n * Runtime helper for merging default declarations. Imported by compiled code\r\n * only.\r\n * @internal\r\n */\r\nfunction mergeDefaults(raw, defaults) {\r\n    const props = shared_esm_bundler_isArray(raw)\r\n        ? raw.reduce((normalized, p) => ((normalized[p] = {}), normalized), {})\r\n        : raw;\r\n    for (const key in defaults) {\r\n        const opt = props[key];\r\n        if (opt) {\r\n            if (shared_esm_bundler_isArray(opt) || shared_esm_bundler_isFunction(opt)) {\r\n                props[key] = { type: opt, default: defaults[key] };\r\n            }\r\n            else {\r\n                opt.default = defaults[key];\r\n            }\r\n        }\r\n        else if (opt === null) {\r\n            props[key] = { default: defaults[key] };\r\n        }\r\n        else if ((false)) {}\r\n    }\r\n    return props;\r\n}\r\n/**\r\n * Used to create a proxy for the rest element when destructuring props with\r\n * defineProps().\r\n * @internal\r\n */\r\nfunction createPropsRestProxy(props, excludedKeys) {\r\n    const ret = {};\r\n    for (const key in props) {\r\n        if (!excludedKeys.includes(key)) {\r\n            Object.defineProperty(ret, key, {\r\n                enumerable: true,\r\n                get: () => props[key]\r\n            });\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n/**\r\n * `<script setup>` helper for persisting the current instance context over\r\n * async/await flows.\r\n *\r\n * `@vue/compiler-sfc` converts the following:\r\n *\r\n * ```ts\r\n * const x = await foo()\r\n * ```\r\n *\r\n * into:\r\n *\r\n * ```ts\r\n * let __temp, __restore\r\n * const x = (([__temp, __restore] = withAsyncContext(() => foo())),__temp=await __temp,__restore(),__temp)\r\n * ```\r\n * @internal\r\n */\r\nfunction withAsyncContext(getAwaitable) {\r\n    const ctx = runtime_core_esm_bundler_getCurrentInstance();\r\n    if (false) {}\r\n    let awaitable = getAwaitable();\r\n    unsetCurrentInstance();\r\n    if (isPromise(awaitable)) {\r\n        awaitable = awaitable.catch(e => {\r\n            setCurrentInstance(ctx);\r\n            throw e;\r\n        });\r\n    }\r\n    return [awaitable, () => setCurrentInstance(ctx)];\r\n}\n\n// Actual implementation\r\nfunction h(type, propsOrChildren, children) {\r\n    const l = arguments.length;\r\n    if (l === 2) {\r\n        if (shared_esm_bundler_isObject(propsOrChildren) && !shared_esm_bundler_isArray(propsOrChildren)) {\r\n            // single vnode without props\r\n            if (runtime_core_esm_bundler_isVNode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]);\r\n            }\r\n            // props without children\r\n            return createVNode(type, propsOrChildren);\r\n        }\r\n        else {\r\n            // omit props\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }\r\n    else {\r\n        if (l > 3) {\r\n            children = Array.prototype.slice.call(arguments, 2);\r\n        }\r\n        else if (l === 3 && runtime_core_esm_bundler_isVNode(children)) {\r\n            children = [children];\r\n        }\r\n        return createVNode(type, propsOrChildren, children);\r\n    }\r\n}\n\nconst ssrContextKey = Symbol(( false) ? 0 : ``);\r\nconst useSSRContext = () => {\r\n    {\r\n        const ctx = runtime_core_esm_bundler_inject(ssrContextKey);\r\n        if (!ctx) {\r\n            runtime_core_esm_bundler_warn(`Server rendering context not provided. Make sure to only call ` +\r\n                `useSSRContext() conditionally in the server build.`);\r\n        }\r\n        return ctx;\r\n    }\r\n};\n\nfunction runtime_core_esm_bundler_isShallow(value) {\r\n    return !!(value && value["__v_isShallow" /* IS_SHALLOW */]);\r\n}\n\nfunction runtime_core_esm_bundler_initCustomFormatter() {\r\n    /* eslint-disable no-restricted-globals */\r\n    if (true) {\r\n        return;\r\n    }\r\n    const vueStyle = { style: \'color:#3ba776\' };\r\n    const numberStyle = { style: \'color:#0b1bc9\' };\r\n    const stringStyle = { style: \'color:#b62e24\' };\r\n    const keywordStyle = { style: \'color:#9d288c\' };\r\n    // custom formatter for Chrome\r\n    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html\r\n    const formatter = {\r\n        header(obj) {\r\n            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup\r\n            if (!shared_esm_bundler_isObject(obj)) {\r\n                return null;\r\n            }\r\n            if (obj.__isVue) {\r\n                return [\'div\', vueStyle, `VueInstance`];\r\n            }\r\n            else if (reactivity_esm_bundler_isRef(obj)) {\r\n                return [\r\n                    \'div\',\r\n                    {},\r\n                    [\'span\', vueStyle, genRefFlag(obj)],\r\n                    \'<\',\r\n                    formatValue(obj.value),\r\n                    `>`\r\n                ];\r\n            }\r\n            else if (isReactive(obj)) {\r\n                return [\r\n                    \'div\',\r\n                    {},\r\n                    [\'span\', vueStyle, runtime_core_esm_bundler_isShallow(obj) ? \'ShallowReactive\' : \'Reactive\'],\r\n                    \'<\',\r\n                    formatValue(obj),\r\n                    `>${isReadonly(obj) ? ` (readonly)` : ``}`\r\n                ];\r\n            }\r\n            else if (isReadonly(obj)) {\r\n                return [\r\n                    \'div\',\r\n                    {},\r\n                    [\'span\', vueStyle, runtime_core_esm_bundler_isShallow(obj) ? \'ShallowReadonly\' : \'Readonly\'],\r\n                    \'<\',\r\n                    formatValue(obj),\r\n                    \'>\'\r\n                ];\r\n            }\r\n            return null;\r\n        },\r\n        hasBody(obj) {\r\n            return obj && obj.__isVue;\r\n        },\r\n        body(obj) {\r\n            if (obj && obj.__isVue) {\r\n                return [\r\n                    \'div\',\r\n                    {},\r\n                    ...formatInstance(obj.$)\r\n                ];\r\n            }\r\n        }\r\n    };\r\n    function formatInstance(instance) {\r\n        const blocks = [];\r\n        if (instance.type.props && instance.props) {\r\n            blocks.push(createInstanceBlock(\'props\', reactivity_esm_bundler_toRaw(instance.props)));\r\n        }\r\n        if (instance.setupState !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock(\'setup\', instance.setupState));\r\n        }\r\n        if (instance.data !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock(\'data\', reactivity_esm_bundler_toRaw(instance.data)));\r\n        }\r\n        const computed = extractKeys(instance, \'computed\');\r\n        if (computed) {\r\n            blocks.push(createInstanceBlock(\'computed\', computed));\r\n        }\r\n        const injected = extractKeys(instance, \'inject\');\r\n        if (injected) {\r\n            blocks.push(createInstanceBlock(\'injected\', injected));\r\n        }\r\n        blocks.push([\r\n            \'div\',\r\n            {},\r\n            [\r\n                \'span\',\r\n                {\r\n                    style: keywordStyle.style + \';opacity:0.66\'\r\n                },\r\n                \'$ (internal): \'\r\n            ],\r\n            [\'object\', { object: instance }]\r\n        ]);\r\n        return blocks;\r\n    }\r\n    function createInstanceBlock(type, target) {\r\n        target = shared_esm_bundler_extend({}, target);\r\n        if (!Object.keys(target).length) {\r\n            return [\'span\', {}];\r\n        }\r\n        return [\r\n            \'div\',\r\n            { style: \'line-height:1.25em;margin-bottom:0.6em\' },\r\n            [\r\n                \'div\',\r\n                {\r\n                    style: \'color:#476582\'\r\n                },\r\n                type\r\n            ],\r\n            [\r\n                \'div\',\r\n                {\r\n                    style: \'padding-left:1.25em\'\r\n                },\r\n                ...Object.keys(target).map(key => {\r\n                    return [\r\n                        \'div\',\r\n                        {},\r\n                        [\'span\', keywordStyle, key + \': \'],\r\n                        formatValue(target[key], false)\r\n                    ];\r\n                })\r\n            ]\r\n        ];\r\n    }\r\n    function formatValue(v, asRaw = true) {\r\n        if (typeof v === \'number\') {\r\n            return [\'span\', numberStyle, v];\r\n        }\r\n        else if (typeof v === \'string\') {\r\n            return [\'span\', stringStyle, JSON.stringify(v)];\r\n        }\r\n        else if (typeof v === \'boolean\') {\r\n            return [\'span\', keywordStyle, v];\r\n        }\r\n        else if (shared_esm_bundler_isObject(v)) {\r\n            return [\'object\', { object: asRaw ? reactivity_esm_bundler_toRaw(v) : v }];\r\n        }\r\n        else {\r\n            return [\'span\', stringStyle, String(v)];\r\n        }\r\n    }\r\n    function extractKeys(instance, type) {\r\n        const Comp = instance.type;\r\n        if (shared_esm_bundler_isFunction(Comp)) {\r\n            return;\r\n        }\r\n        const extracted = {};\r\n        for (const key in instance.ctx) {\r\n            if (isKeyOfType(Comp, key, type)) {\r\n                extracted[key] = instance.ctx[key];\r\n            }\r\n        }\r\n        return extracted;\r\n    }\r\n    function isKeyOfType(Comp, key, type) {\r\n        const opts = Comp[type];\r\n        if ((shared_esm_bundler_isArray(opts) && opts.includes(key)) ||\r\n            (shared_esm_bundler_isObject(opts) && key in opts)) {\r\n            return true;\r\n        }\r\n        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {\r\n            return true;\r\n        }\r\n        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {\r\n            return true;\r\n        }\r\n    }\r\n    function genRefFlag(v) {\r\n        if (runtime_core_esm_bundler_isShallow(v)) {\r\n            return `ShallowRef`;\r\n        }\r\n        if (v.effect) {\r\n            return `ComputedRef`;\r\n        }\r\n        return `Ref`;\r\n    }\r\n    if (window.devtoolsFormatters) {\r\n        window.devtoolsFormatters.push(formatter);\r\n    }\r\n    else {\r\n        window.devtoolsFormatters = [formatter];\r\n    }\r\n}\n\nfunction withMemo(memo, render, cache, index) {\r\n    const cached = cache[index];\r\n    if (cached && isMemoSame(cached, memo)) {\r\n        return cached;\r\n    }\r\n    const ret = render();\r\n    // shallow clone\r\n    ret.memo = memo.slice();\r\n    return (cache[index] = ret);\r\n}\r\nfunction isMemoSame(cached, memo) {\r\n    const prev = cached.memo;\r\n    if (prev.length != memo.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < prev.length; i++) {\r\n        if (prev[i] !== memo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    // make sure to let parent block track it when returning cached\r\n    if (isBlockTreeEnabled > 0 && currentBlock) {\r\n        currentBlock.push(cached);\r\n    }\r\n    return true;\r\n}\n\n// Core API ------------------------------------------------------------------\r\nconst version = "3.2.31";\r\nconst _ssrUtils = {\r\n    createComponentInstance,\r\n    setupComponent,\r\n    renderComponentRoot,\r\n    setCurrentRenderingInstance,\r\n    isVNode: runtime_core_esm_bundler_isVNode,\r\n    normalizeVNode\r\n};\r\n/**\r\n * SSR utils for \\@vue/server-renderer. Only exposed in cjs builds.\r\n * @internal\r\n */\r\nconst ssrUtils = (_ssrUtils );\r\n/**\r\n * @internal only exposed in compat builds\r\n */\r\nconst resolveFilter = null;\r\n/**\r\n * @internal only exposed in compat builds.\r\n */\r\nconst compatUtils = (null);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\n\n\n\n\nconst svgNS = \'http://www.w3.org/2000/svg\';\r\nconst doc = (typeof document !== \'undefined\' ? document : null);\r\nconst templateContainer = doc && doc.createElement(\'template\');\r\nconst nodeOps = {\r\n    insert: (child, parent, anchor) => {\r\n        parent.insertBefore(child, anchor || null);\r\n    },\r\n    remove: child => {\r\n        const parent = child.parentNode;\r\n        if (parent) {\r\n            parent.removeChild(child);\r\n        }\r\n    },\r\n    createElement: (tag, isSVG, is, props) => {\r\n        const el = isSVG\r\n            ? doc.createElementNS(svgNS, tag)\r\n            : doc.createElement(tag, is ? { is } : undefined);\r\n        if (tag === \'select\' && props && props.multiple != null) {\r\n            el.setAttribute(\'multiple\', props.multiple);\r\n        }\r\n        return el;\r\n    },\r\n    createText: text => doc.createTextNode(text),\r\n    createComment: text => doc.createComment(text),\r\n    setText: (node, text) => {\r\n        node.nodeValue = text;\r\n    },\r\n    setElementText: (el, text) => {\r\n        el.textContent = text;\r\n    },\r\n    parentNode: node => node.parentNode,\r\n    nextSibling: node => node.nextSibling,\r\n    querySelector: selector => doc.querySelector(selector),\r\n    setScopeId(el, id) {\r\n        el.setAttribute(id, \'\');\r\n    },\r\n    cloneNode(el) {\r\n        const cloned = el.cloneNode(true);\r\n        // #3072\r\n        // - in `patchDOMProp`, we store the actual value in the `el._value` property.\r\n        // - normally, elements using `:value` bindings will not be hoisted, but if\r\n        //   the bound value is a constant, e.g. `:value="true"` - they do get\r\n        //   hoisted.\r\n        // - in production, hoisted nodes are cloned when subsequent inserts, but\r\n        //   cloneNode() does not copy the custom property we attached.\r\n        // - This may need to account for other custom DOM properties we attach to\r\n        //   elements in addition to `_value` in the future.\r\n        if (`_value` in el) {\r\n            cloned._value = el._value;\r\n        }\r\n        return cloned;\r\n    },\r\n    // __UNSAFE__\r\n    // Reason: innerHTML.\r\n    // Static content here can only come from compiled templates.\r\n    // As long as the user only uses trusted templates, this is safe.\r\n    insertStaticContent(content, parent, anchor, isSVG, start, end) {\r\n        // <parent> before | first ... last | anchor </parent>\r\n        const before = anchor ? anchor.previousSibling : parent.lastChild;\r\n        // #5308 can only take cached path if:\r\n        // - has a single root node\r\n        // - nextSibling info is still available\r\n        if (start && (start === end || start.nextSibling)) {\r\n            // cached\r\n            while (true) {\r\n                parent.insertBefore(start.cloneNode(true), anchor);\r\n                if (start === end || !(start = start.nextSibling))\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            // fresh insert\r\n            templateContainer.innerHTML = isSVG ? `<svg>${content}</svg>` : content;\r\n            const template = templateContainer.content;\r\n            if (isSVG) {\r\n                // remove outer svg wrapper\r\n                const wrapper = template.firstChild;\r\n                while (wrapper.firstChild) {\r\n                    template.appendChild(wrapper.firstChild);\r\n                }\r\n                template.removeChild(wrapper);\r\n            }\r\n            parent.insertBefore(template, anchor);\r\n        }\r\n        return [\r\n            // first\r\n            before ? before.nextSibling : parent.firstChild,\r\n            // last\r\n            anchor ? anchor.previousSibling : parent.lastChild\r\n        ];\r\n    }\r\n};\n\n// compiler should normalize class + :class bindings on the same element\r\n// into a single binding [\'staticClass\', dynamic]\r\nfunction patchClass(el, value, isSVG) {\r\n    // directly setting className should be faster than setAttribute in theory\r\n    // if this is an element during a transition, take the temporary transition\r\n    // classes into account.\r\n    const transitionClasses = el._vtc;\r\n    if (transitionClasses) {\r\n        value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(\' \');\r\n    }\r\n    if (value == null) {\r\n        el.removeAttribute(\'class\');\r\n    }\r\n    else if (isSVG) {\r\n        el.setAttribute(\'class\', value);\r\n    }\r\n    else {\r\n        el.className = value;\r\n    }\r\n}\n\nfunction patchStyle(el, prev, next) {\r\n    const style = el.style;\r\n    const isCssString = shared_esm_bundler_isString(next);\r\n    if (next && !isCssString) {\r\n        for (const key in next) {\r\n            setStyle(style, key, next[key]);\r\n        }\r\n        if (prev && !shared_esm_bundler_isString(prev)) {\r\n            for (const key in prev) {\r\n                if (next[key] == null) {\r\n                    setStyle(style, key, \'\');\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        const currentDisplay = style.display;\r\n        if (isCssString) {\r\n            if (prev !== next) {\r\n                style.cssText = next;\r\n            }\r\n        }\r\n        else if (prev) {\r\n            el.removeAttribute(\'style\');\r\n        }\r\n        // indicates that the `display` of the element is controlled by `v-show`,\r\n        // so we always keep the current `display` value regardless of the `style`\r\n        // value, thus handing over control to `v-show`.\r\n        if (\'_vod\' in el) {\r\n            style.display = currentDisplay;\r\n        }\r\n    }\r\n}\r\nconst importantRE = /\\s*!important$/;\r\nfunction setStyle(style, name, val) {\r\n    if (shared_esm_bundler_isArray(val)) {\r\n        val.forEach(v => setStyle(style, name, v));\r\n    }\r\n    else {\r\n        if (name.startsWith(\'--\')) {\r\n            // custom property definition\r\n            style.setProperty(name, val);\r\n        }\r\n        else {\r\n            const prefixed = autoPrefix(style, name);\r\n            if (importantRE.test(val)) {\r\n                // !important\r\n                style.setProperty(shared_esm_bundler_hyphenate(prefixed), val.replace(importantRE, \'\'), \'important\');\r\n            }\r\n            else {\r\n                style[prefixed] = val;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst prefixes = [\'Webkit\', \'Moz\', \'ms\'];\r\nconst prefixCache = {};\r\nfunction autoPrefix(style, rawName) {\r\n    const cached = prefixCache[rawName];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    let name = shared_esm_bundler_camelize(rawName);\r\n    if (name !== \'filter\' && name in style) {\r\n        return (prefixCache[rawName] = name);\r\n    }\r\n    name = shared_esm_bundler_capitalize(name);\r\n    for (let i = 0; i < prefixes.length; i++) {\r\n        const prefixed = prefixes[i] + name;\r\n        if (prefixed in style) {\r\n            return (prefixCache[rawName] = prefixed);\r\n        }\r\n    }\r\n    return rawName;\r\n}\n\nconst xlinkNS = \'http://www.w3.org/1999/xlink\';\r\nfunction patchAttr(el, key, value, isSVG, instance) {\r\n    if (isSVG && key.startsWith(\'xlink:\')) {\r\n        if (value == null) {\r\n            el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\r\n        }\r\n        else {\r\n            el.setAttributeNS(xlinkNS, key, value);\r\n        }\r\n    }\r\n    else {\r\n        // note we are only checking boolean attributes that don\'t have a\r\n        // corresponding dom prop of the same name here.\r\n        const isBoolean = isSpecialBooleanAttr(key);\r\n        if (value == null || (isBoolean && !includeBooleanAttr(value))) {\r\n            el.removeAttribute(key);\r\n        }\r\n        else {\r\n            el.setAttribute(key, isBoolean ? \'\' : value);\r\n        }\r\n    }\r\n}\n\n// __UNSAFE__\r\n// functions. The user is responsible for using them with only trusted content.\r\nfunction patchDOMProp(el, key, value, \r\n// the following args are passed only due to potential innerHTML/textContent\r\n// overriding existing VNodes, in which case the old tree must be properly\r\n// unmounted.\r\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\r\n    if (key === \'innerHTML\' || key === \'textContent\') {\r\n        if (prevChildren) {\r\n            unmountChildren(prevChildren, parentComponent, parentSuspense);\r\n        }\r\n        el[key] = value == null ? \'\' : value;\r\n        return;\r\n    }\r\n    if (key === \'value\' &&\r\n        el.tagName !== \'PROGRESS\' &&\r\n        // custom elements may use _value internally\r\n        !el.tagName.includes(\'-\')) {\r\n        // store value as _value as well since\r\n        // non-string values will be stringified.\r\n        el._value = value;\r\n        const newValue = value == null ? \'\' : value;\r\n        if (el.value !== newValue ||\r\n            // #4956: always set for OPTION elements because its value falls back to\r\n            // textContent if no value attribute is present. And setting .value for\r\n            // OPTION has no side effect\r\n            el.tagName === \'OPTION\') {\r\n            el.value = newValue;\r\n        }\r\n        if (value == null) {\r\n            el.removeAttribute(key);\r\n        }\r\n        return;\r\n    }\r\n    if (value === \'\' || value == null) {\r\n        const type = typeof el[key];\r\n        if (type === \'boolean\') {\r\n            // e.g. <select multiple> compiles to { multiple: \'\' }\r\n            el[key] = includeBooleanAttr(value);\r\n            return;\r\n        }\r\n        else if (value == null && type === \'string\') {\r\n            // e.g. <div :id="null">\r\n            el[key] = \'\';\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n        else if (type === \'number\') {\r\n            // e.g. <img :width="null">\r\n            // the value of some IDL attr must be greater than 0, e.g. input.size = 0 -> error\r\n            try {\r\n                el[key] = 0;\r\n            }\r\n            catch (_a) { }\r\n            el.removeAttribute(key);\r\n            return;\r\n        }\r\n    }\r\n    // some properties perform value validation and throw\r\n    try {\r\n        el[key] = value;\r\n    }\r\n    catch (e) {\r\n        if ((false)) {}\r\n    }\r\n}\n\n// Async edge case fix requires storing an event listener\'s attach timestamp.\r\nlet _getNow = Date.now;\r\nlet skipTimestampCheck = false;\r\nif (typeof window !== \'undefined\') {\r\n    // Determine what event timestamp the browser is using. Annoyingly, the\r\n    // timestamp can either be hi-res (relative to page load) or low-res\r\n    // (relative to UNIX epoch), so in order to compare time we have to use the\r\n    // same timestamp type when saving the flush timestamp.\r\n    if (_getNow() > document.createEvent(\'Event\').timeStamp) {\r\n        // if the low-res timestamp which is bigger than the event timestamp\r\n        // (which is evaluated AFTER) it means the event is using a hi-res timestamp,\r\n        // and we need to use the hi-res version for event listeners as well.\r\n        _getNow = () => performance.now();\r\n    }\r\n    // #3485: Firefox <= 53 has incorrect Event.timeStamp implementation\r\n    // and does not fire microtasks in between event propagation, so safe to exclude.\r\n    const ffMatch = navigator.userAgent.match(/firefox\\/(\\d+)/i);\r\n    skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);\r\n}\r\n// To avoid the overhead of repeatedly calling performance.now(), we cache\r\n// and use the same timestamp for all event listeners attached in the same tick.\r\nlet cachedNow = 0;\r\nconst p = Promise.resolve();\r\nconst runtime_dom_esm_bundler_reset = () => {\r\n    cachedNow = 0;\r\n};\r\nconst getNow = () => cachedNow || (p.then(runtime_dom_esm_bundler_reset), (cachedNow = _getNow()));\r\nfunction addEventListener(el, event, handler, options) {\r\n    el.addEventListener(event, handler, options);\r\n}\r\nfunction removeEventListener(el, event, handler, options) {\r\n    el.removeEventListener(event, handler, options);\r\n}\r\nfunction patchEvent(el, rawName, prevValue, nextValue, instance = null) {\r\n    // vei = vue event invokers\r\n    const invokers = el._vei || (el._vei = {});\r\n    const existingInvoker = invokers[rawName];\r\n    if (nextValue && existingInvoker) {\r\n        // patch\r\n        existingInvoker.value = nextValue;\r\n    }\r\n    else {\r\n        const [name, options] = parseName(rawName);\r\n        if (nextValue) {\r\n            // add\r\n            const invoker = (invokers[rawName] = createInvoker(nextValue, instance));\r\n            addEventListener(el, name, invoker, options);\r\n        }\r\n        else if (existingInvoker) {\r\n            // remove\r\n            removeEventListener(el, name, existingInvoker, options);\r\n            invokers[rawName] = undefined;\r\n        }\r\n    }\r\n}\r\nconst optionsModifierRE = /(?:Once|Passive|Capture)$/;\r\nfunction parseName(name) {\r\n    let options;\r\n    if (optionsModifierRE.test(name)) {\r\n        options = {};\r\n        let m;\r\n        while ((m = name.match(optionsModifierRE))) {\r\n            name = name.slice(0, name.length - m[0].length);\r\n            options[m[0].toLowerCase()] = true;\r\n        }\r\n    }\r\n    return [shared_esm_bundler_hyphenate(name.slice(2)), options];\r\n}\r\nfunction createInvoker(initialValue, instance) {\r\n    const invoker = (e) => {\r\n        // async edge case #6566: inner click event triggers patch, event handler\r\n        // attached to outer element during patch, and triggered again. This\r\n        // happens because browsers fire microtask ticks between event propagation.\r\n        // the solution is simple: we save the timestamp when a handler is attached,\r\n        // and the handler would only fire if the event passed to it was fired\r\n        // AFTER it was attached.\r\n        const timeStamp = e.timeStamp || _getNow();\r\n        if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {\r\n            callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5 /* NATIVE_EVENT_HANDLER */, [e]);\r\n        }\r\n    };\r\n    invoker.value = initialValue;\r\n    invoker.attached = getNow();\r\n    return invoker;\r\n}\r\nfunction patchStopImmediatePropagation(e, value) {\r\n    if (shared_esm_bundler_isArray(value)) {\r\n        const originalStop = e.stopImmediatePropagation;\r\n        e.stopImmediatePropagation = () => {\r\n            originalStop.call(e);\r\n            e._stopped = true;\r\n        };\r\n        return value.map(fn => (e) => !e._stopped && fn && fn(e));\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\n\nconst nativeOnRE = /^on[a-z]/;\r\nconst patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {\r\n    if (key === \'class\') {\r\n        patchClass(el, nextValue, isSVG);\r\n    }\r\n    else if (key === \'style\') {\r\n        patchStyle(el, prevValue, nextValue);\r\n    }\r\n    else if (isOn(key)) {\r\n        // ignore v-model listeners\r\n        if (!isModelListener(key)) {\r\n            patchEvent(el, key, prevValue, nextValue, parentComponent);\r\n        }\r\n    }\r\n    else if (key[0] === \'.\'\r\n        ? ((key = key.slice(1)), true)\r\n        : key[0] === \'^\'\r\n            ? ((key = key.slice(1)), false)\r\n            : shouldSetAsProp(el, key, nextValue, isSVG)) {\r\n        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\r\n    }\r\n    else {\r\n        // special case for <input v-model type="checkbox"> with\r\n        // :true-value & :false-value\r\n        // store value as dom properties since non-string values will be\r\n        // stringified.\r\n        if (key === \'true-value\') {\r\n            el._trueValue = nextValue;\r\n        }\r\n        else if (key === \'false-value\') {\r\n            el._falseValue = nextValue;\r\n        }\r\n        patchAttr(el, key, nextValue, isSVG);\r\n    }\r\n};\r\nfunction shouldSetAsProp(el, key, value, isSVG) {\r\n    if (isSVG) {\r\n        // most keys must be set as attribute on svg elements to work\r\n        // ...except innerHTML & textContent\r\n        if (key === \'innerHTML\' || key === \'textContent\') {\r\n            return true;\r\n        }\r\n        // or native onclick with function values\r\n        if (key in el && nativeOnRE.test(key) && shared_esm_bundler_isFunction(value)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    // spellcheck and draggable are numerated attrs, however their\r\n    // corresponding DOM properties are actually booleans - this leads to\r\n    // setting it with a string "false" value leading it to be coerced to\r\n    // `true`, so we need to always treat them as attributes.\r\n    // Note that `contentEditable` doesn\'t have this problem: its DOM\r\n    // property is also enumerated string values.\r\n    if (key === \'spellcheck\' || key === \'draggable\') {\r\n        return false;\r\n    }\r\n    // #1787, #2840 form property on form elements is readonly and must be set as\r\n    // attribute.\r\n    if (key === \'form\') {\r\n        return false;\r\n    }\r\n    // #1526 <input list> must be set as attribute\r\n    if (key === \'list\' && el.tagName === \'INPUT\') {\r\n        return false;\r\n    }\r\n    // #2766 <textarea type> must be set as attribute\r\n    if (key === \'type\' && el.tagName === \'TEXTAREA\') {\r\n        return false;\r\n    }\r\n    // native onclick with string value, must be set as attribute\r\n    if (nativeOnRE.test(key) && shared_esm_bundler_isString(value)) {\r\n        return false;\r\n    }\r\n    return key in el;\r\n}\n\nfunction defineCustomElement(options, hydate) {\r\n    const Comp = defineComponent(options);\r\n    class VueCustomElement extends VueElement {\r\n        constructor(initialProps) {\r\n            super(Comp, initialProps, hydate);\r\n        }\r\n    }\r\n    VueCustomElement.def = Comp;\r\n    return VueCustomElement;\r\n}\r\nconst defineSSRCustomElement = ((options) => {\r\n    // @ts-ignore\r\n    return defineCustomElement(options, hydrate);\r\n});\r\nconst BaseClass = (typeof HTMLElement !== \'undefined\' ? HTMLElement : class {\r\n});\r\nclass VueElement extends BaseClass {\r\n    constructor(_def, _props = {}, hydrate) {\r\n        super();\r\n        this._def = _def;\r\n        this._props = _props;\r\n        /**\r\n         * @internal\r\n         */\r\n        this._instance = null;\r\n        this._connected = false;\r\n        this._resolved = false;\r\n        this._numberProps = null;\r\n        if (this.shadowRoot && hydrate) {\r\n            hydrate(this._createVNode(), this.shadowRoot);\r\n        }\r\n        else {\r\n            if (false) {}\r\n            this.attachShadow({ mode: \'open\' });\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        this._connected = true;\r\n        if (!this._instance) {\r\n            this._resolveDef();\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        this._connected = false;\r\n        runtime_core_esm_bundler_nextTick(() => {\r\n            if (!this._connected) {\r\n                render(null, this.shadowRoot);\r\n                this._instance = null;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * resolve inner component definition (handle possible async component)\r\n     */\r\n    _resolveDef() {\r\n        if (this._resolved) {\r\n            return;\r\n        }\r\n        this._resolved = true;\r\n        // set initial attrs\r\n        for (let i = 0; i < this.attributes.length; i++) {\r\n            this._setAttr(this.attributes[i].name);\r\n        }\r\n        // watch future attr changes\r\n        new MutationObserver(mutations => {\r\n            for (const m of mutations) {\r\n                this._setAttr(m.attributeName);\r\n            }\r\n        }).observe(this, { attributes: true });\r\n        const resolve = (def) => {\r\n            const { props, styles } = def;\r\n            const hasOptions = !shared_esm_bundler_isArray(props);\r\n            const rawKeys = props ? (hasOptions ? Object.keys(props) : props) : [];\r\n            // cast Number-type props set before resolve\r\n            let numberProps;\r\n            if (hasOptions) {\r\n                for (const key in this._props) {\r\n                    const opt = props[key];\r\n                    if (opt === Number || (opt && opt.type === Number)) {\r\n                        this._props[key] = toNumber(this._props[key]);\r\n                        (numberProps || (numberProps = Object.create(null)))[key] = true;\r\n                    }\r\n                }\r\n            }\r\n            this._numberProps = numberProps;\r\n            // check if there are props set pre-upgrade or connect\r\n            for (const key of Object.keys(this)) {\r\n                if (key[0] !== \'_\') {\r\n                    this._setProp(key, this[key], true, false);\r\n                }\r\n            }\r\n            // defining getter/setters on prototype\r\n            for (const key of rawKeys.map(shared_esm_bundler_camelize)) {\r\n                Object.defineProperty(this, key, {\r\n                    get() {\r\n                        return this._getProp(key);\r\n                    },\r\n                    set(val) {\r\n                        this._setProp(key, val);\r\n                    }\r\n                });\r\n            }\r\n            // apply CSS\r\n            this._applyStyles(styles);\r\n            // initial render\r\n            this._update();\r\n        };\r\n        const asyncDef = this._def.__asyncLoader;\r\n        if (asyncDef) {\r\n            asyncDef().then(resolve);\r\n        }\r\n        else {\r\n            resolve(this._def);\r\n        }\r\n    }\r\n    _setAttr(key) {\r\n        let value = this.getAttribute(key);\r\n        if (this._numberProps && this._numberProps[key]) {\r\n            value = toNumber(value);\r\n        }\r\n        this._setProp(shared_esm_bundler_camelize(key), value, false);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _getProp(key) {\r\n        return this._props[key];\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    _setProp(key, val, shouldReflect = true, shouldUpdate = true) {\r\n        if (val !== this._props[key]) {\r\n            this._props[key] = val;\r\n            if (shouldUpdate && this._instance) {\r\n                this._update();\r\n            }\r\n            // reflect\r\n            if (shouldReflect) {\r\n                if (val === true) {\r\n                    this.setAttribute(shared_esm_bundler_hyphenate(key), \'\');\r\n                }\r\n                else if (typeof val === \'string\' || typeof val === \'number\') {\r\n                    this.setAttribute(shared_esm_bundler_hyphenate(key), val + \'\');\r\n                }\r\n                else if (!val) {\r\n                    this.removeAttribute(shared_esm_bundler_hyphenate(key));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _update() {\r\n        render(this._createVNode(), this.shadowRoot);\r\n    }\r\n    _createVNode() {\r\n        const vnode = createVNode(this._def, shared_esm_bundler_extend({}, this._props));\r\n        if (!this._instance) {\r\n            vnode.ce = instance => {\r\n                this._instance = instance;\r\n                instance.isCE = true;\r\n                // HMR\r\n                if ((false)) {}\r\n                // intercept emit\r\n                instance.emit = (event, ...args) => {\r\n                    this.dispatchEvent(new CustomEvent(event, {\r\n                        detail: args\r\n                    }));\r\n                };\r\n                // locate nearest Vue custom element parent for provide/inject\r\n                let parent = this;\r\n                while ((parent =\r\n                    parent && (parent.parentNode || parent.host))) {\r\n                    if (parent instanceof VueElement) {\r\n                        instance.parent = parent._instance;\r\n                        break;\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        return vnode;\r\n    }\r\n    _applyStyles(styles) {\r\n        if (styles) {\r\n            styles.forEach(css => {\r\n                const s = document.createElement(\'style\');\r\n                s.textContent = css;\r\n                this.shadowRoot.appendChild(s);\r\n                // record for HMR\r\n                if ((false)) {}\r\n            });\r\n        }\r\n    }\r\n}\n\nfunction useCssModule(name = \'$style\') {\r\n    /* istanbul ignore else */\r\n    {\r\n        const instance = runtime_core_esm_bundler_getCurrentInstance();\r\n        if (!instance) {\r\n            ( false) && 0;\r\n            return EMPTY_OBJ;\r\n        }\r\n        const modules = instance.type.__cssModules;\r\n        if (!modules) {\r\n            ( false) && 0;\r\n            return EMPTY_OBJ;\r\n        }\r\n        const mod = modules[name];\r\n        if (!mod) {\r\n            ( false) &&\r\n                0;\r\n            return EMPTY_OBJ;\r\n        }\r\n        return mod;\r\n    }\r\n}\n\n/**\r\n * Runtime helper for SFC\'s CSS variable injection feature.\r\n * @private\r\n */\r\nfunction useCssVars(getter) {\r\n    const instance = runtime_core_esm_bundler_getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!instance) {\r\n        ( false) &&\r\n            0;\r\n        return;\r\n    }\r\n    const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));\r\n    watchPostEffect(setVars);\r\n    runtime_core_esm_bundler_onMounted(() => {\r\n        const ob = new MutationObserver(setVars);\r\n        ob.observe(instance.subTree.el.parentNode, { childList: true });\r\n        runtime_core_esm_bundler_onUnmounted(() => ob.disconnect());\r\n    });\r\n}\r\nfunction setVarsOnVNode(vnode, vars) {\r\n    if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        const suspense = vnode.suspense;\r\n        vnode = suspense.activeBranch;\r\n        if (suspense.pendingBranch && !suspense.isHydrating) {\r\n            suspense.effects.push(() => {\r\n                setVarsOnVNode(suspense.activeBranch, vars);\r\n            });\r\n        }\r\n    }\r\n    // drill down HOCs until it\'s a non-component vnode\r\n    while (vnode.component) {\r\n        vnode = vnode.component.subTree;\r\n    }\r\n    if (vnode.shapeFlag & 1 /* ELEMENT */ && vnode.el) {\r\n        setVarsOnNode(vnode.el, vars);\r\n    }\r\n    else if (vnode.type === runtime_core_esm_bundler_Fragment) {\r\n        vnode.children.forEach(c => setVarsOnVNode(c, vars));\r\n    }\r\n    else if (vnode.type === Static) {\r\n        let { el, anchor } = vnode;\r\n        while (el) {\r\n            setVarsOnNode(el, vars);\r\n            if (el === anchor)\r\n                break;\r\n            el = el.nextSibling;\r\n        }\r\n    }\r\n}\r\nfunction setVarsOnNode(el, vars) {\r\n    if (el.nodeType === 1) {\r\n        const style = el.style;\r\n        for (const key in vars) {\r\n            style.setProperty(`--${key}`, vars[key]);\r\n        }\r\n    }\r\n}\n\nconst TRANSITION = \'transition\';\r\nconst ANIMATION = \'animation\';\r\n// DOM Transition is a higher-order-component based on the platform-agnostic\r\n// base Transition component, with DOM-specific logic.\r\nconst Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);\r\nTransition.displayName = \'Transition\';\r\nconst DOMTransitionPropsValidators = {\r\n    name: String,\r\n    type: String,\r\n    css: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n    duration: [String, Number, Object],\r\n    enterFromClass: String,\r\n    enterActiveClass: String,\r\n    enterToClass: String,\r\n    appearFromClass: String,\r\n    appearActiveClass: String,\r\n    appearToClass: String,\r\n    leaveFromClass: String,\r\n    leaveActiveClass: String,\r\n    leaveToClass: String\r\n};\r\nconst TransitionPropsValidators = (Transition.props =\r\n    /*#__PURE__*/ shared_esm_bundler_extend({}, BaseTransition.props, DOMTransitionPropsValidators));\r\n/**\r\n * #3227 Incoming hooks may be merged into arrays when wrapping Transition\r\n * with custom HOCs.\r\n */\r\nconst runtime_dom_esm_bundler_callHook = (hook, args = []) => {\r\n    if (shared_esm_bundler_isArray(hook)) {\r\n        hook.forEach(h => h(...args));\r\n    }\r\n    else if (hook) {\r\n        hook(...args);\r\n    }\r\n};\r\n/**\r\n * Check if a hook expects a callback (2nd arg), which means the user\r\n * intends to explicitly control the end of the transition.\r\n */\r\nconst hasExplicitCallback = (hook) => {\r\n    return hook\r\n        ? shared_esm_bundler_isArray(hook)\r\n            ? hook.some(h => h.length > 1)\r\n            : hook.length > 1\r\n        : false;\r\n};\r\nfunction resolveTransitionProps(rawProps) {\r\n    const baseProps = {};\r\n    for (const key in rawProps) {\r\n        if (!(key in DOMTransitionPropsValidators)) {\r\n            baseProps[key] = rawProps[key];\r\n        }\r\n    }\r\n    if (rawProps.css === false) {\r\n        return baseProps;\r\n    }\r\n    const { name = \'v\', type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;\r\n    const durations = normalizeDuration(duration);\r\n    const enterDuration = durations && durations[0];\r\n    const leaveDuration = durations && durations[1];\r\n    const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;\r\n    const finishEnter = (el, isAppear, done) => {\r\n        removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n        removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\r\n        done && done();\r\n    };\r\n    const finishLeave = (el, done) => {\r\n        removeTransitionClass(el, leaveToClass);\r\n        removeTransitionClass(el, leaveActiveClass);\r\n        done && done();\r\n    };\r\n    const makeEnterHook = (isAppear) => {\r\n        return (el, done) => {\r\n            const hook = isAppear ? onAppear : onEnter;\r\n            const resolve = () => finishEnter(el, isAppear, done);\r\n            runtime_dom_esm_bundler_callHook(hook, [el, resolve]);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\r\n                addTransitionClass(el, isAppear ? appearToClass : enterToClass);\r\n                if (!hasExplicitCallback(hook)) {\r\n                    whenTransitionEnds(el, type, enterDuration, resolve);\r\n                }\r\n            });\r\n        };\r\n    };\r\n    return shared_esm_bundler_extend(baseProps, {\r\n        onBeforeEnter(el) {\r\n            runtime_dom_esm_bundler_callHook(onBeforeEnter, [el]);\r\n            addTransitionClass(el, enterFromClass);\r\n            addTransitionClass(el, enterActiveClass);\r\n        },\r\n        onBeforeAppear(el) {\r\n            runtime_dom_esm_bundler_callHook(onBeforeAppear, [el]);\r\n            addTransitionClass(el, appearFromClass);\r\n            addTransitionClass(el, appearActiveClass);\r\n        },\r\n        onEnter: makeEnterHook(false),\r\n        onAppear: makeEnterHook(true),\r\n        onLeave(el, done) {\r\n            const resolve = () => finishLeave(el, done);\r\n            addTransitionClass(el, leaveFromClass);\r\n            // force reflow so *-leave-from classes immediately take effect (#2593)\r\n            forceReflow();\r\n            addTransitionClass(el, leaveActiveClass);\r\n            nextFrame(() => {\r\n                removeTransitionClass(el, leaveFromClass);\r\n                addTransitionClass(el, leaveToClass);\r\n                if (!hasExplicitCallback(onLeave)) {\r\n                    whenTransitionEnds(el, type, leaveDuration, resolve);\r\n                }\r\n            });\r\n            runtime_dom_esm_bundler_callHook(onLeave, [el, resolve]);\r\n        },\r\n        onEnterCancelled(el) {\r\n            finishEnter(el, false);\r\n            runtime_dom_esm_bundler_callHook(onEnterCancelled, [el]);\r\n        },\r\n        onAppearCancelled(el) {\r\n            finishEnter(el, true);\r\n            runtime_dom_esm_bundler_callHook(onAppearCancelled, [el]);\r\n        },\r\n        onLeaveCancelled(el) {\r\n            finishLeave(el);\r\n            runtime_dom_esm_bundler_callHook(onLeaveCancelled, [el]);\r\n        }\r\n    });\r\n}\r\nfunction normalizeDuration(duration) {\r\n    if (duration == null) {\r\n        return null;\r\n    }\r\n    else if (shared_esm_bundler_isObject(duration)) {\r\n        return [NumberOf(duration.enter), NumberOf(duration.leave)];\r\n    }\r\n    else {\r\n        const n = NumberOf(duration);\r\n        return [n, n];\r\n    }\r\n}\r\nfunction NumberOf(val) {\r\n    const res = toNumber(val);\r\n    if ((false))\r\n        {}\r\n    return res;\r\n}\r\nfunction validateDuration(val) {\r\n    if (typeof val !== \'number\') {\r\n        warn(`<transition> explicit duration is not a valid number - ` +\r\n            `got ${JSON.stringify(val)}.`);\r\n    }\r\n    else if (isNaN(val)) {\r\n        warn(`<transition> explicit duration is NaN - ` +\r\n            \'the duration expression might be incorrect.\');\r\n    }\r\n}\r\nfunction addTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.add(c));\r\n    (el._vtc ||\r\n        (el._vtc = new Set())).add(cls);\r\n}\r\nfunction removeTransitionClass(el, cls) {\r\n    cls.split(/\\s+/).forEach(c => c && el.classList.remove(c));\r\n    const { _vtc } = el;\r\n    if (_vtc) {\r\n        _vtc.delete(cls);\r\n        if (!_vtc.size) {\r\n            el._vtc = undefined;\r\n        }\r\n    }\r\n}\r\nfunction nextFrame(cb) {\r\n    requestAnimationFrame(() => {\r\n        requestAnimationFrame(cb);\r\n    });\r\n}\r\nlet endId = 0;\r\nfunction whenTransitionEnds(el, expectedType, explicitTimeout, resolve) {\r\n    const id = (el._endId = ++endId);\r\n    const resolveIfNotStale = () => {\r\n        if (id === el._endId) {\r\n            resolve();\r\n        }\r\n    };\r\n    if (explicitTimeout) {\r\n        return setTimeout(resolveIfNotStale, explicitTimeout);\r\n    }\r\n    const { type, timeout, propCount } = getTransitionInfo(el, expectedType);\r\n    if (!type) {\r\n        return resolve();\r\n    }\r\n    const endEvent = type + \'end\';\r\n    let ended = 0;\r\n    const end = () => {\r\n        el.removeEventListener(endEvent, onEnd);\r\n        resolveIfNotStale();\r\n    };\r\n    const onEnd = (e) => {\r\n        if (e.target === el && ++ended >= propCount) {\r\n            end();\r\n        }\r\n    };\r\n    setTimeout(() => {\r\n        if (ended < propCount) {\r\n            end();\r\n        }\r\n    }, timeout + 1);\r\n    el.addEventListener(endEvent, onEnd);\r\n}\r\nfunction getTransitionInfo(el, expectedType) {\r\n    const styles = window.getComputedStyle(el);\r\n    // JSDOM may return undefined for transition properties\r\n    const getStyleProperties = (key) => (styles[key] || \'\').split(\', \');\r\n    const transitionDelays = getStyleProperties(TRANSITION + \'Delay\');\r\n    const transitionDurations = getStyleProperties(TRANSITION + \'Duration\');\r\n    const transitionTimeout = getTimeout(transitionDelays, transitionDurations);\r\n    const animationDelays = getStyleProperties(ANIMATION + \'Delay\');\r\n    const animationDurations = getStyleProperties(ANIMATION + \'Duration\');\r\n    const animationTimeout = getTimeout(animationDelays, animationDurations);\r\n    let type = null;\r\n    let timeout = 0;\r\n    let propCount = 0;\r\n    /* istanbul ignore if */\r\n    if (expectedType === TRANSITION) {\r\n        if (transitionTimeout > 0) {\r\n            type = TRANSITION;\r\n            timeout = transitionTimeout;\r\n            propCount = transitionDurations.length;\r\n        }\r\n    }\r\n    else if (expectedType === ANIMATION) {\r\n        if (animationTimeout > 0) {\r\n            type = ANIMATION;\r\n            timeout = animationTimeout;\r\n            propCount = animationDurations.length;\r\n        }\r\n    }\r\n    else {\r\n        timeout = Math.max(transitionTimeout, animationTimeout);\r\n        type =\r\n            timeout > 0\r\n                ? transitionTimeout > animationTimeout\r\n                    ? TRANSITION\r\n                    : ANIMATION\r\n                : null;\r\n        propCount = type\r\n            ? type === TRANSITION\r\n                ? transitionDurations.length\r\n                : animationDurations.length\r\n            : 0;\r\n    }\r\n    const hasTransform = type === TRANSITION &&\r\n        /\\b(transform|all)(,|$)/.test(styles[TRANSITION + \'Property\']);\r\n    return {\r\n        type,\r\n        timeout,\r\n        propCount,\r\n        hasTransform\r\n    };\r\n}\r\nfunction getTimeout(delays, durations) {\r\n    while (delays.length < durations.length) {\r\n        delays = delays.concat(delays);\r\n    }\r\n    return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));\r\n}\r\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer\r\n// numbers in a locale-dependent way, using a comma instead of a dot.\r\n// If comma is not replaced with a dot, the input will be rounded down\r\n// (i.e. acting as a floor function) causing unexpected behaviors\r\nfunction toMs(s) {\r\n    return Number(s.slice(0, -1).replace(\',\', \'.\')) * 1000;\r\n}\r\n// synchronously force layout to put elements into a certain state\r\nfunction forceReflow() {\r\n    return document.body.offsetHeight;\r\n}\n\nconst positionMap = new WeakMap();\r\nconst newPositionMap = new WeakMap();\r\nconst TransitionGroupImpl = {\r\n    name: \'TransitionGroup\',\r\n    props: /*#__PURE__*/ shared_esm_bundler_extend({}, TransitionPropsValidators, {\r\n        tag: String,\r\n        moveClass: String\r\n    }),\r\n    setup(props, { slots }) {\r\n        const instance = runtime_core_esm_bundler_getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevChildren;\r\n        let children;\r\n        runtime_core_esm_bundler_onUpdated(() => {\r\n            // children is guaranteed to exist after initial render\r\n            if (!prevChildren.length) {\r\n                return;\r\n            }\r\n            const moveClass = props.moveClass || `${props.name || \'v\'}-move`;\r\n            if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\r\n                return;\r\n            }\r\n            // we divide the work into three loops to avoid mixing DOM reads and writes\r\n            // in each iteration - which helps prevent layout thrashing.\r\n            prevChildren.forEach(callPendingCbs);\r\n            prevChildren.forEach(recordPosition);\r\n            const movedChildren = prevChildren.filter(applyTranslation);\r\n            // force reflow to put everything in position\r\n            forceReflow();\r\n            movedChildren.forEach(c => {\r\n                const el = c.el;\r\n                const style = el.style;\r\n                addTransitionClass(el, moveClass);\r\n                style.transform = style.webkitTransform = style.transitionDuration = \'\';\r\n                const cb = (el._moveCb = (e) => {\r\n                    if (e && e.target !== el) {\r\n                        return;\r\n                    }\r\n                    if (!e || /transform$/.test(e.propertyName)) {\r\n                        el.removeEventListener(\'transitionend\', cb);\r\n                        el._moveCb = null;\r\n                        removeTransitionClass(el, moveClass);\r\n                    }\r\n                });\r\n                el.addEventListener(\'transitionend\', cb);\r\n            });\r\n        });\r\n        return () => {\r\n            const rawProps = reactivity_esm_bundler_toRaw(props);\r\n            const cssTransitionProps = resolveTransitionProps(rawProps);\r\n            let tag = rawProps.tag || runtime_core_esm_bundler_Fragment;\r\n            prevChildren = children;\r\n            children = slots.default ? getTransitionRawChildren(slots.default()) : [];\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (child.key != null) {\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                }\r\n                else if ((false)) {}\r\n            }\r\n            if (prevChildren) {\r\n                for (let i = 0; i < prevChildren.length; i++) {\r\n                    const child = prevChildren[i];\r\n                    setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));\r\n                    positionMap.set(child, child.el.getBoundingClientRect());\r\n                }\r\n            }\r\n            return createVNode(tag, null, children);\r\n        };\r\n    }\r\n};\r\nconst TransitionGroup = TransitionGroupImpl;\r\nfunction callPendingCbs(c) {\r\n    const el = c.el;\r\n    if (el._moveCb) {\r\n        el._moveCb();\r\n    }\r\n    if (el._enterCb) {\r\n        el._enterCb();\r\n    }\r\n}\r\nfunction recordPosition(c) {\r\n    newPositionMap.set(c, c.el.getBoundingClientRect());\r\n}\r\nfunction applyTranslation(c) {\r\n    const oldPos = positionMap.get(c);\r\n    const newPos = newPositionMap.get(c);\r\n    const dx = oldPos.left - newPos.left;\r\n    const dy = oldPos.top - newPos.top;\r\n    if (dx || dy) {\r\n        const s = c.el.style;\r\n        s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;\r\n        s.transitionDuration = \'0s\';\r\n        return c;\r\n    }\r\n}\r\nfunction hasCSSTransform(el, root, moveClass) {\r\n    // Detect whether an element with the move class applied has\r\n    // CSS transitions. Since the element may be inside an entering\r\n    // transition at this very moment, we make a clone of it and remove\r\n    // all other transition classes applied to ensure only the move class\r\n    // is applied.\r\n    const clone = el.cloneNode();\r\n    if (el._vtc) {\r\n        el._vtc.forEach(cls => {\r\n            cls.split(/\\s+/).forEach(c => c && clone.classList.remove(c));\r\n        });\r\n    }\r\n    moveClass.split(/\\s+/).forEach(c => c && clone.classList.add(c));\r\n    clone.style.display = \'none\';\r\n    const container = (root.nodeType === 1 ? root : root.parentNode);\r\n    container.appendChild(clone);\r\n    const { hasTransform } = getTransitionInfo(clone);\r\n    container.removeChild(clone);\r\n    return hasTransform;\r\n}\n\nconst getModelAssigner = (vnode) => {\r\n    const fn = vnode.props[\'onUpdate:modelValue\'];\r\n    return shared_esm_bundler_isArray(fn) ? value => invokeArrayFns(fn, value) : fn;\r\n};\r\nfunction onCompositionStart(e) {\r\n    e.target.composing = true;\r\n}\r\nfunction onCompositionEnd(e) {\r\n    const target = e.target;\r\n    if (target.composing) {\r\n        target.composing = false;\r\n        runtime_dom_esm_bundler_trigger(target, \'input\');\r\n    }\r\n}\r\nfunction runtime_dom_esm_bundler_trigger(el, type) {\r\n    const e = document.createEvent(\'HTMLEvents\');\r\n    e.initEvent(type, true, true);\r\n    el.dispatchEvent(e);\r\n}\r\n// We are exporting the v-model runtime directly as vnode hooks so that it can\r\n// be tree-shaken in case v-model is never used.\r\nconst vModelText = {\r\n    created(el, { modifiers: { lazy, trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        const castToNumber = number || (vnode.props && vnode.props.type === \'number\');\r\n        addEventListener(el, lazy ? \'change\' : \'input\', e => {\r\n            if (e.target.composing)\r\n                return;\r\n            let domValue = el.value;\r\n            if (trim) {\r\n                domValue = domValue.trim();\r\n            }\r\n            else if (castToNumber) {\r\n                domValue = toNumber(domValue);\r\n            }\r\n            el._assign(domValue);\r\n        });\r\n        if (trim) {\r\n            addEventListener(el, \'change\', () => {\r\n                el.value = el.value.trim();\r\n            });\r\n        }\r\n        if (!lazy) {\r\n            addEventListener(el, \'compositionstart\', onCompositionStart);\r\n            addEventListener(el, \'compositionend\', onCompositionEnd);\r\n            // Safari < 10.2 & UIWebView doesn\'t fire compositionend when\r\n            // switching focus before confirming composition choice\r\n            // this also fixes the issue where some browsers e.g. iOS Chrome\r\n            // fires "change" instead of "input" on autocomplete.\r\n            addEventListener(el, \'change\', onCompositionEnd);\r\n        }\r\n    },\r\n    // set value on mounted so it\'s after min/max for type="range"\r\n    mounted(el, { value }) {\r\n        el.value = value == null ? \'\' : value;\r\n    },\r\n    beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        // avoid clearing unresolved text. #2302\r\n        if (el.composing)\r\n            return;\r\n        if (document.activeElement === el) {\r\n            if (lazy) {\r\n                return;\r\n            }\r\n            if (trim && el.value.trim() === value) {\r\n                return;\r\n            }\r\n            if ((number || el.type === \'number\') && toNumber(el.value) === value) {\r\n                return;\r\n            }\r\n        }\r\n        const newValue = value == null ? \'\' : value;\r\n        if (el.value !== newValue) {\r\n            el.value = newValue;\r\n        }\r\n    }\r\n};\r\nconst vModelCheckbox = {\r\n    // #4096 array checkboxes need to be deep traversed\r\n    deep: true,\r\n    created(el, _, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, \'change\', () => {\r\n            const modelValue = el._modelValue;\r\n            const elementValue = getValue(el);\r\n            const checked = el.checked;\r\n            const assign = el._assign;\r\n            if (shared_esm_bundler_isArray(modelValue)) {\r\n                const index = looseIndexOf(modelValue, elementValue);\r\n                const found = index !== -1;\r\n                if (checked && !found) {\r\n                    assign(modelValue.concat(elementValue));\r\n                }\r\n                else if (!checked && found) {\r\n                    const filtered = [...modelValue];\r\n                    filtered.splice(index, 1);\r\n                    assign(filtered);\r\n                }\r\n            }\r\n            else if (isSet(modelValue)) {\r\n                const cloned = new Set(modelValue);\r\n                if (checked) {\r\n                    cloned.add(elementValue);\r\n                }\r\n                else {\r\n                    cloned.delete(elementValue);\r\n                }\r\n                assign(cloned);\r\n            }\r\n            else {\r\n                assign(getCheckboxValue(el, checked));\r\n            }\r\n        });\r\n    },\r\n    // set initial checked on mount to wait for true-value/false-value\r\n    mounted: setChecked,\r\n    beforeUpdate(el, binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        setChecked(el, binding, vnode);\r\n    }\r\n};\r\nfunction setChecked(el, { value, oldValue }, vnode) {\r\n    el._modelValue = value;\r\n    if (shared_esm_bundler_isArray(value)) {\r\n        el.checked = looseIndexOf(value, vnode.props.value) > -1;\r\n    }\r\n    else if (isSet(value)) {\r\n        el.checked = value.has(vnode.props.value);\r\n    }\r\n    else if (value !== oldValue) {\r\n        el.checked = looseEqual(value, getCheckboxValue(el, true));\r\n    }\r\n}\r\nconst vModelRadio = {\r\n    created(el, { value }, vnode) {\r\n        el.checked = looseEqual(value, vnode.props.value);\r\n        el._assign = getModelAssigner(vnode);\r\n        addEventListener(el, \'change\', () => {\r\n            el._assign(getValue(el));\r\n        });\r\n    },\r\n    beforeUpdate(el, { value, oldValue }, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n        if (value !== oldValue) {\r\n            el.checked = looseEqual(value, vnode.props.value);\r\n        }\r\n    }\r\n};\r\nconst vModelSelect = {\r\n    // <select multiple> value need to be deep traversed\r\n    deep: true,\r\n    created(el, { value, modifiers: { number } }, vnode) {\r\n        const isSetModel = isSet(value);\r\n        addEventListener(el, \'change\', () => {\r\n            const selectedVal = Array.prototype.filter\r\n                .call(el.options, (o) => o.selected)\r\n                .map((o) => number ? toNumber(getValue(o)) : getValue(o));\r\n            el._assign(el.multiple\r\n                ? isSetModel\r\n                    ? new Set(selectedVal)\r\n                    : selectedVal\r\n                : selectedVal[0]);\r\n        });\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    // set value in mounted & updated because <select> relies on its children\r\n    // <option>s.\r\n    mounted(el, { value }) {\r\n        setSelected(el, value);\r\n    },\r\n    beforeUpdate(el, _binding, vnode) {\r\n        el._assign = getModelAssigner(vnode);\r\n    },\r\n    updated(el, { value }) {\r\n        setSelected(el, value);\r\n    }\r\n};\r\nfunction setSelected(el, value) {\r\n    const isMultiple = el.multiple;\r\n    if (isMultiple && !shared_esm_bundler_isArray(value) && !isSet(value)) {\r\n        ( false) &&\r\n            0;\r\n        return;\r\n    }\r\n    for (let i = 0, l = el.options.length; i < l; i++) {\r\n        const option = el.options[i];\r\n        const optionValue = getValue(option);\r\n        if (isMultiple) {\r\n            if (shared_esm_bundler_isArray(value)) {\r\n                option.selected = looseIndexOf(value, optionValue) > -1;\r\n            }\r\n            else {\r\n                option.selected = value.has(optionValue);\r\n            }\r\n        }\r\n        else {\r\n            if (looseEqual(getValue(option), value)) {\r\n                if (el.selectedIndex !== i)\r\n                    el.selectedIndex = i;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    if (!isMultiple && el.selectedIndex !== -1) {\r\n        el.selectedIndex = -1;\r\n    }\r\n}\r\n// retrieve raw value set via :value bindings\r\nfunction getValue(el) {\r\n    return \'_value\' in el ? el._value : el.value;\r\n}\r\n// retrieve raw value for true-value and false-value set via :true-value or :false-value bindings\r\nfunction getCheckboxValue(el, checked) {\r\n    const key = checked ? \'_trueValue\' : \'_falseValue\';\r\n    return key in el ? el[key] : checked;\r\n}\r\nconst vModelDynamic = {\r\n    created(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, \'created\');\r\n    },\r\n    mounted(el, binding, vnode) {\r\n        callModelHook(el, binding, vnode, null, \'mounted\');\r\n    },\r\n    beforeUpdate(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, \'beforeUpdate\');\r\n    },\r\n    updated(el, binding, vnode, prevVNode) {\r\n        callModelHook(el, binding, vnode, prevVNode, \'updated\');\r\n    }\r\n};\r\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\r\n    let modelToUse;\r\n    switch (el.tagName) {\r\n        case \'SELECT\':\r\n            modelToUse = vModelSelect;\r\n            break;\r\n        case \'TEXTAREA\':\r\n            modelToUse = vModelText;\r\n            break;\r\n        default:\r\n            switch (vnode.props && vnode.props.type) {\r\n                case \'checkbox\':\r\n                    modelToUse = vModelCheckbox;\r\n                    break;\r\n                case \'radio\':\r\n                    modelToUse = vModelRadio;\r\n                    break;\r\n                default:\r\n                    modelToUse = vModelText;\r\n            }\r\n    }\r\n    const fn = modelToUse[hook];\r\n    fn && fn(el, binding, vnode, prevVNode);\r\n}\r\n// SSR vnode transforms, only used when user includes client-oriented render\r\n// function in SSR\r\nfunction initVModelForSSR() {\r\n    vModelText.getSSRProps = ({ value }) => ({ value });\r\n    vModelRadio.getSSRProps = ({ value }, vnode) => {\r\n        if (vnode.props && looseEqual(vnode.props.value, value)) {\r\n            return { checked: true };\r\n        }\r\n    };\r\n    vModelCheckbox.getSSRProps = ({ value }, vnode) => {\r\n        if (shared_esm_bundler_isArray(value)) {\r\n            if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {\r\n                return { checked: true };\r\n            }\r\n        }\r\n        else if (isSet(value)) {\r\n            if (vnode.props && value.has(vnode.props.value)) {\r\n                return { checked: true };\r\n            }\r\n        }\r\n        else if (value) {\r\n            return { checked: true };\r\n        }\r\n    };\r\n}\n\nconst systemModifiers = [\'ctrl\', \'shift\', \'alt\', \'meta\'];\r\nconst modifierGuards = {\r\n    stop: e => e.stopPropagation(),\r\n    prevent: e => e.preventDefault(),\r\n    self: e => e.target !== e.currentTarget,\r\n    ctrl: e => !e.ctrlKey,\r\n    shift: e => !e.shiftKey,\r\n    alt: e => !e.altKey,\r\n    meta: e => !e.metaKey,\r\n    left: e => \'button\' in e && e.button !== 0,\r\n    middle: e => \'button\' in e && e.button !== 1,\r\n    right: e => \'button\' in e && e.button !== 2,\r\n    exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withModifiers = (fn, modifiers) => {\r\n    return (event, ...args) => {\r\n        for (let i = 0; i < modifiers.length; i++) {\r\n            const guard = modifierGuards[modifiers[i]];\r\n            if (guard && guard(event, modifiers))\r\n                return;\r\n        }\r\n        return fn(event, ...args);\r\n    };\r\n};\r\n// Kept for 2.x compat.\r\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\r\nconst keyNames = {\r\n    esc: \'escape\',\r\n    space: \' \',\r\n    up: \'arrow-up\',\r\n    left: \'arrow-left\',\r\n    right: \'arrow-right\',\r\n    down: \'arrow-down\',\r\n    delete: \'backspace\'\r\n};\r\n/**\r\n * @private\r\n */\r\nconst withKeys = (fn, modifiers) => {\r\n    return (event) => {\r\n        if (!(\'key\' in event)) {\r\n            return;\r\n        }\r\n        const eventKey = shared_esm_bundler_hyphenate(event.key);\r\n        if (modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\r\n            return fn(event);\r\n        }\r\n    };\r\n};\n\nconst vShow = {\r\n    beforeMount(el, { value }, { transition }) {\r\n        el._vod = el.style.display === \'none\' ? \'\' : el.style.display;\r\n        if (transition && value) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    mounted(el, { value }, { transition }) {\r\n        if (transition && value) {\r\n            transition.enter(el);\r\n        }\r\n    },\r\n    updated(el, { value, oldValue }, { transition }) {\r\n        if (!value === !oldValue)\r\n            return;\r\n        if (transition) {\r\n            if (value) {\r\n                transition.beforeEnter(el);\r\n                setDisplay(el, true);\r\n                transition.enter(el);\r\n            }\r\n            else {\r\n                transition.leave(el, () => {\r\n                    setDisplay(el, false);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            setDisplay(el, value);\r\n        }\r\n    },\r\n    beforeUnmount(el, { value }) {\r\n        setDisplay(el, value);\r\n    }\r\n};\r\nfunction setDisplay(el, value) {\r\n    el.style.display = value ? el._vod : \'none\';\r\n}\r\n// SSR vnode transforms, only used when user includes client-oriented render\r\n// function in SSR\r\nfunction initVShowForSSR() {\r\n    vShow.getSSRProps = ({ value }) => {\r\n        if (!value) {\r\n            return { style: { display: \'none\' } };\r\n        }\r\n    };\r\n}\n\nconst rendererOptions = shared_esm_bundler_extend({ patchProp }, nodeOps);\r\n// lazy create the renderer - this makes core renderer logic tree-shakable\r\n// in case the user only imports reactivity utilities from Vue.\r\nlet renderer;\r\nlet enabledHydration = false;\r\nfunction ensureRenderer() {\r\n    return (renderer ||\r\n        (renderer = createRenderer(rendererOptions)));\r\n}\r\nfunction ensureHydrationRenderer() {\r\n    renderer = enabledHydration\r\n        ? renderer\r\n        : createHydrationRenderer(rendererOptions);\r\n    enabledHydration = true;\r\n    return renderer;\r\n}\r\n// use explicit type casts here to avoid import() calls in rolled-up d.ts\r\nconst render = ((...args) => {\r\n    ensureRenderer().render(...args);\r\n});\r\nconst hydrate = ((...args) => {\r\n    ensureHydrationRenderer().hydrate(...args);\r\n});\r\nconst createApp = ((...args) => {\r\n    const app = ensureRenderer().createApp(...args);\r\n    if ((false)) {}\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (!container)\r\n            return;\r\n        const component = app._component;\r\n        if (!shared_esm_bundler_isFunction(component) && !component.render && !component.template) {\r\n            // __UNSAFE__\r\n            // Reason: potential execution of JS expressions in in-DOM template.\r\n            // The user must make sure the in-DOM template is trusted. If it\'s\r\n            // rendered by the server, the template should not contain any user data.\r\n            component.template = container.innerHTML;\r\n        }\r\n        // clear content before mounting\r\n        container.innerHTML = \'\';\r\n        const proxy = mount(container, false, container instanceof SVGElement);\r\n        if (container instanceof Element) {\r\n            container.removeAttribute(\'v-cloak\');\r\n            container.setAttribute(\'data-v-app\', \'\');\r\n        }\r\n        return proxy;\r\n    };\r\n    return app;\r\n});\r\nconst createSSRApp = ((...args) => {\r\n    const app = ensureHydrationRenderer().createApp(...args);\r\n    if ((false)) {}\r\n    const { mount } = app;\r\n    app.mount = (containerOrSelector) => {\r\n        const container = normalizeContainer(containerOrSelector);\r\n        if (container) {\r\n            return mount(container, true, container instanceof SVGElement);\r\n        }\r\n    };\r\n    return app;\r\n});\r\nfunction injectNativeTagCheck(app) {\r\n    // Inject `isNativeTag`\r\n    // this is used for component name validation (dev only)\r\n    Object.defineProperty(app.config, \'isNativeTag\', {\r\n        value: (tag) => isHTMLTag(tag) || isSVGTag(tag),\r\n        writable: false\r\n    });\r\n}\r\n// dev only\r\nfunction injectCompilerOptionsCheck(app) {\r\n    if (isRuntimeOnly()) {\r\n        const isCustomElement = app.config.isCustomElement;\r\n        Object.defineProperty(app.config, \'isCustomElement\', {\r\n            get() {\r\n                return isCustomElement;\r\n            },\r\n            set() {\r\n                warn(`The \\`isCustomElement\\` config option is deprecated. Use ` +\r\n                    `\\`compilerOptions.isCustomElement\\` instead.`);\r\n            }\r\n        });\r\n        const compilerOptions = app.config.compilerOptions;\r\n        const msg = `The \\`compilerOptions\\` config option is only respected when using ` +\r\n            `a build of Vue.js that includes the runtime compiler (aka "full build"). ` +\r\n            `Since you are using the runtime-only build, \\`compilerOptions\\` ` +\r\n            `must be passed to \\`@vue/compiler-dom\\` in the build setup instead.\\n` +\r\n            `- For vue-loader: pass it via vue-loader\'s \\`compilerOptions\\` loader option.\\n` +\r\n            `- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\\n` +\r\n            `- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;\r\n        Object.defineProperty(app.config, \'compilerOptions\', {\r\n            get() {\r\n                warn(msg);\r\n                return compilerOptions;\r\n            },\r\n            set() {\r\n                warn(msg);\r\n            }\r\n        });\r\n    }\r\n}\r\nfunction normalizeContainer(container) {\r\n    if (shared_esm_bundler_isString(container)) {\r\n        const res = document.querySelector(container);\r\n        if (false) {}\r\n        return res;\r\n    }\r\n    if (false) {}\r\n    return container;\r\n}\r\nlet ssrDirectiveInitialized = false;\r\n/**\r\n * @internal\r\n */\r\nconst initDirectivesForSSR = () => {\r\n        if (!ssrDirectiveInitialized) {\r\n            ssrDirectiveInitialized = true;\r\n            initVModelForSSR();\r\n            initVShowForSSR();\r\n        }\r\n    }\r\n    ;\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vue/compiler-core/dist/compiler-core.esm-bundler.js\n\n\n\nfunction defaultOnError(error) {\r\n    throw error;\r\n}\r\nfunction defaultOnWarn(msg) {\r\n    ( false) && 0;\r\n}\r\nfunction createCompilerError(code, loc, messages, additionalMessage) {\r\n    const msg =  false\r\n        ? 0\r\n        : code;\r\n    const error = new SyntaxError(String(msg));\r\n    error.code = code;\r\n    error.loc = loc;\r\n    return error;\r\n}\r\nconst errorMessages = {\r\n    // parse errors\r\n    [0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */]: \'Illegal comment.\',\r\n    [1 /* CDATA_IN_HTML_CONTENT */]: \'CDATA section is allowed only in XML context.\',\r\n    [2 /* DUPLICATE_ATTRIBUTE */]: \'Duplicate attribute.\',\r\n    [3 /* END_TAG_WITH_ATTRIBUTES */]: \'End tag cannot have attributes.\',\r\n    [4 /* END_TAG_WITH_TRAILING_SOLIDUS */]: "Illegal \'/\' in tags.",\r\n    [5 /* EOF_BEFORE_TAG_NAME */]: \'Unexpected EOF in tag.\',\r\n    [6 /* EOF_IN_CDATA */]: \'Unexpected EOF in CDATA section.\',\r\n    [7 /* EOF_IN_COMMENT */]: \'Unexpected EOF in comment.\',\r\n    [8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */]: \'Unexpected EOF in script.\',\r\n    [9 /* EOF_IN_TAG */]: \'Unexpected EOF in tag.\',\r\n    [10 /* INCORRECTLY_CLOSED_COMMENT */]: \'Incorrectly closed comment.\',\r\n    [11 /* INCORRECTLY_OPENED_COMMENT */]: \'Incorrectly opened comment.\',\r\n    [12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */]: "Illegal tag name. Use \'&lt;\' to print \'<\'.",\r\n    [13 /* MISSING_ATTRIBUTE_VALUE */]: \'Attribute value was expected.\',\r\n    [14 /* MISSING_END_TAG_NAME */]: \'End tag name was expected.\',\r\n    [15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */]: \'Whitespace was expected.\',\r\n    [16 /* NESTED_COMMENT */]: "Unexpected \'\x3c!--\' in comment.",\r\n    [17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */]: \'Attribute name cannot contain U+0022 ("), U+0027 (\\\'), and U+003C (<).\',\r\n    [18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */]: \'Unquoted attribute value cannot contain U+0022 ("), U+0027 (\\\'), U+003C (<), U+003D (=), and U+0060 (`).\',\r\n    [19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */]: "Attribute name cannot start with \'=\'.",\r\n    [21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */]: "\'<?\' is allowed only in XML context.",\r\n    [20 /* UNEXPECTED_NULL_CHARACTER */]: `Unexpected null character.`,\r\n    [22 /* UNEXPECTED_SOLIDUS_IN_TAG */]: "Illegal \'/\' in tags.",\r\n    // Vue-specific parse errors\r\n    [23 /* X_INVALID_END_TAG */]: \'Invalid end tag.\',\r\n    [24 /* X_MISSING_END_TAG */]: \'Element is missing end tag.\',\r\n    [25 /* X_MISSING_INTERPOLATION_END */]: \'Interpolation end sign was not found.\',\r\n    [27 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */]: \'End bracket for dynamic directive argument was not found. \' +\r\n        \'Note that dynamic directive argument cannot contain spaces.\',\r\n    [26 /* X_MISSING_DIRECTIVE_NAME */]: \'Legal directive name was expected.\',\r\n    // transform errors\r\n    [28 /* X_V_IF_NO_EXPRESSION */]: `v-if/v-else-if is missing expression.`,\r\n    [29 /* X_V_IF_SAME_KEY */]: `v-if/else branches must use unique keys.`,\r\n    [30 /* X_V_ELSE_NO_ADJACENT_IF */]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,\r\n    [31 /* X_V_FOR_NO_EXPRESSION */]: `v-for is missing expression.`,\r\n    [32 /* X_V_FOR_MALFORMED_EXPRESSION */]: `v-for has invalid expression.`,\r\n    [33 /* X_V_FOR_TEMPLATE_KEY_PLACEMENT */]: `<template v-for> key should be placed on the <template> tag.`,\r\n    [34 /* X_V_BIND_NO_EXPRESSION */]: `v-bind is missing expression.`,\r\n    [35 /* X_V_ON_NO_EXPRESSION */]: `v-on is missing expression.`,\r\n    [36 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */]: `Unexpected custom directive on <slot> outlet.`,\r\n    [37 /* X_V_SLOT_MIXED_SLOT_USAGE */]: `Mixed v-slot usage on both the component and nested <template>.` +\r\n        `When there are multiple named slots, all slots should use <template> ` +\r\n        `syntax to avoid scope ambiguity.`,\r\n    [38 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */]: `Duplicate slot names found. `,\r\n    [39 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */]: `Extraneous children found when component already has explicitly named ` +\r\n        `default slot. These children will be ignored.`,\r\n    [40 /* X_V_SLOT_MISPLACED */]: `v-slot can only be used on components or <template> tags.`,\r\n    [41 /* X_V_MODEL_NO_EXPRESSION */]: `v-model is missing expression.`,\r\n    [42 /* X_V_MODEL_MALFORMED_EXPRESSION */]: `v-model value must be a valid JavaScript member expression.`,\r\n    [43 /* X_V_MODEL_ON_SCOPE_VARIABLE */]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,\r\n    [44 /* X_INVALID_EXPRESSION */]: `Error parsing JavaScript expression: `,\r\n    [45 /* X_KEEP_ALIVE_INVALID_CHILDREN */]: `<KeepAlive> expects exactly one child component.`,\r\n    // generic errors\r\n    [46 /* X_PREFIX_ID_NOT_SUPPORTED */]: `"prefixIdentifiers" option is not supported in this build of compiler.`,\r\n    [47 /* X_MODULE_MODE_NOT_SUPPORTED */]: `ES module mode is not supported in this build of compiler.`,\r\n    [48 /* X_CACHE_HANDLER_NOT_SUPPORTED */]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,\r\n    [49 /* X_SCOPE_ID_NOT_SUPPORTED */]: `"scopeId" option is only supported in module mode.`,\r\n    // just to fulfill types\r\n    [50 /* __EXTEND_POINT__ */]: ``\r\n};\n\nconst FRAGMENT = Symbol(( false) ? 0 : ``);\r\nconst TELEPORT = Symbol(( false) ? 0 : ``);\r\nconst SUSPENSE = Symbol(( false) ? 0 : ``);\r\nconst KEEP_ALIVE = Symbol(( false) ? 0 : ``);\r\nconst BASE_TRANSITION = Symbol(( false) ? 0 : ``);\r\nconst OPEN_BLOCK = Symbol(( false) ? 0 : ``);\r\nconst CREATE_BLOCK = Symbol(( false) ? 0 : ``);\r\nconst CREATE_ELEMENT_BLOCK = Symbol(( false) ? 0 : ``);\r\nconst CREATE_VNODE = Symbol(( false) ? 0 : ``);\r\nconst CREATE_ELEMENT_VNODE = Symbol(( false) ? 0 : ``);\r\nconst CREATE_COMMENT = Symbol(( false) ? 0 : ``);\r\nconst CREATE_TEXT = Symbol(( false) ? 0 : ``);\r\nconst CREATE_STATIC = Symbol(( false) ? 0 : ``);\r\nconst RESOLVE_COMPONENT = Symbol(( false) ? 0 : ``);\r\nconst RESOLVE_DYNAMIC_COMPONENT = Symbol(( false) ? 0 : ``);\r\nconst RESOLVE_DIRECTIVE = Symbol(( false) ? 0 : ``);\r\nconst RESOLVE_FILTER = Symbol(( false) ? 0 : ``);\r\nconst WITH_DIRECTIVES = Symbol(( false) ? 0 : ``);\r\nconst RENDER_LIST = Symbol(( false) ? 0 : ``);\r\nconst RENDER_SLOT = Symbol(( false) ? 0 : ``);\r\nconst CREATE_SLOTS = Symbol(( false) ? 0 : ``);\r\nconst TO_DISPLAY_STRING = Symbol(( false) ? 0 : ``);\r\nconst MERGE_PROPS = Symbol(( false) ? 0 : ``);\r\nconst NORMALIZE_CLASS = Symbol(( false) ? 0 : ``);\r\nconst NORMALIZE_STYLE = Symbol(( false) ? 0 : ``);\r\nconst NORMALIZE_PROPS = Symbol(( false) ? 0 : ``);\r\nconst GUARD_REACTIVE_PROPS = Symbol(( false) ? 0 : ``);\r\nconst TO_HANDLERS = Symbol(( false) ? 0 : ``);\r\nconst CAMELIZE = Symbol(( false) ? 0 : ``);\r\nconst CAPITALIZE = Symbol(( false) ? 0 : ``);\r\nconst TO_HANDLER_KEY = Symbol(( false) ? 0 : ``);\r\nconst SET_BLOCK_TRACKING = Symbol(( false) ? 0 : ``);\r\nconst PUSH_SCOPE_ID = Symbol(( false) ? 0 : ``);\r\nconst POP_SCOPE_ID = Symbol(( false) ? 0 : ``);\r\nconst WITH_CTX = Symbol(( false) ? 0 : ``);\r\nconst UNREF = Symbol(( false) ? 0 : ``);\r\nconst IS_REF = Symbol(( false) ? 0 : ``);\r\nconst WITH_MEMO = Symbol(( false) ? 0 : ``);\r\nconst IS_MEMO_SAME = Symbol(( false) ? 0 : ``);\r\n// Name mapping for runtime helpers that need to be imported from \'vue\' in\r\n// generated code. Make sure these are correctly exported in the runtime!\r\n// Using `any` here because TS doesn\'t allow symbols as index type.\r\nconst helperNameMap = {\r\n    [FRAGMENT]: `Fragment`,\r\n    [TELEPORT]: `Teleport`,\r\n    [SUSPENSE]: `Suspense`,\r\n    [KEEP_ALIVE]: `KeepAlive`,\r\n    [BASE_TRANSITION]: `BaseTransition`,\r\n    [OPEN_BLOCK]: `openBlock`,\r\n    [CREATE_BLOCK]: `createBlock`,\r\n    [CREATE_ELEMENT_BLOCK]: `createElementBlock`,\r\n    [CREATE_VNODE]: `createVNode`,\r\n    [CREATE_ELEMENT_VNODE]: `createElementVNode`,\r\n    [CREATE_COMMENT]: `createCommentVNode`,\r\n    [CREATE_TEXT]: `createTextVNode`,\r\n    [CREATE_STATIC]: `createStaticVNode`,\r\n    [RESOLVE_COMPONENT]: `resolveComponent`,\r\n    [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,\r\n    [RESOLVE_DIRECTIVE]: `resolveDirective`,\r\n    [RESOLVE_FILTER]: `resolveFilter`,\r\n    [WITH_DIRECTIVES]: `withDirectives`,\r\n    [RENDER_LIST]: `renderList`,\r\n    [RENDER_SLOT]: `renderSlot`,\r\n    [CREATE_SLOTS]: `createSlots`,\r\n    [TO_DISPLAY_STRING]: `toDisplayString`,\r\n    [MERGE_PROPS]: `mergeProps`,\r\n    [NORMALIZE_CLASS]: `normalizeClass`,\r\n    [NORMALIZE_STYLE]: `normalizeStyle`,\r\n    [NORMALIZE_PROPS]: `normalizeProps`,\r\n    [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,\r\n    [TO_HANDLERS]: `toHandlers`,\r\n    [CAMELIZE]: `camelize`,\r\n    [CAPITALIZE]: `capitalize`,\r\n    [TO_HANDLER_KEY]: `toHandlerKey`,\r\n    [SET_BLOCK_TRACKING]: `setBlockTracking`,\r\n    [PUSH_SCOPE_ID]: `pushScopeId`,\r\n    [POP_SCOPE_ID]: `popScopeId`,\r\n    [WITH_CTX]: `withCtx`,\r\n    [UNREF]: `unref`,\r\n    [IS_REF]: `isRef`,\r\n    [WITH_MEMO]: `withMemo`,\r\n    [IS_MEMO_SAME]: `isMemoSame`\r\n};\r\nfunction registerRuntimeHelpers(helpers) {\r\n    Object.getOwnPropertySymbols(helpers).forEach(s => {\r\n        helperNameMap[s] = helpers[s];\r\n    });\r\n}\n\n// AST Utilities ---------------------------------------------------------------\r\n// Some expressions, e.g. sequence and conditional expressions, are never\r\n// associated with template nodes, so their source locations are just a stub.\r\n// Container types like CompoundExpression also don\'t need a real location.\r\nconst locStub = {\r\n    source: \'\',\r\n    start: { line: 1, column: 1, offset: 0 },\r\n    end: { line: 1, column: 1, offset: 0 }\r\n};\r\nfunction createRoot(children, loc = locStub) {\r\n    return {\r\n        type: 0 /* ROOT */,\r\n        children,\r\n        helpers: [],\r\n        components: [],\r\n        directives: [],\r\n        hoists: [],\r\n        imports: [],\r\n        cached: 0,\r\n        temps: 0,\r\n        codegenNode: undefined,\r\n        loc\r\n    };\r\n}\r\nfunction createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent = false, loc = locStub) {\r\n    if (context) {\r\n        if (isBlock) {\r\n            context.helper(OPEN_BLOCK);\r\n            context.helper(getVNodeBlockHelper(context.inSSR, isComponent));\r\n        }\r\n        else {\r\n            context.helper(getVNodeHelper(context.inSSR, isComponent));\r\n        }\r\n        if (directives) {\r\n            context.helper(WITH_DIRECTIVES);\r\n        }\r\n    }\r\n    return {\r\n        type: 13 /* VNODE_CALL */,\r\n        tag,\r\n        props,\r\n        children,\r\n        patchFlag,\r\n        dynamicProps,\r\n        directives,\r\n        isBlock,\r\n        disableTracking,\r\n        isComponent,\r\n        loc\r\n    };\r\n}\r\nfunction createArrayExpression(elements, loc = locStub) {\r\n    return {\r\n        type: 17 /* JS_ARRAY_EXPRESSION */,\r\n        loc,\r\n        elements\r\n    };\r\n}\r\nfunction createObjectExpression(properties, loc = locStub) {\r\n    return {\r\n        type: 15 /* JS_OBJECT_EXPRESSION */,\r\n        loc,\r\n        properties\r\n    };\r\n}\r\nfunction createObjectProperty(key, value) {\r\n    return {\r\n        type: 16 /* JS_PROPERTY */,\r\n        loc: locStub,\r\n        key: shared_esm_bundler_isString(key) ? createSimpleExpression(key, true) : key,\r\n        value\r\n    };\r\n}\r\nfunction createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0 /* NOT_CONSTANT */) {\r\n    return {\r\n        type: 4 /* SIMPLE_EXPRESSION */,\r\n        loc,\r\n        content,\r\n        isStatic,\r\n        constType: isStatic ? 3 /* CAN_STRINGIFY */ : constType\r\n    };\r\n}\r\nfunction createInterpolation(content, loc) {\r\n    return {\r\n        type: 5 /* INTERPOLATION */,\r\n        loc,\r\n        content: isString(content)\r\n            ? createSimpleExpression(content, false, loc)\r\n            : content\r\n    };\r\n}\r\nfunction createCompoundExpression(children, loc = locStub) {\r\n    return {\r\n        type: 8 /* COMPOUND_EXPRESSION */,\r\n        loc,\r\n        children\r\n    };\r\n}\r\nfunction createCallExpression(callee, args = [], loc = locStub) {\r\n    return {\r\n        type: 14 /* JS_CALL_EXPRESSION */,\r\n        loc,\r\n        callee,\r\n        arguments: args\r\n    };\r\n}\r\nfunction createFunctionExpression(params, returns = undefined, newline = false, isSlot = false, loc = locStub) {\r\n    return {\r\n        type: 18 /* JS_FUNCTION_EXPRESSION */,\r\n        params,\r\n        returns,\r\n        newline,\r\n        isSlot,\r\n        loc\r\n    };\r\n}\r\nfunction createConditionalExpression(test, consequent, alternate, newline = true) {\r\n    return {\r\n        type: 19 /* JS_CONDITIONAL_EXPRESSION */,\r\n        test,\r\n        consequent,\r\n        alternate,\r\n        newline,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createCacheExpression(index, value, isVNode = false) {\r\n    return {\r\n        type: 20 /* JS_CACHE_EXPRESSION */,\r\n        index,\r\n        value,\r\n        isVNode,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createBlockStatement(body) {\r\n    return {\r\n        type: 21 /* JS_BLOCK_STATEMENT */,\r\n        body,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createTemplateLiteral(elements) {\r\n    return {\r\n        type: 22 /* JS_TEMPLATE_LITERAL */,\r\n        elements,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createIfStatement(test, consequent, alternate) {\r\n    return {\r\n        type: 23 /* JS_IF_STATEMENT */,\r\n        test,\r\n        consequent,\r\n        alternate,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createAssignmentExpression(left, right) {\r\n    return {\r\n        type: 24 /* JS_ASSIGNMENT_EXPRESSION */,\r\n        left,\r\n        right,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createSequenceExpression(expressions) {\r\n    return {\r\n        type: 25 /* JS_SEQUENCE_EXPRESSION */,\r\n        expressions,\r\n        loc: locStub\r\n    };\r\n}\r\nfunction createReturnStatement(returns) {\r\n    return {\r\n        type: 26 /* JS_RETURN_STATEMENT */,\r\n        returns,\r\n        loc: locStub\r\n    };\r\n}\n\nconst isStaticExp = (p) => p.type === 4 /* SIMPLE_EXPRESSION */ && p.isStatic;\r\nconst isBuiltInType = (tag, expected) => tag === expected || tag === shared_esm_bundler_hyphenate(expected);\r\nfunction isCoreComponent(tag) {\r\n    if (isBuiltInType(tag, \'Teleport\')) {\r\n        return TELEPORT;\r\n    }\r\n    else if (isBuiltInType(tag, \'Suspense\')) {\r\n        return SUSPENSE;\r\n    }\r\n    else if (isBuiltInType(tag, \'KeepAlive\')) {\r\n        return KEEP_ALIVE;\r\n    }\r\n    else if (isBuiltInType(tag, \'BaseTransition\')) {\r\n        return BASE_TRANSITION;\r\n    }\r\n}\r\nconst nonIdentifierRE = /^\\d|[^\\$\\w]/;\r\nconst isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);\r\nconst validFirstIdentCharRE = /[A-Za-z_$\\xA0-\\uFFFF]/;\r\nconst validIdentCharRE = /[\\.\\?\\w$\\xA0-\\uFFFF]/;\r\nconst whitespaceRE = /\\s+[.[]\\s*|\\s*[.[]\\s+/g;\r\n/**\r\n * Simple lexer to check if an expression is a member expression. This is\r\n * lax and only checks validity at the root level (i.e. does not validate exps\r\n * inside square brackets), but it\'s ok since these are only used on template\r\n * expressions and false positives are invalid expressions in the first place.\r\n */\r\nconst isMemberExpressionBrowser = (path) => {\r\n    // remove whitespaces around . or [ first\r\n    path = path.trim().replace(whitespaceRE, s => s.trim());\r\n    let state = 0 /* inMemberExp */;\r\n    let stateStack = [];\r\n    let currentOpenBracketCount = 0;\r\n    let currentOpenParensCount = 0;\r\n    let currentStringType = null;\r\n    for (let i = 0; i < path.length; i++) {\r\n        const char = path.charAt(i);\r\n        switch (state) {\r\n            case 0 /* inMemberExp */:\r\n                if (char === \'[\') {\r\n                    stateStack.push(state);\r\n                    state = 1 /* inBrackets */;\r\n                    currentOpenBracketCount++;\r\n                }\r\n                else if (char === \'(\') {\r\n                    stateStack.push(state);\r\n                    state = 2 /* inParens */;\r\n                    currentOpenParensCount++;\r\n                }\r\n                else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 1 /* inBrackets */:\r\n                if (char === `\'` || char === `"` || char === \'`\') {\r\n                    stateStack.push(state);\r\n                    state = 3 /* inString */;\r\n                    currentStringType = char;\r\n                }\r\n                else if (char === `[`) {\r\n                    currentOpenBracketCount++;\r\n                }\r\n                else if (char === `]`) {\r\n                    if (!--currentOpenBracketCount) {\r\n                        state = stateStack.pop();\r\n                    }\r\n                }\r\n                break;\r\n            case 2 /* inParens */:\r\n                if (char === `\'` || char === `"` || char === \'`\') {\r\n                    stateStack.push(state);\r\n                    state = 3 /* inString */;\r\n                    currentStringType = char;\r\n                }\r\n                else if (char === `(`) {\r\n                    currentOpenParensCount++;\r\n                }\r\n                else if (char === `)`) {\r\n                    // if the exp ends as a call then it should not be considered valid\r\n                    if (i === path.length - 1) {\r\n                        return false;\r\n                    }\r\n                    if (!--currentOpenParensCount) {\r\n                        state = stateStack.pop();\r\n                    }\r\n                }\r\n                break;\r\n            case 3 /* inString */:\r\n                if (char === currentStringType) {\r\n                    state = stateStack.pop();\r\n                    currentStringType = null;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    return !currentOpenBracketCount && !currentOpenParensCount;\r\n};\r\nconst isMemberExpressionNode = (/* unused pure expression or super */ null && (NOOP))\r\n    ;\r\nconst isMemberExpression = isMemberExpressionBrowser\r\n    ;\r\nfunction getInnerRange(loc, offset, length) {\r\n    const source = loc.source.slice(offset, offset + length);\r\n    const newLoc = {\r\n        source,\r\n        start: advancePositionWithClone(loc.start, loc.source, offset),\r\n        end: loc.end\r\n    };\r\n    if (length != null) {\r\n        newLoc.end = advancePositionWithClone(loc.start, loc.source, offset + length);\r\n    }\r\n    return newLoc;\r\n}\r\nfunction advancePositionWithClone(pos, source, numberOfCharacters = source.length) {\r\n    return advancePositionWithMutation(shared_esm_bundler_extend({}, pos), source, numberOfCharacters);\r\n}\r\n// advance by mutation without cloning (for performance reasons), since this\r\n// gets called a lot in the parser\r\nfunction advancePositionWithMutation(pos, source, numberOfCharacters = source.length) {\r\n    let linesCount = 0;\r\n    let lastNewLinePos = -1;\r\n    for (let i = 0; i < numberOfCharacters; i++) {\r\n        if (source.charCodeAt(i) === 10 /* newline char code */) {\r\n            linesCount++;\r\n            lastNewLinePos = i;\r\n        }\r\n    }\r\n    pos.offset += numberOfCharacters;\r\n    pos.line += linesCount;\r\n    pos.column =\r\n        lastNewLinePos === -1\r\n            ? pos.column + numberOfCharacters\r\n            : numberOfCharacters - lastNewLinePos;\r\n    return pos;\r\n}\r\nfunction assert(condition, msg) {\r\n    /* istanbul ignore if */\r\n    if (!condition) {\r\n        throw new Error(msg || `unexpected compiler condition`);\r\n    }\r\n}\r\nfunction findDir(node, name, allowEmpty = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 7 /* DIRECTIVE */ &&\r\n            (allowEmpty || p.exp) &&\r\n            (shared_esm_bundler_isString(name) ? p.name === name : name.test(p.name))) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction findProp(node, name, dynamicOnly = false, allowEmpty = false) {\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (dynamicOnly)\r\n                continue;\r\n            if (p.name === name && (p.value || allowEmpty)) {\r\n                return p;\r\n            }\r\n        }\r\n        else if (p.name === \'bind\' &&\r\n            (p.exp || allowEmpty) &&\r\n            isStaticArgOf(p.arg, name)) {\r\n            return p;\r\n        }\r\n    }\r\n}\r\nfunction isStaticArgOf(arg, name) {\r\n    return !!(arg && isStaticExp(arg) && arg.content === name);\r\n}\r\nfunction hasDynamicKeyVBind(node) {\r\n    return node.props.some(p => p.type === 7 /* DIRECTIVE */ &&\r\n        p.name === \'bind\' &&\r\n        (!p.arg || // v-bind="obj"\r\n            p.arg.type !== 4 /* SIMPLE_EXPRESSION */ || // v-bind:[_ctx.foo]\r\n            !p.arg.isStatic) // v-bind:[foo]\r\n    );\r\n}\r\nfunction isText(node) {\r\n    return node.type === 5 /* INTERPOLATION */ || node.type === 2 /* TEXT */;\r\n}\r\nfunction isVSlot(p) {\r\n    return p.type === 7 /* DIRECTIVE */ && p.name === \'slot\';\r\n}\r\nfunction isTemplateNode(node) {\r\n    return (node.type === 1 /* ELEMENT */ && node.tagType === 3 /* TEMPLATE */);\r\n}\r\nfunction isSlotOutlet(node) {\r\n    return node.type === 1 /* ELEMENT */ && node.tagType === 2 /* SLOT */;\r\n}\r\nfunction getVNodeHelper(ssr, isComponent) {\r\n    return ssr || isComponent ? CREATE_VNODE : CREATE_ELEMENT_VNODE;\r\n}\r\nfunction getVNodeBlockHelper(ssr, isComponent) {\r\n    return ssr || isComponent ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;\r\n}\r\nconst propsHelperSet = new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);\r\nfunction getUnnormalizedProps(props, callPath = []) {\r\n    if (props &&\r\n        !shared_esm_bundler_isString(props) &&\r\n        props.type === 14 /* JS_CALL_EXPRESSION */) {\r\n        const callee = props.callee;\r\n        if (!shared_esm_bundler_isString(callee) && propsHelperSet.has(callee)) {\r\n            return getUnnormalizedProps(props.arguments[0], callPath.concat(props));\r\n        }\r\n    }\r\n    return [props, callPath];\r\n}\r\nfunction injectProp(node, prop, context) {\r\n    let propsWithInjection;\r\n    /**\r\n     * 1. mergeProps(...)\r\n     * 2. toHandlers(...)\r\n     * 3. normalizeProps(...)\r\n     * 4. normalizeProps(guardReactiveProps(...))\r\n     *\r\n     * we need to get the real props before normalization\r\n     */\r\n    let props = node.type === 13 /* VNODE_CALL */ ? node.props : node.arguments[2];\r\n    let callPath = [];\r\n    let parentCall;\r\n    if (props &&\r\n        !shared_esm_bundler_isString(props) &&\r\n        props.type === 14 /* JS_CALL_EXPRESSION */) {\r\n        const ret = getUnnormalizedProps(props);\r\n        props = ret[0];\r\n        callPath = ret[1];\r\n        parentCall = callPath[callPath.length - 1];\r\n    }\r\n    if (props == null || shared_esm_bundler_isString(props)) {\r\n        propsWithInjection = createObjectExpression([prop]);\r\n    }\r\n    else if (props.type === 14 /* JS_CALL_EXPRESSION */) {\r\n        // merged props... add ours\r\n        // only inject key to object literal if it\'s the first argument so that\r\n        // if doesn\'t override user provided keys\r\n        const first = props.arguments[0];\r\n        if (!shared_esm_bundler_isString(first) && first.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n            first.properties.unshift(prop);\r\n        }\r\n        else {\r\n            if (props.callee === TO_HANDLERS) {\r\n                // #2366\r\n                propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n                    createObjectExpression([prop]),\r\n                    props\r\n                ]);\r\n            }\r\n            else {\r\n                props.arguments.unshift(createObjectExpression([prop]));\r\n            }\r\n        }\r\n        !propsWithInjection && (propsWithInjection = props);\r\n    }\r\n    else if (props.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n        let alreadyExists = false;\r\n        // check existing key to avoid overriding user provided keys\r\n        if (prop.key.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            const propKeyName = prop.key.content;\r\n            alreadyExists = props.properties.some(p => p.key.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                p.key.content === propKeyName);\r\n        }\r\n        if (!alreadyExists) {\r\n            props.properties.unshift(prop);\r\n        }\r\n        propsWithInjection = props;\r\n    }\r\n    else {\r\n        // single v-bind with expression, return a merged replacement\r\n        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [\r\n            createObjectExpression([prop]),\r\n            props\r\n        ]);\r\n        // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(props))`,\r\n        // it will be rewritten as `normalizeProps(mergeProps({ key: 0 }, props))`,\r\n        // the `guardReactiveProps` will no longer be needed\r\n        if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {\r\n            parentCall = callPath[callPath.length - 2];\r\n        }\r\n    }\r\n    if (node.type === 13 /* VNODE_CALL */) {\r\n        if (parentCall) {\r\n            parentCall.arguments[0] = propsWithInjection;\r\n        }\r\n        else {\r\n            node.props = propsWithInjection;\r\n        }\r\n    }\r\n    else {\r\n        if (parentCall) {\r\n            parentCall.arguments[0] = propsWithInjection;\r\n        }\r\n        else {\r\n            node.arguments[2] = propsWithInjection;\r\n        }\r\n    }\r\n}\r\nfunction toValidAssetId(name, type) {\r\n    // see issue#4422, we need adding identifier on validAssetId if variable `name` has specific character\r\n    return `_${type}_${name.replace(/[^\\w]/g, (searchValue, replaceValue) => {\r\n        return searchValue === \'-\' ? \'_\' : name.charCodeAt(replaceValue).toString();\r\n    })}`;\r\n}\r\n// Check if a node contains expressions that reference current context scope ids\r\nfunction hasScopeRef(node, ids) {\r\n    if (!node || Object.keys(ids).length === 0) {\r\n        return false;\r\n    }\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            for (let i = 0; i < node.props.length; i++) {\r\n                const p = node.props[i];\r\n                if (p.type === 7 /* DIRECTIVE */ &&\r\n                    (hasScopeRef(p.arg, ids) || hasScopeRef(p.exp, ids))) {\r\n                    return true;\r\n                }\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 11 /* FOR */:\r\n            if (hasScopeRef(node.source, ids)) {\r\n                return true;\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 9 /* IF */:\r\n            return node.branches.some(b => hasScopeRef(b, ids));\r\n        case 10 /* IF_BRANCH */:\r\n            if (hasScopeRef(node.condition, ids)) {\r\n                return true;\r\n            }\r\n            return node.children.some(c => hasScopeRef(c, ids));\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            return (!node.isStatic &&\r\n                isSimpleIdentifier(node.content) &&\r\n                !!ids[node.content]);\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            return node.children.some(c => isObject(c) && hasScopeRef(c, ids));\r\n        case 5 /* INTERPOLATION */:\r\n        case 12 /* TEXT_CALL */:\r\n            return hasScopeRef(node.content, ids);\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return false;\r\n        default:\r\n            if ((false)) {}\r\n            return false;\r\n    }\r\n}\r\nfunction getMemoedVNodeCall(node) {\r\n    if (node.type === 14 /* JS_CALL_EXPRESSION */ && node.callee === WITH_MEMO) {\r\n        return node.arguments[1].returns;\r\n    }\r\n    else {\r\n        return node;\r\n    }\r\n}\r\nfunction makeBlock(node, { helper, removeHelper, inSSR }) {\r\n    if (!node.isBlock) {\r\n        node.isBlock = true;\r\n        removeHelper(getVNodeHelper(inSSR, node.isComponent));\r\n        helper(OPEN_BLOCK);\r\n        helper(getVNodeBlockHelper(inSSR, node.isComponent));\r\n    }\r\n}\n\nconst deprecationData = {\r\n    ["COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */]: {\r\n        message: `Platform-native elements with "is" prop will no longer be ` +\r\n            `treated as components in Vue 3 unless the "is" value is explicitly ` +\r\n            `prefixed with "vue:".`,\r\n        link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`\r\n    },\r\n    ["COMPILER_V_BIND_SYNC" /* COMPILER_V_BIND_SYNC */]: {\r\n        message: key => `.sync modifier for v-bind has been removed. Use v-model with ` +\r\n            `argument instead. \\`v-bind:${key}.sync\\` should be changed to ` +\r\n            `\\`v-model:${key}\\`.`,\r\n        link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`\r\n    },\r\n    ["COMPILER_V_BIND_PROP" /* COMPILER_V_BIND_PROP */]: {\r\n        message: `.prop modifier for v-bind has been removed and no longer necessary. ` +\r\n            `Vue 3 will automatically set a binding as DOM property when appropriate.`\r\n    },\r\n    ["COMPILER_V_BIND_OBJECT_ORDER" /* COMPILER_V_BIND_OBJECT_ORDER */]: {\r\n        message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript ` +\r\n            `object spread: it will now overwrite an existing non-mergeable attribute ` +\r\n            `that appears before v-bind in the case of conflict. ` +\r\n            `To retain 2.x behavior, move v-bind to make it the first attribute. ` +\r\n            `You can also suppress this warning if the usage is intended.`,\r\n        link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`\r\n    },\r\n    ["COMPILER_V_ON_NATIVE" /* COMPILER_V_ON_NATIVE */]: {\r\n        message: `.native modifier for v-on has been removed as is no longer necessary.`,\r\n        link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`\r\n    },\r\n    ["COMPILER_V_IF_V_FOR_PRECEDENCE" /* COMPILER_V_IF_V_FOR_PRECEDENCE */]: {\r\n        message: `v-if / v-for precedence when used on the same element has changed ` +\r\n            `in Vue 3: v-if now takes higher precedence and will no longer have ` +\r\n            `access to v-for scope variables. It is best to avoid the ambiguity ` +\r\n            `with <template> tags or use a computed property that filters v-for ` +\r\n            `data source.`,\r\n        link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`\r\n    },\r\n    ["COMPILER_NATIVE_TEMPLATE" /* COMPILER_NATIVE_TEMPLATE */]: {\r\n        message: `<template> with no special directives will render as a native template ` +\r\n            `element instead of its inner content in Vue 3.`\r\n    },\r\n    ["COMPILER_INLINE_TEMPLATE" /* COMPILER_INLINE_TEMPLATE */]: {\r\n        message: `"inline-template" has been removed in Vue 3.`,\r\n        link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`\r\n    },\r\n    ["COMPILER_FILTER" /* COMPILER_FILTERS */]: {\r\n        message: `filters have been removed in Vue 3. ` +\r\n            `The "|" symbol will be treated as native JavaScript bitwise OR operator. ` +\r\n            `Use method calls or computed properties instead.`,\r\n        link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`\r\n    }\r\n};\r\nfunction getCompatValue(key, context) {\r\n    const config = context.options\r\n        ? context.options.compatConfig\r\n        : context.compatConfig;\r\n    const value = config && config[key];\r\n    if (key === \'MODE\') {\r\n        return value || 3; // compiler defaults to v3 behavior\r\n    }\r\n    else {\r\n        return value;\r\n    }\r\n}\r\nfunction isCompatEnabled(key, context) {\r\n    const mode = getCompatValue(\'MODE\', context);\r\n    const value = getCompatValue(key, context);\r\n    // in v3 mode, only enable if explicitly set to true\r\n    // otherwise enable for any non-false value\r\n    return mode === 3 ? value === true : value !== false;\r\n}\r\nfunction checkCompatEnabled(key, context, loc, ...args) {\r\n    const enabled = isCompatEnabled(key, context);\r\n    if (false) {}\r\n    return enabled;\r\n}\r\nfunction warnDeprecation(key, context, loc, ...args) {\r\n    const val = getCompatValue(key, context);\r\n    if (val === \'suppress-warning\') {\r\n        return;\r\n    }\r\n    const { message, link } = deprecationData[key];\r\n    const msg = `(deprecation ${key}) ${typeof message === \'function\' ? message(...args) : message}${link ? `\\n  Details: ${link}` : ``}`;\r\n    const err = new SyntaxError(msg);\r\n    err.code = key;\r\n    if (loc)\r\n        err.loc = loc;\r\n    context.onWarn(err);\r\n}\n\n// The default decoder only provides escapes for characters reserved as part of\r\n// the template syntax, and is only used if the custom renderer did not provide\r\n// a platform-specific decoder.\r\nconst decodeRE = /&(gt|lt|amp|apos|quot);/g;\r\nconst decodeMap = {\r\n    gt: \'>\',\r\n    lt: \'<\',\r\n    amp: \'&\',\r\n    apos: "\'",\r\n    quot: \'"\'\r\n};\r\nconst defaultParserOptions = {\r\n    delimiters: [`{{`, `}}`],\r\n    getNamespace: () => 0 /* HTML */,\r\n    getTextMode: () => 0 /* DATA */,\r\n    isVoidTag: shared_esm_bundler_NO,\r\n    isPreTag: shared_esm_bundler_NO,\r\n    isCustomElement: shared_esm_bundler_NO,\r\n    decodeEntities: (rawText) => rawText.replace(decodeRE, (_, p1) => decodeMap[p1]),\r\n    onError: defaultOnError,\r\n    onWarn: defaultOnWarn,\r\n    comments: ("production" !== \'production\')\r\n};\r\nfunction compiler_core_esm_bundler_baseParse(content, options = {}) {\r\n    const context = createParserContext(content, options);\r\n    const start = getCursor(context);\r\n    return createRoot(parseChildren(context, 0 /* DATA */, []), getSelection(context, start));\r\n}\r\nfunction createParserContext(content, rawOptions) {\r\n    const options = shared_esm_bundler_extend({}, defaultParserOptions);\r\n    let key;\r\n    for (key in rawOptions) {\r\n        // @ts-ignore\r\n        options[key] =\r\n            rawOptions[key] === undefined\r\n                ? defaultParserOptions[key]\r\n                : rawOptions[key];\r\n    }\r\n    return {\r\n        options,\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        originalSource: content,\r\n        source: content,\r\n        inPre: false,\r\n        inVPre: false,\r\n        onWarn: options.onWarn\r\n    };\r\n}\r\nfunction parseChildren(context, mode, ancestors) {\r\n    const parent = last(ancestors);\r\n    const ns = parent ? parent.ns : 0 /* HTML */;\r\n    const nodes = [];\r\n    while (!isEnd(context, mode, ancestors)) {\r\n        const s = context.source;\r\n        let node = undefined;\r\n        if (mode === 0 /* DATA */ || mode === 1 /* RCDATA */) {\r\n            if (!context.inVPre && startsWith(s, context.options.delimiters[0])) {\r\n                // \'{{\'\r\n                node = parseInterpolation(context, mode);\r\n            }\r\n            else if (mode === 0 /* DATA */ && s[0] === \'<\') {\r\n                // https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state\r\n                if (s.length === 1) {\r\n                    emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 1);\r\n                }\r\n                else if (s[1] === \'!\') {\r\n                    // https://html.spec.whatwg.org/multipage/parsing.html#markup-declaration-open-state\r\n                    if (startsWith(s, \'\x3c!--\')) {\r\n                        node = parseComment(context);\r\n                    }\r\n                    else if (startsWith(s, \'<!DOCTYPE\')) {\r\n                        // Ignore DOCTYPE by a limitation.\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                    else if (startsWith(s, \'<![CDATA[\')) {\r\n                        if (ns !== 0 /* HTML */) {\r\n                            node = parseCDATA(context, ancestors);\r\n                        }\r\n                        else {\r\n                            emitError(context, 1 /* CDATA_IN_HTML_CONTENT */);\r\n                            node = parseBogusComment(context);\r\n                        }\r\n                    }\r\n                    else {\r\n                        emitError(context, 11 /* INCORRECTLY_OPENED_COMMENT */);\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                }\r\n                else if (s[1] === \'/\') {\r\n                    // https://html.spec.whatwg.org/multipage/parsing.html#end-tag-open-state\r\n                    if (s.length === 2) {\r\n                        emitError(context, 5 /* EOF_BEFORE_TAG_NAME */, 2);\r\n                    }\r\n                    else if (s[2] === \'>\') {\r\n                        emitError(context, 14 /* MISSING_END_TAG_NAME */, 2);\r\n                        advanceBy(context, 3);\r\n                        continue;\r\n                    }\r\n                    else if (/[a-z]/i.test(s[2])) {\r\n                        emitError(context, 23 /* X_INVALID_END_TAG */);\r\n                        parseTag(context, 1 /* End */, parent);\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 2);\r\n                        node = parseBogusComment(context);\r\n                    }\r\n                }\r\n                else if (/[a-z]/i.test(s[1])) {\r\n                    node = parseElement(context, ancestors);\r\n                    // 2.x <template> with no directive compat\r\n                    if (isCompatEnabled("COMPILER_NATIVE_TEMPLATE" /* COMPILER_NATIVE_TEMPLATE */, context) &&\r\n                        node &&\r\n                        node.tag === \'template\' &&\r\n                        !node.props.some(p => p.type === 7 /* DIRECTIVE */ &&\r\n                            isSpecialTemplateDirective(p.name))) {\r\n                        ( false) &&\r\n                            0;\r\n                        node = node.children;\r\n                    }\r\n                }\r\n                else if (s[1] === \'?\') {\r\n                    emitError(context, 21 /* UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME */, 1);\r\n                    node = parseBogusComment(context);\r\n                }\r\n                else {\r\n                    emitError(context, 12 /* INVALID_FIRST_CHARACTER_OF_TAG_NAME */, 1);\r\n                }\r\n            }\r\n        }\r\n        if (!node) {\r\n            node = parseText(context, mode);\r\n        }\r\n        if (shared_esm_bundler_isArray(node)) {\r\n            for (let i = 0; i < node.length; i++) {\r\n                pushNode(nodes, node[i]);\r\n            }\r\n        }\r\n        else {\r\n            pushNode(nodes, node);\r\n        }\r\n    }\r\n    // Whitespace handling strategy like v2\r\n    let removedWhitespace = false;\r\n    if (mode !== 2 /* RAWTEXT */ && mode !== 1 /* RCDATA */) {\r\n        const shouldCondense = context.options.whitespace !== \'preserve\';\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n            if (!context.inPre && node.type === 2 /* TEXT */) {\r\n                if (!/[^\\t\\r\\n\\f ]/.test(node.content)) {\r\n                    const prev = nodes[i - 1];\r\n                    const next = nodes[i + 1];\r\n                    // Remove if:\r\n                    // - the whitespace is the first or last node, or:\r\n                    // - (condense mode) the whitespace is adjacent to a comment, or:\r\n                    // - (condense mode) the whitespace is between two elements AND contains newline\r\n                    if (!prev ||\r\n                        !next ||\r\n                        (shouldCondense &&\r\n                            (prev.type === 3 /* COMMENT */ ||\r\n                                next.type === 3 /* COMMENT */ ||\r\n                                (prev.type === 1 /* ELEMENT */ &&\r\n                                    next.type === 1 /* ELEMENT */ &&\r\n                                    /[\\r\\n]/.test(node.content))))) {\r\n                        removedWhitespace = true;\r\n                        nodes[i] = null;\r\n                    }\r\n                    else {\r\n                        // Otherwise, the whitespace is condensed into a single space\r\n                        node.content = \' \';\r\n                    }\r\n                }\r\n                else if (shouldCondense) {\r\n                    // in condense mode, consecutive whitespaces in text are condensed\r\n                    // down to a single space.\r\n                    node.content = node.content.replace(/[\\t\\r\\n\\f ]+/g, \' \');\r\n                }\r\n            }\r\n            // Remove comment nodes if desired by configuration.\r\n            else if (node.type === 3 /* COMMENT */ && !context.options.comments) {\r\n                removedWhitespace = true;\r\n                nodes[i] = null;\r\n            }\r\n        }\r\n        if (context.inPre && parent && context.options.isPreTag(parent.tag)) {\r\n            // remove leading newline per html spec\r\n            // https://html.spec.whatwg.org/multipage/grouping-content.html#the-pre-element\r\n            const first = nodes[0];\r\n            if (first && first.type === 2 /* TEXT */) {\r\n                first.content = first.content.replace(/^\\r?\\n/, \'\');\r\n            }\r\n        }\r\n    }\r\n    return removedWhitespace ? nodes.filter(Boolean) : nodes;\r\n}\r\nfunction pushNode(nodes, node) {\r\n    if (node.type === 2 /* TEXT */) {\r\n        const prev = last(nodes);\r\n        // Merge if both this and the previous node are text and those are\r\n        // consecutive. This happens for cases like "a < b".\r\n        if (prev &&\r\n            prev.type === 2 /* TEXT */ &&\r\n            prev.loc.end.offset === node.loc.start.offset) {\r\n            prev.content += node.content;\r\n            prev.loc.end = node.loc.end;\r\n            prev.loc.source += node.loc.source;\r\n            return;\r\n        }\r\n    }\r\n    nodes.push(node);\r\n}\r\nfunction parseCDATA(context, ancestors) {\r\n    advanceBy(context, 9);\r\n    const nodes = parseChildren(context, 3 /* CDATA */, ancestors);\r\n    if (context.source.length === 0) {\r\n        emitError(context, 6 /* EOF_IN_CDATA */);\r\n    }\r\n    else {\r\n        advanceBy(context, 3);\r\n    }\r\n    return nodes;\r\n}\r\nfunction parseComment(context) {\r\n    const start = getCursor(context);\r\n    let content;\r\n    // Regular comment.\r\n    const match = /--(\\!)?>/.exec(context.source);\r\n    if (!match) {\r\n        content = context.source.slice(4);\r\n        advanceBy(context, context.source.length);\r\n        emitError(context, 7 /* EOF_IN_COMMENT */);\r\n    }\r\n    else {\r\n        if (match.index <= 3) {\r\n            emitError(context, 0 /* ABRUPT_CLOSING_OF_EMPTY_COMMENT */);\r\n        }\r\n        if (match[1]) {\r\n            emitError(context, 10 /* INCORRECTLY_CLOSED_COMMENT */);\r\n        }\r\n        content = context.source.slice(4, match.index);\r\n        // Advancing with reporting nested comments.\r\n        const s = context.source.slice(0, match.index);\r\n        let prevIndex = 1, nestedIndex = 0;\r\n        while ((nestedIndex = s.indexOf(\'\x3c!--\', prevIndex)) !== -1) {\r\n            advanceBy(context, nestedIndex - prevIndex + 1);\r\n            if (nestedIndex + 4 < s.length) {\r\n                emitError(context, 16 /* NESTED_COMMENT */);\r\n            }\r\n            prevIndex = nestedIndex + 1;\r\n        }\r\n        advanceBy(context, match.index + match[0].length - prevIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseBogusComment(context) {\r\n    const start = getCursor(context);\r\n    const contentStart = context.source[1] === \'?\' ? 1 : 2;\r\n    let content;\r\n    const closeIndex = context.source.indexOf(\'>\');\r\n    if (closeIndex === -1) {\r\n        content = context.source.slice(contentStart);\r\n        advanceBy(context, context.source.length);\r\n    }\r\n    else {\r\n        content = context.source.slice(contentStart, closeIndex);\r\n        advanceBy(context, closeIndex + 1);\r\n    }\r\n    return {\r\n        type: 3 /* COMMENT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseElement(context, ancestors) {\r\n    // Start tag.\r\n    const wasInPre = context.inPre;\r\n    const wasInVPre = context.inVPre;\r\n    const parent = last(ancestors);\r\n    const element = parseTag(context, 0 /* Start */, parent);\r\n    const isPreBoundary = context.inPre && !wasInPre;\r\n    const isVPreBoundary = context.inVPre && !wasInVPre;\r\n    if (element.isSelfClosing || context.options.isVoidTag(element.tag)) {\r\n        // #4030 self-closing <pre> tag\r\n        if (isPreBoundary) {\r\n            context.inPre = false;\r\n        }\r\n        if (isVPreBoundary) {\r\n            context.inVPre = false;\r\n        }\r\n        return element;\r\n    }\r\n    // Children.\r\n    ancestors.push(element);\r\n    const mode = context.options.getTextMode(element, parent);\r\n    const children = parseChildren(context, mode, ancestors);\r\n    ancestors.pop();\r\n    // 2.x inline-template compat\r\n    {\r\n        const inlineTemplateProp = element.props.find(p => p.type === 6 /* ATTRIBUTE */ && p.name === \'inline-template\');\r\n        if (inlineTemplateProp &&\r\n            checkCompatEnabled("COMPILER_INLINE_TEMPLATE" /* COMPILER_INLINE_TEMPLATE */, context, inlineTemplateProp.loc)) {\r\n            const loc = getSelection(context, element.loc.end);\r\n            inlineTemplateProp.value = {\r\n                type: 2 /* TEXT */,\r\n                content: loc.source,\r\n                loc\r\n            };\r\n        }\r\n    }\r\n    element.children = children;\r\n    // End tag.\r\n    if (startsWithEndTagOpen(context.source, element.tag)) {\r\n        parseTag(context, 1 /* End */, parent);\r\n    }\r\n    else {\r\n        emitError(context, 24 /* X_MISSING_END_TAG */, 0, element.loc.start);\r\n        if (context.source.length === 0 && element.tag.toLowerCase() === \'script\') {\r\n            const first = children[0];\r\n            if (first && startsWith(first.loc.source, \'\x3c!--\')) {\r\n                emitError(context, 8 /* EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT */);\r\n            }\r\n        }\r\n    }\r\n    element.loc = getSelection(context, element.loc.start);\r\n    if (isPreBoundary) {\r\n        context.inPre = false;\r\n    }\r\n    if (isVPreBoundary) {\r\n        context.inVPre = false;\r\n    }\r\n    return element;\r\n}\r\nconst isSpecialTemplateDirective = /*#__PURE__*/ shared_esm_bundler_makeMap(`if,else,else-if,for,slot`);\r\nfunction parseTag(context, type, parent) {\r\n    // Tag open.\r\n    const start = getCursor(context);\r\n    const match = /^<\\/?([a-z][^\\t\\r\\n\\f />]*)/i.exec(context.source);\r\n    const tag = match[1];\r\n    const ns = context.options.getNamespace(tag, parent);\r\n    advanceBy(context, match[0].length);\r\n    advanceSpaces(context);\r\n    // save current state in case we need to re-parse attributes with v-pre\r\n    const cursor = getCursor(context);\r\n    const currentSource = context.source;\r\n    // check <pre> tag\r\n    if (context.options.isPreTag(tag)) {\r\n        context.inPre = true;\r\n    }\r\n    // Attributes.\r\n    let props = parseAttributes(context, type);\r\n    // check v-pre\r\n    if (type === 0 /* Start */ &&\r\n        !context.inVPre &&\r\n        props.some(p => p.type === 7 /* DIRECTIVE */ && p.name === \'pre\')) {\r\n        context.inVPre = true;\r\n        // reset context\r\n        shared_esm_bundler_extend(context, cursor);\r\n        context.source = currentSource;\r\n        // re-parse attrs and filter out v-pre itself\r\n        props = parseAttributes(context, type).filter(p => p.name !== \'v-pre\');\r\n    }\r\n    // Tag close.\r\n    let isSelfClosing = false;\r\n    if (context.source.length === 0) {\r\n        emitError(context, 9 /* EOF_IN_TAG */);\r\n    }\r\n    else {\r\n        isSelfClosing = startsWith(context.source, \'/>\');\r\n        if (type === 1 /* End */ && isSelfClosing) {\r\n            emitError(context, 4 /* END_TAG_WITH_TRAILING_SOLIDUS */);\r\n        }\r\n        advanceBy(context, isSelfClosing ? 2 : 1);\r\n    }\r\n    if (type === 1 /* End */) {\r\n        return;\r\n    }\r\n    // 2.x deprecation checks\r\n    if (false) {}\r\n    let tagType = 0 /* ELEMENT */;\r\n    if (!context.inVPre) {\r\n        if (tag === \'slot\') {\r\n            tagType = 2 /* SLOT */;\r\n        }\r\n        else if (tag === \'template\') {\r\n            if (props.some(p => p.type === 7 /* DIRECTIVE */ && isSpecialTemplateDirective(p.name))) {\r\n                tagType = 3 /* TEMPLATE */;\r\n            }\r\n        }\r\n        else if (isComponent(tag, props, context)) {\r\n            tagType = 1 /* COMPONENT */;\r\n        }\r\n    }\r\n    return {\r\n        type: 1 /* ELEMENT */,\r\n        ns,\r\n        tag,\r\n        tagType,\r\n        props,\r\n        isSelfClosing,\r\n        children: [],\r\n        loc: getSelection(context, start),\r\n        codegenNode: undefined // to be created during transform phase\r\n    };\r\n}\r\nfunction isComponent(tag, props, context) {\r\n    const options = context.options;\r\n    if (options.isCustomElement(tag)) {\r\n        return false;\r\n    }\r\n    if (tag === \'component\' ||\r\n        /^[A-Z]/.test(tag) ||\r\n        isCoreComponent(tag) ||\r\n        (options.isBuiltInComponent && options.isBuiltInComponent(tag)) ||\r\n        (options.isNativeTag && !options.isNativeTag(tag))) {\r\n        return true;\r\n    }\r\n    // at this point the tag should be a native tag, but check for potential "is"\r\n    // casting\r\n    for (let i = 0; i < props.length; i++) {\r\n        const p = props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (p.name === \'is\' && p.value) {\r\n                if (p.value.content.startsWith(\'vue:\')) {\r\n                    return true;\r\n                }\r\n                else if (checkCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */, context, p.loc)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // directive\r\n            // v-is (TODO Deprecate)\r\n            if (p.name === \'is\') {\r\n                return true;\r\n            }\r\n            else if (\r\n            // :is on plain element - only treat as component in compat mode\r\n            p.name === \'bind\' &&\r\n                isStaticArgOf(p.arg, \'is\') &&\r\n                true &&\r\n                checkCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */, context, p.loc)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction parseAttributes(context, type) {\r\n    const props = [];\r\n    const attributeNames = new Set();\r\n    while (context.source.length > 0 &&\r\n        !startsWith(context.source, \'>\') &&\r\n        !startsWith(context.source, \'/>\')) {\r\n        if (startsWith(context.source, \'/\')) {\r\n            emitError(context, 22 /* UNEXPECTED_SOLIDUS_IN_TAG */);\r\n            advanceBy(context, 1);\r\n            advanceSpaces(context);\r\n            continue;\r\n        }\r\n        if (type === 1 /* End */) {\r\n            emitError(context, 3 /* END_TAG_WITH_ATTRIBUTES */);\r\n        }\r\n        const attr = parseAttribute(context, attributeNames);\r\n        // Trim whitespace between class\r\n        // https://github.com/vuejs/core/issues/4251\r\n        if (attr.type === 6 /* ATTRIBUTE */ &&\r\n            attr.value &&\r\n            attr.name === \'class\') {\r\n            attr.value.content = attr.value.content.replace(/\\s+/g, \' \').trim();\r\n        }\r\n        if (type === 0 /* Start */) {\r\n            props.push(attr);\r\n        }\r\n        if (/^[^\\t\\r\\n\\f />]/.test(context.source)) {\r\n            emitError(context, 15 /* MISSING_WHITESPACE_BETWEEN_ATTRIBUTES */);\r\n        }\r\n        advanceSpaces(context);\r\n    }\r\n    return props;\r\n}\r\nfunction parseAttribute(context, nameSet) {\r\n    // Name.\r\n    const start = getCursor(context);\r\n    const match = /^[^\\t\\r\\n\\f />][^\\t\\r\\n\\f />=]*/.exec(context.source);\r\n    const name = match[0];\r\n    if (nameSet.has(name)) {\r\n        emitError(context, 2 /* DUPLICATE_ATTRIBUTE */);\r\n    }\r\n    nameSet.add(name);\r\n    if (name[0] === \'=\') {\r\n        emitError(context, 19 /* UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME */);\r\n    }\r\n    {\r\n        const pattern = /["\'<]/g;\r\n        let m;\r\n        while ((m = pattern.exec(name))) {\r\n            emitError(context, 17 /* UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME */, m.index);\r\n        }\r\n    }\r\n    advanceBy(context, name.length);\r\n    // Value\r\n    let value = undefined;\r\n    if (/^[\\t\\r\\n\\f ]*=/.test(context.source)) {\r\n        advanceSpaces(context);\r\n        advanceBy(context, 1);\r\n        advanceSpaces(context);\r\n        value = parseAttributeValue(context);\r\n        if (!value) {\r\n            emitError(context, 13 /* MISSING_ATTRIBUTE_VALUE */);\r\n        }\r\n    }\r\n    const loc = getSelection(context, start);\r\n    if (!context.inVPre && /^(v-[A-Za-z0-9-]|:|\\.|@|#)/.test(name)) {\r\n        const match = /(?:^v-([a-z0-9-]+))?(?:(?::|^\\.|^@|^#)(\\[[^\\]]+\\]|[^\\.]+))?(.+)?$/i.exec(name);\r\n        let isPropShorthand = startsWith(name, \'.\');\r\n        let dirName = match[1] ||\r\n            (isPropShorthand || startsWith(name, \':\')\r\n                ? \'bind\'\r\n                : startsWith(name, \'@\')\r\n                    ? \'on\'\r\n                    : \'slot\');\r\n        let arg;\r\n        if (match[2]) {\r\n            const isSlot = dirName === \'slot\';\r\n            const startOffset = name.lastIndexOf(match[2]);\r\n            const loc = getSelection(context, getNewPosition(context, start, startOffset), getNewPosition(context, start, startOffset + match[2].length + ((isSlot && match[3]) || \'\').length));\r\n            let content = match[2];\r\n            let isStatic = true;\r\n            if (content.startsWith(\'[\')) {\r\n                isStatic = false;\r\n                if (!content.endsWith(\']\')) {\r\n                    emitError(context, 27 /* X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END */);\r\n                    content = content.slice(1);\r\n                }\r\n                else {\r\n                    content = content.slice(1, content.length - 1);\r\n                }\r\n            }\r\n            else if (isSlot) {\r\n                // #1241 special case for v-slot: vuetify relies extensively on slot\r\n                // names containing dots. v-slot doesn\'t have any modifiers and Vue 2.x\r\n                // supports such usage so we are keeping it consistent with 2.x.\r\n                content += match[3] || \'\';\r\n            }\r\n            arg = {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content,\r\n                isStatic,\r\n                constType: isStatic\r\n                    ? 3 /* CAN_STRINGIFY */\r\n                    : 0 /* NOT_CONSTANT */,\r\n                loc\r\n            };\r\n        }\r\n        if (value && value.isQuoted) {\r\n            const valueLoc = value.loc;\r\n            valueLoc.start.offset++;\r\n            valueLoc.start.column++;\r\n            valueLoc.end = advancePositionWithClone(valueLoc.start, value.content);\r\n            valueLoc.source = valueLoc.source.slice(1, -1);\r\n        }\r\n        const modifiers = match[3] ? match[3].slice(1).split(\'.\') : [];\r\n        if (isPropShorthand)\r\n            modifiers.push(\'prop\');\r\n        // 2.x compat v-bind:foo.sync -> v-model:foo\r\n        if (dirName === \'bind\' && arg) {\r\n            if (modifiers.includes(\'sync\') &&\r\n                checkCompatEnabled("COMPILER_V_BIND_SYNC" /* COMPILER_V_BIND_SYNC */, context, loc, arg.loc.source)) {\r\n                dirName = \'model\';\r\n                modifiers.splice(modifiers.indexOf(\'sync\'), 1);\r\n            }\r\n            if (false) {}\r\n        }\r\n        return {\r\n            type: 7 /* DIRECTIVE */,\r\n            name: dirName,\r\n            exp: value && {\r\n                type: 4 /* SIMPLE_EXPRESSION */,\r\n                content: value.content,\r\n                isStatic: false,\r\n                // Treat as non-constant by default. This can be potentially set to\r\n                // other values by `transformExpression` to make it eligible for hoisting.\r\n                constType: 0 /* NOT_CONSTANT */,\r\n                loc: value.loc\r\n            },\r\n            arg,\r\n            modifiers,\r\n            loc\r\n        };\r\n    }\r\n    // missing directive name or illegal directive name\r\n    if (!context.inVPre && startsWith(name, \'v-\')) {\r\n        emitError(context, 26 /* X_MISSING_DIRECTIVE_NAME */);\r\n    }\r\n    return {\r\n        type: 6 /* ATTRIBUTE */,\r\n        name,\r\n        value: value && {\r\n            type: 2 /* TEXT */,\r\n            content: value.content,\r\n            loc: value.loc\r\n        },\r\n        loc\r\n    };\r\n}\r\nfunction parseAttributeValue(context) {\r\n    const start = getCursor(context);\r\n    let content;\r\n    const quote = context.source[0];\r\n    const isQuoted = quote === `"` || quote === `\'`;\r\n    if (isQuoted) {\r\n        // Quoted value.\r\n        advanceBy(context, 1);\r\n        const endIndex = context.source.indexOf(quote);\r\n        if (endIndex === -1) {\r\n            content = parseTextData(context, context.source.length, 4 /* ATTRIBUTE_VALUE */);\r\n        }\r\n        else {\r\n            content = parseTextData(context, endIndex, 4 /* ATTRIBUTE_VALUE */);\r\n            advanceBy(context, 1);\r\n        }\r\n    }\r\n    else {\r\n        // Unquoted\r\n        const match = /^[^\\t\\r\\n\\f >]+/.exec(context.source);\r\n        if (!match) {\r\n            return undefined;\r\n        }\r\n        const unexpectedChars = /["\'<=`]/g;\r\n        let m;\r\n        while ((m = unexpectedChars.exec(match[0]))) {\r\n            emitError(context, 18 /* UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE */, m.index);\r\n        }\r\n        content = parseTextData(context, match[0].length, 4 /* ATTRIBUTE_VALUE */);\r\n    }\r\n    return { content, isQuoted, loc: getSelection(context, start) };\r\n}\r\nfunction parseInterpolation(context, mode) {\r\n    const [open, close] = context.options.delimiters;\r\n    const closeIndex = context.source.indexOf(close, open.length);\r\n    if (closeIndex === -1) {\r\n        emitError(context, 25 /* X_MISSING_INTERPOLATION_END */);\r\n        return undefined;\r\n    }\r\n    const start = getCursor(context);\r\n    advanceBy(context, open.length);\r\n    const innerStart = getCursor(context);\r\n    const innerEnd = getCursor(context);\r\n    const rawContentLength = closeIndex - open.length;\r\n    const rawContent = context.source.slice(0, rawContentLength);\r\n    const preTrimContent = parseTextData(context, rawContentLength, mode);\r\n    const content = preTrimContent.trim();\r\n    const startOffset = preTrimContent.indexOf(content);\r\n    if (startOffset > 0) {\r\n        advancePositionWithMutation(innerStart, rawContent, startOffset);\r\n    }\r\n    const endOffset = rawContentLength - (preTrimContent.length - content.length - startOffset);\r\n    advancePositionWithMutation(innerEnd, rawContent, endOffset);\r\n    advanceBy(context, close.length);\r\n    return {\r\n        type: 5 /* INTERPOLATION */,\r\n        content: {\r\n            type: 4 /* SIMPLE_EXPRESSION */,\r\n            isStatic: false,\r\n            // Set `isConstant` to false by default and will decide in transformExpression\r\n            constType: 0 /* NOT_CONSTANT */,\r\n            content,\r\n            loc: getSelection(context, innerStart, innerEnd)\r\n        },\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\nfunction parseText(context, mode) {\r\n    const endTokens = mode === 3 /* CDATA */ ? [\']]>\'] : [\'<\', context.options.delimiters[0]];\r\n    let endIndex = context.source.length;\r\n    for (let i = 0; i < endTokens.length; i++) {\r\n        const index = context.source.indexOf(endTokens[i], 1);\r\n        if (index !== -1 && endIndex > index) {\r\n            endIndex = index;\r\n        }\r\n    }\r\n    const start = getCursor(context);\r\n    const content = parseTextData(context, endIndex, mode);\r\n    return {\r\n        type: 2 /* TEXT */,\r\n        content,\r\n        loc: getSelection(context, start)\r\n    };\r\n}\r\n/**\r\n * Get text data with a given length from the current location.\r\n * This translates HTML entities in the text data.\r\n */\r\nfunction parseTextData(context, length, mode) {\r\n    const rawText = context.source.slice(0, length);\r\n    advanceBy(context, length);\r\n    if (mode === 2 /* RAWTEXT */ ||\r\n        mode === 3 /* CDATA */ ||\r\n        !rawText.includes(\'&\')) {\r\n        return rawText;\r\n    }\r\n    else {\r\n        // DATA or RCDATA containing "&"". Entity decoding required.\r\n        return context.options.decodeEntities(rawText, mode === 4 /* ATTRIBUTE_VALUE */);\r\n    }\r\n}\r\nfunction getCursor(context) {\r\n    const { column, line, offset } = context;\r\n    return { column, line, offset };\r\n}\r\nfunction getSelection(context, start, end) {\r\n    end = end || getCursor(context);\r\n    return {\r\n        start,\r\n        end,\r\n        source: context.originalSource.slice(start.offset, end.offset)\r\n    };\r\n}\r\nfunction last(xs) {\r\n    return xs[xs.length - 1];\r\n}\r\nfunction startsWith(source, searchString) {\r\n    return source.startsWith(searchString);\r\n}\r\nfunction advanceBy(context, numberOfCharacters) {\r\n    const { source } = context;\r\n    advancePositionWithMutation(context, source, numberOfCharacters);\r\n    context.source = source.slice(numberOfCharacters);\r\n}\r\nfunction advanceSpaces(context) {\r\n    const match = /^[\\t\\r\\n\\f ]+/.exec(context.source);\r\n    if (match) {\r\n        advanceBy(context, match[0].length);\r\n    }\r\n}\r\nfunction getNewPosition(context, start, numberOfCharacters) {\r\n    return advancePositionWithClone(start, context.originalSource.slice(start.offset, numberOfCharacters), numberOfCharacters);\r\n}\r\nfunction emitError(context, code, offset, loc = getCursor(context)) {\r\n    if (offset) {\r\n        loc.offset += offset;\r\n        loc.column += offset;\r\n    }\r\n    context.options.onError(createCompilerError(code, {\r\n        start: loc,\r\n        end: loc,\r\n        source: \'\'\r\n    }));\r\n}\r\nfunction isEnd(context, mode, ancestors) {\r\n    const s = context.source;\r\n    switch (mode) {\r\n        case 0 /* DATA */:\r\n            if (startsWith(s, \'</\')) {\r\n                // TODO: probably bad performance\r\n                for (let i = ancestors.length - 1; i >= 0; --i) {\r\n                    if (startsWithEndTagOpen(s, ancestors[i].tag)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        case 1 /* RCDATA */:\r\n        case 2 /* RAWTEXT */: {\r\n            const parent = last(ancestors);\r\n            if (parent && startsWithEndTagOpen(s, parent.tag)) {\r\n                return true;\r\n            }\r\n            break;\r\n        }\r\n        case 3 /* CDATA */:\r\n            if (startsWith(s, \']]>\')) {\r\n                return true;\r\n            }\r\n            break;\r\n    }\r\n    return !s;\r\n}\r\nfunction startsWithEndTagOpen(source, tag) {\r\n    return (startsWith(source, \'</\') &&\r\n        source.slice(2, 2 + tag.length).toLowerCase() === tag.toLowerCase() &&\r\n        /[\\t\\r\\n\\f />]/.test(source[2 + tag.length] || \'>\'));\r\n}\n\nfunction hoistStatic(root, context) {\r\n    walk(root, context, \r\n    // Root node is unfortunately non-hoistable due to potential parent\r\n    // fallthrough attributes.\r\n    isSingleElementRoot(root, root.children[0]));\r\n}\r\nfunction isSingleElementRoot(root, child) {\r\n    const { children } = root;\r\n    return (children.length === 1 &&\r\n        child.type === 1 /* ELEMENT */ &&\r\n        !isSlotOutlet(child));\r\n}\r\nfunction walk(node, context, doNotHoistNode = false) {\r\n    const { children } = node;\r\n    const originalCount = children.length;\r\n    let hoistedCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // only plain elements & text calls are eligible for hoisting.\r\n        if (child.type === 1 /* ELEMENT */ &&\r\n            child.tagType === 0 /* ELEMENT */) {\r\n            const constantType = doNotHoistNode\r\n                ? 0 /* NOT_CONSTANT */\r\n                : getConstantType(child, context);\r\n            if (constantType > 0 /* NOT_CONSTANT */) {\r\n                if (constantType >= 2 /* CAN_HOIST */) {\r\n                    child.codegenNode.patchFlag =\r\n                        -1 /* HOISTED */ + (( false) ? 0 : ``);\r\n                    child.codegenNode = context.hoist(child.codegenNode);\r\n                    hoistedCount++;\r\n                    continue;\r\n                }\r\n            }\r\n            else {\r\n                // node may contain dynamic children, but its props may be eligible for\r\n                // hoisting.\r\n                const codegenNode = child.codegenNode;\r\n                if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n                    const flag = getPatchFlag(codegenNode);\r\n                    if ((!flag ||\r\n                        flag === 512 /* NEED_PATCH */ ||\r\n                        flag === 1 /* TEXT */) &&\r\n                        getGeneratedPropsConstantType(child, context) >=\r\n                            2 /* CAN_HOIST */) {\r\n                        const props = getNodeProps(child);\r\n                        if (props) {\r\n                            codegenNode.props = context.hoist(props);\r\n                        }\r\n                    }\r\n                    if (codegenNode.dynamicProps) {\r\n                        codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (child.type === 12 /* TEXT_CALL */ &&\r\n            getConstantType(child.content, context) >= 2 /* CAN_HOIST */) {\r\n            child.codegenNode = context.hoist(child.codegenNode);\r\n            hoistedCount++;\r\n        }\r\n        // walk further\r\n        if (child.type === 1 /* ELEMENT */) {\r\n            const isComponent = child.tagType === 1 /* COMPONENT */;\r\n            if (isComponent) {\r\n                context.scopes.vSlot++;\r\n            }\r\n            walk(child, context);\r\n            if (isComponent) {\r\n                context.scopes.vSlot--;\r\n            }\r\n        }\r\n        else if (child.type === 11 /* FOR */) {\r\n            // Do not hoist v-for single child because it has to be a block\r\n            walk(child, context, child.children.length === 1);\r\n        }\r\n        else if (child.type === 9 /* IF */) {\r\n            for (let i = 0; i < child.branches.length; i++) {\r\n                // Do not hoist v-if single child because it has to be a block\r\n                walk(child.branches[i], context, child.branches[i].children.length === 1);\r\n            }\r\n        }\r\n    }\r\n    if (hoistedCount && context.transformHoist) {\r\n        context.transformHoist(children, context, node);\r\n    }\r\n    // all children were hoisted - the entire children array is hoistable.\r\n    if (hoistedCount &&\r\n        hoistedCount === originalCount &&\r\n        node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 0 /* ELEMENT */ &&\r\n        node.codegenNode &&\r\n        node.codegenNode.type === 13 /* VNODE_CALL */ &&\r\n        shared_esm_bundler_isArray(node.codegenNode.children)) {\r\n        node.codegenNode.children = context.hoist(createArrayExpression(node.codegenNode.children));\r\n    }\r\n}\r\nfunction getConstantType(node, context) {\r\n    const { constantCache } = context;\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n            if (node.tagType !== 0 /* ELEMENT */) {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            const cached = constantCache.get(node);\r\n            if (cached !== undefined) {\r\n                return cached;\r\n            }\r\n            const codegenNode = node.codegenNode;\r\n            if (codegenNode.type !== 13 /* VNODE_CALL */) {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            if (codegenNode.isBlock &&\r\n                node.tag !== \'svg\' &&\r\n                node.tag !== \'foreignObject\') {\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n            const flag = getPatchFlag(codegenNode);\r\n            if (!flag) {\r\n                let returnType = 3 /* CAN_STRINGIFY */;\r\n                // Element itself has no patch flag. However we still need to check:\r\n                // 1. Even for a node with no patch flag, it is possible for it to contain\r\n                // non-hoistable expressions that refers to scope variables, e.g. compiler\r\n                // injected keys or cached event handlers. Therefore we need to always\r\n                // check the codegenNode\'s props to be sure.\r\n                const generatedPropsType = getGeneratedPropsConstantType(node, context);\r\n                if (generatedPropsType === 0 /* NOT_CONSTANT */) {\r\n                    constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                    return 0 /* NOT_CONSTANT */;\r\n                }\r\n                if (generatedPropsType < returnType) {\r\n                    returnType = generatedPropsType;\r\n                }\r\n                // 2. its children.\r\n                for (let i = 0; i < node.children.length; i++) {\r\n                    const childType = getConstantType(node.children[i], context);\r\n                    if (childType === 0 /* NOT_CONSTANT */) {\r\n                        constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                        return 0 /* NOT_CONSTANT */;\r\n                    }\r\n                    if (childType < returnType) {\r\n                        returnType = childType;\r\n                    }\r\n                }\r\n                // 3. if the type is not already CAN_SKIP_PATCH which is the lowest non-0\r\n                // type, check if any of the props can cause the type to be lowered\r\n                // we can skip can_patch because it\'s guaranteed by the absence of a\r\n                // patchFlag.\r\n                if (returnType > 1 /* CAN_SKIP_PATCH */) {\r\n                    for (let i = 0; i < node.props.length; i++) {\r\n                        const p = node.props[i];\r\n                        if (p.type === 7 /* DIRECTIVE */ && p.name === \'bind\' && p.exp) {\r\n                            const expType = getConstantType(p.exp, context);\r\n                            if (expType === 0 /* NOT_CONSTANT */) {\r\n                                constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                                return 0 /* NOT_CONSTANT */;\r\n                            }\r\n                            if (expType < returnType) {\r\n                                returnType = expType;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                // only svg/foreignObject could be block here, however if they are\r\n                // static then they don\'t need to be blocks since there will be no\r\n                // nested updates.\r\n                if (codegenNode.isBlock) {\r\n                    context.removeHelper(OPEN_BLOCK);\r\n                    context.removeHelper(getVNodeBlockHelper(context.inSSR, codegenNode.isComponent));\r\n                    codegenNode.isBlock = false;\r\n                    context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));\r\n                }\r\n                constantCache.set(node, returnType);\r\n                return returnType;\r\n            }\r\n            else {\r\n                constantCache.set(node, 0 /* NOT_CONSTANT */);\r\n                return 0 /* NOT_CONSTANT */;\r\n            }\r\n        case 2 /* TEXT */:\r\n        case 3 /* COMMENT */:\r\n            return 3 /* CAN_STRINGIFY */;\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n        case 10 /* IF_BRANCH */:\r\n            return 0 /* NOT_CONSTANT */;\r\n        case 5 /* INTERPOLATION */:\r\n        case 12 /* TEXT_CALL */:\r\n            return getConstantType(node.content, context);\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            return node.constType;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            let returnType = 3 /* CAN_STRINGIFY */;\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                if (shared_esm_bundler_isString(child) || isSymbol(child)) {\r\n                    continue;\r\n                }\r\n                const childType = getConstantType(child, context);\r\n                if (childType === 0 /* NOT_CONSTANT */) {\r\n                    return 0 /* NOT_CONSTANT */;\r\n                }\r\n                else if (childType < returnType) {\r\n                    returnType = childType;\r\n                }\r\n            }\r\n            return returnType;\r\n        default:\r\n            if ((false)) {}\r\n            return 0 /* NOT_CONSTANT */;\r\n    }\r\n}\r\nconst allowHoistedHelperSet = new Set([\r\n    NORMALIZE_CLASS,\r\n    NORMALIZE_STYLE,\r\n    NORMALIZE_PROPS,\r\n    GUARD_REACTIVE_PROPS\r\n]);\r\nfunction getConstantTypeOfHelperCall(value, context) {\r\n    if (value.type === 14 /* JS_CALL_EXPRESSION */ &&\r\n        !shared_esm_bundler_isString(value.callee) &&\r\n        allowHoistedHelperSet.has(value.callee)) {\r\n        const arg = value.arguments[0];\r\n        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            return getConstantType(arg, context);\r\n        }\r\n        else if (arg.type === 14 /* JS_CALL_EXPRESSION */) {\r\n            // in the case of nested helper call, e.g. `normalizeProps(guardReactiveProps(exp))`\r\n            return getConstantTypeOfHelperCall(arg, context);\r\n        }\r\n    }\r\n    return 0 /* NOT_CONSTANT */;\r\n}\r\nfunction getGeneratedPropsConstantType(node, context) {\r\n    let returnType = 3 /* CAN_STRINGIFY */;\r\n    const props = getNodeProps(node);\r\n    if (props && props.type === 15 /* JS_OBJECT_EXPRESSION */) {\r\n        const { properties } = props;\r\n        for (let i = 0; i < properties.length; i++) {\r\n            const { key, value } = properties[i];\r\n            const keyType = getConstantType(key, context);\r\n            if (keyType === 0 /* NOT_CONSTANT */) {\r\n                return keyType;\r\n            }\r\n            if (keyType < returnType) {\r\n                returnType = keyType;\r\n            }\r\n            let valueType;\r\n            if (value.type === 4 /* SIMPLE_EXPRESSION */) {\r\n                valueType = getConstantType(value, context);\r\n            }\r\n            else if (value.type === 14 /* JS_CALL_EXPRESSION */) {\r\n                // some helper calls can be hoisted,\r\n                // such as the `normalizeProps` generated by the compiler for pre-normalize class,\r\n                // in this case we need to respect the ConstantType of the helper\'s arguments\r\n                valueType = getConstantTypeOfHelperCall(value, context);\r\n            }\r\n            else {\r\n                valueType = 0 /* NOT_CONSTANT */;\r\n            }\r\n            if (valueType === 0 /* NOT_CONSTANT */) {\r\n                return valueType;\r\n            }\r\n            if (valueType < returnType) {\r\n                returnType = valueType;\r\n            }\r\n        }\r\n    }\r\n    return returnType;\r\n}\r\nfunction getNodeProps(node) {\r\n    const codegenNode = node.codegenNode;\r\n    if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n        return codegenNode.props;\r\n    }\r\n}\r\nfunction getPatchFlag(node) {\r\n    const flag = node.patchFlag;\r\n    return flag ? parseInt(flag, 10) : undefined;\r\n}\n\nfunction createTransformContext(root, { filename = \'\', prefixIdentifiers = false, hoistStatic = false, cacheHandlers = false, nodeTransforms = [], directiveTransforms = {}, transformHoist = null, isBuiltInComponent = shared_esm_bundler_NOOP, isCustomElement = shared_esm_bundler_NOOP, expressionPlugins = [], scopeId = null, slotted = true, ssr = false, inSSR = false, ssrCssVars = ``, bindingMetadata = EMPTY_OBJ, inline = false, isTS = false, onError = defaultOnError, onWarn = defaultOnWarn, compatConfig }) {\r\n    const nameMatch = filename.replace(/\\?.*$/, \'\').match(/([^/\\\\]+)\\.\\w+$/);\r\n    const context = {\r\n        // options\r\n        selfName: nameMatch && shared_esm_bundler_capitalize(shared_esm_bundler_camelize(nameMatch[1])),\r\n        prefixIdentifiers,\r\n        hoistStatic,\r\n        cacheHandlers,\r\n        nodeTransforms,\r\n        directiveTransforms,\r\n        transformHoist,\r\n        isBuiltInComponent,\r\n        isCustomElement,\r\n        expressionPlugins,\r\n        scopeId,\r\n        slotted,\r\n        ssr,\r\n        inSSR,\r\n        ssrCssVars,\r\n        bindingMetadata,\r\n        inline,\r\n        isTS,\r\n        onError,\r\n        onWarn,\r\n        compatConfig,\r\n        // state\r\n        root,\r\n        helpers: new Map(),\r\n        components: new Set(),\r\n        directives: new Set(),\r\n        hoists: [],\r\n        imports: [],\r\n        constantCache: new Map(),\r\n        temps: 0,\r\n        cached: 0,\r\n        identifiers: Object.create(null),\r\n        scopes: {\r\n            vFor: 0,\r\n            vSlot: 0,\r\n            vPre: 0,\r\n            vOnce: 0\r\n        },\r\n        parent: null,\r\n        currentNode: root,\r\n        childIndex: 0,\r\n        inVOnce: false,\r\n        // methods\r\n        helper(name) {\r\n            const count = context.helpers.get(name) || 0;\r\n            context.helpers.set(name, count + 1);\r\n            return name;\r\n        },\r\n        removeHelper(name) {\r\n            const count = context.helpers.get(name);\r\n            if (count) {\r\n                const currentCount = count - 1;\r\n                if (!currentCount) {\r\n                    context.helpers.delete(name);\r\n                }\r\n                else {\r\n                    context.helpers.set(name, currentCount);\r\n                }\r\n            }\r\n        },\r\n        helperString(name) {\r\n            return `_${helperNameMap[context.helper(name)]}`;\r\n        },\r\n        replaceNode(node) {\r\n            /* istanbul ignore if */\r\n            if ((false)) {}\r\n            context.parent.children[context.childIndex] = context.currentNode = node;\r\n        },\r\n        removeNode(node) {\r\n            if (false) {}\r\n            const list = context.parent.children;\r\n            const removalIndex = node\r\n                ? list.indexOf(node)\r\n                : context.currentNode\r\n                    ? context.childIndex\r\n                    : -1;\r\n            /* istanbul ignore if */\r\n            if (false) {}\r\n            if (!node || node === context.currentNode) {\r\n                // current node removed\r\n                context.currentNode = null;\r\n                context.onNodeRemoved();\r\n            }\r\n            else {\r\n                // sibling node removed\r\n                if (context.childIndex > removalIndex) {\r\n                    context.childIndex--;\r\n                    context.onNodeRemoved();\r\n                }\r\n            }\r\n            context.parent.children.splice(removalIndex, 1);\r\n        },\r\n        onNodeRemoved: () => { },\r\n        addIdentifiers(exp) {\r\n        },\r\n        removeIdentifiers(exp) {\r\n        },\r\n        hoist(exp) {\r\n            if (shared_esm_bundler_isString(exp))\r\n                exp = createSimpleExpression(exp);\r\n            context.hoists.push(exp);\r\n            const identifier = createSimpleExpression(`_hoisted_${context.hoists.length}`, false, exp.loc, 2 /* CAN_HOIST */);\r\n            identifier.hoisted = exp;\r\n            return identifier;\r\n        },\r\n        cache(exp, isVNode = false) {\r\n            return createCacheExpression(context.cached++, exp, isVNode);\r\n        }\r\n    };\r\n    {\r\n        context.filters = new Set();\r\n    }\r\n    return context;\r\n}\r\nfunction transform(root, options) {\r\n    const context = createTransformContext(root, options);\r\n    traverseNode(root, context);\r\n    if (options.hoistStatic) {\r\n        hoistStatic(root, context);\r\n    }\r\n    if (!options.ssr) {\r\n        createRootCodegen(root, context);\r\n    }\r\n    // finalize meta information\r\n    root.helpers = [...context.helpers.keys()];\r\n    root.components = [...context.components];\r\n    root.directives = [...context.directives];\r\n    root.imports = context.imports;\r\n    root.hoists = context.hoists;\r\n    root.temps = context.temps;\r\n    root.cached = context.cached;\r\n    {\r\n        root.filters = [...context.filters];\r\n    }\r\n}\r\nfunction createRootCodegen(root, context) {\r\n    const { helper } = context;\r\n    const { children } = root;\r\n    if (children.length === 1) {\r\n        const child = children[0];\r\n        // if the single child is an element, turn it into a block.\r\n        if (isSingleElementRoot(root, child) && child.codegenNode) {\r\n            // single element root is never hoisted so codegenNode will never be\r\n            // SimpleExpressionNode\r\n            const codegenNode = child.codegenNode;\r\n            if (codegenNode.type === 13 /* VNODE_CALL */) {\r\n                makeBlock(codegenNode, context);\r\n            }\r\n            root.codegenNode = codegenNode;\r\n        }\r\n        else {\r\n            // - single <slot/>, IfNode, ForNode: already blocks.\r\n            // - single text node: always patched.\r\n            // root codegen falls through via genNode()\r\n            root.codegenNode = child;\r\n        }\r\n    }\r\n    else if (children.length > 1) {\r\n        // root has multiple nodes - return a fragment block.\r\n        let patchFlag = 64 /* STABLE_FRAGMENT */;\r\n        let patchFlagText = PatchFlagNames[64];\r\n        // check if the fragment actually contains a single valid child with\r\n        // the rest being comments\r\n        if (false) {}\r\n        root.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, root.children, patchFlag + (( false) ? 0 : ``), undefined, undefined, true, undefined, false /* isComponent */);\r\n    }\r\n    else ;\r\n}\r\nfunction traverseChildren(parent, context) {\r\n    let i = 0;\r\n    const nodeRemoved = () => {\r\n        i--;\r\n    };\r\n    for (; i < parent.children.length; i++) {\r\n        const child = parent.children[i];\r\n        if (shared_esm_bundler_isString(child))\r\n            continue;\r\n        context.parent = parent;\r\n        context.childIndex = i;\r\n        context.onNodeRemoved = nodeRemoved;\r\n        traverseNode(child, context);\r\n    }\r\n}\r\nfunction traverseNode(node, context) {\r\n    context.currentNode = node;\r\n    // apply transform plugins\r\n    const { nodeTransforms } = context;\r\n    const exitFns = [];\r\n    for (let i = 0; i < nodeTransforms.length; i++) {\r\n        const onExit = nodeTransforms[i](node, context);\r\n        if (onExit) {\r\n            if (shared_esm_bundler_isArray(onExit)) {\r\n                exitFns.push(...onExit);\r\n            }\r\n            else {\r\n                exitFns.push(onExit);\r\n            }\r\n        }\r\n        if (!context.currentNode) {\r\n            // node was removed\r\n            return;\r\n        }\r\n        else {\r\n            // node may have been replaced\r\n            node = context.currentNode;\r\n        }\r\n    }\r\n    switch (node.type) {\r\n        case 3 /* COMMENT */:\r\n            if (!context.ssr) {\r\n                // inject import for the Comment symbol, which is needed for creating\r\n                // comment nodes with `createVNode`\r\n                context.helper(CREATE_COMMENT);\r\n            }\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            // no need to traverse, but we need to inject toString helper\r\n            if (!context.ssr) {\r\n                context.helper(TO_DISPLAY_STRING);\r\n            }\r\n            break;\r\n        // for container types, further traverse downwards\r\n        case 9 /* IF */:\r\n            for (let i = 0; i < node.branches.length; i++) {\r\n                traverseNode(node.branches[i], context);\r\n            }\r\n            break;\r\n        case 10 /* IF_BRANCH */:\r\n        case 11 /* FOR */:\r\n        case 1 /* ELEMENT */:\r\n        case 0 /* ROOT */:\r\n            traverseChildren(node, context);\r\n            break;\r\n    }\r\n    // exit transforms\r\n    context.currentNode = node;\r\n    let i = exitFns.length;\r\n    while (i--) {\r\n        exitFns[i]();\r\n    }\r\n}\r\nfunction createStructuralDirectiveTransform(name, fn) {\r\n    const matches = shared_esm_bundler_isString(name)\r\n        ? (n) => n === name\r\n        : (n) => name.test(n);\r\n    return (node, context) => {\r\n        if (node.type === 1 /* ELEMENT */) {\r\n            const { props } = node;\r\n            // structural directive transforms are not concerned with slots\r\n            // as they are handled separately in vSlot.ts\r\n            if (node.tagType === 3 /* TEMPLATE */ && props.some(isVSlot)) {\r\n                return;\r\n            }\r\n            const exitFns = [];\r\n            for (let i = 0; i < props.length; i++) {\r\n                const prop = props[i];\r\n                if (prop.type === 7 /* DIRECTIVE */ && matches(prop.name)) {\r\n                    // structural directives are removed to avoid infinite recursion\r\n                    // also we remove them *before* applying so that it can further\r\n                    // traverse itself in case it moves the node around\r\n                    props.splice(i, 1);\r\n                    i--;\r\n                    const onExit = fn(node, prop, context);\r\n                    if (onExit)\r\n                        exitFns.push(onExit);\r\n                }\r\n            }\r\n            return exitFns;\r\n        }\r\n    };\r\n}\n\nconst PURE_ANNOTATION = `/*#__PURE__*/`;\r\nfunction createCodegenContext(ast, { mode = \'function\', prefixIdentifiers = mode === \'module\', sourceMap = false, filename = `template.vue.html`, scopeId = null, optimizeImports = false, runtimeGlobalName = `Vue`, runtimeModuleName = `vue`, ssrRuntimeModuleName = \'vue/server-renderer\', ssr = false, isTS = false, inSSR = false }) {\r\n    const context = {\r\n        mode,\r\n        prefixIdentifiers,\r\n        sourceMap,\r\n        filename,\r\n        scopeId,\r\n        optimizeImports,\r\n        runtimeGlobalName,\r\n        runtimeModuleName,\r\n        ssrRuntimeModuleName,\r\n        ssr,\r\n        isTS,\r\n        inSSR,\r\n        source: ast.loc.source,\r\n        code: ``,\r\n        column: 1,\r\n        line: 1,\r\n        offset: 0,\r\n        indentLevel: 0,\r\n        pure: false,\r\n        map: undefined,\r\n        helper(key) {\r\n            return `_${helperNameMap[key]}`;\r\n        },\r\n        push(code, node) {\r\n            context.code += code;\r\n        },\r\n        indent() {\r\n            newline(++context.indentLevel);\r\n        },\r\n        deindent(withoutNewLine = false) {\r\n            if (withoutNewLine) {\r\n                --context.indentLevel;\r\n            }\r\n            else {\r\n                newline(--context.indentLevel);\r\n            }\r\n        },\r\n        newline() {\r\n            newline(context.indentLevel);\r\n        }\r\n    };\r\n    function newline(n) {\r\n        context.push(\'\\n\' + `  `.repeat(n));\r\n    }\r\n    return context;\r\n}\r\nfunction generate(ast, options = {}) {\r\n    const context = createCodegenContext(ast, options);\r\n    if (options.onContextCreated)\r\n        options.onContextCreated(context);\r\n    const { mode, push, prefixIdentifiers, indent, deindent, newline, scopeId, ssr } = context;\r\n    const hasHelpers = ast.helpers.length > 0;\r\n    const useWithBlock = !prefixIdentifiers && mode !== \'module\';\r\n    // preambles\r\n    // in setup() inline mode, the preamble is generated in a sub context\r\n    // and returned separately.\r\n    const preambleContext = context;\r\n    {\r\n        genFunctionPreamble(ast, preambleContext);\r\n    }\r\n    // enter render function\r\n    const functionName = ssr ? `ssrRender` : `render`;\r\n    const args = ssr ? [\'_ctx\', \'_push\', \'_parent\', \'_attrs\'] : [\'_ctx\', \'_cache\'];\r\n    const signature = args.join(\', \');\r\n    {\r\n        push(`function ${functionName}(${signature}) {`);\r\n    }\r\n    indent();\r\n    if (useWithBlock) {\r\n        push(`with (_ctx) {`);\r\n        indent();\r\n        // function mode const declarations should be inside with block\r\n        // also they should be renamed to avoid collision with user properties\r\n        if (hasHelpers) {\r\n            push(`const { ${ast.helpers\r\n                .map(s => `${helperNameMap[s]}: _${helperNameMap[s]}`)\r\n                .join(\', \')} } = _Vue`);\r\n            push(`\\n`);\r\n            newline();\r\n        }\r\n    }\r\n    // generate asset resolution statements\r\n    if (ast.components.length) {\r\n        genAssets(ast.components, \'component\', context);\r\n        if (ast.directives.length || ast.temps > 0) {\r\n            newline();\r\n        }\r\n    }\r\n    if (ast.directives.length) {\r\n        genAssets(ast.directives, \'directive\', context);\r\n        if (ast.temps > 0) {\r\n            newline();\r\n        }\r\n    }\r\n    if (ast.filters && ast.filters.length) {\r\n        newline();\r\n        genAssets(ast.filters, \'filter\', context);\r\n        newline();\r\n    }\r\n    if (ast.temps > 0) {\r\n        push(`let `);\r\n        for (let i = 0; i < ast.temps; i++) {\r\n            push(`${i > 0 ? `, ` : ``}_temp${i}`);\r\n        }\r\n    }\r\n    if (ast.components.length || ast.directives.length || ast.temps) {\r\n        push(`\\n`);\r\n        newline();\r\n    }\r\n    // generate the VNode tree expression\r\n    if (!ssr) {\r\n        push(`return `);\r\n    }\r\n    if (ast.codegenNode) {\r\n        genNode(ast.codegenNode, context);\r\n    }\r\n    else {\r\n        push(`null`);\r\n    }\r\n    if (useWithBlock) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n    deindent();\r\n    push(`}`);\r\n    return {\r\n        ast,\r\n        code: context.code,\r\n        preamble: ``,\r\n        // SourceMapGenerator does have toJSON() method but it\'s not in the types\r\n        map: context.map ? context.map.toJSON() : undefined\r\n    };\r\n}\r\nfunction genFunctionPreamble(ast, context) {\r\n    const { ssr, prefixIdentifiers, push, newline, runtimeModuleName, runtimeGlobalName, ssrRuntimeModuleName } = context;\r\n    const VueBinding = runtimeGlobalName;\r\n    const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;\r\n    // Generate const declaration for helpers\r\n    // In prefix mode, we place the const declaration at top so it\'s done\r\n    // only once; But if we not prefixing, we place the declaration inside the\r\n    // with block so it doesn\'t incur the `in` check cost for every helper access.\r\n    if (ast.helpers.length > 0) {\r\n        {\r\n            // "with" mode.\r\n            // save Vue in a separate variable to avoid collision\r\n            push(`const _Vue = ${VueBinding}\\n`);\r\n            // in "with" mode, helpers are declared inside the with block to avoid\r\n            // has check cost, but hoists are lifted out of the function - we need\r\n            // to provide the helper here.\r\n            if (ast.hoists.length) {\r\n                const staticHelpers = [\r\n                    CREATE_VNODE,\r\n                    CREATE_ELEMENT_VNODE,\r\n                    CREATE_COMMENT,\r\n                    CREATE_TEXT,\r\n                    CREATE_STATIC\r\n                ]\r\n                    .filter(helper => ast.helpers.includes(helper))\r\n                    .map(aliasHelper)\r\n                    .join(\', \');\r\n                push(`const { ${staticHelpers} } = _Vue\\n`);\r\n            }\r\n        }\r\n    }\r\n    genHoists(ast.hoists, context);\r\n    newline();\r\n    push(`return `);\r\n}\r\nfunction genAssets(assets, type, { helper, push, newline, isTS }) {\r\n    const resolver = helper(type === \'filter\'\r\n        ? RESOLVE_FILTER\r\n        : type === \'component\'\r\n            ? RESOLVE_COMPONENT\r\n            : RESOLVE_DIRECTIVE);\r\n    for (let i = 0; i < assets.length; i++) {\r\n        let id = assets[i];\r\n        // potential component implicit self-reference inferred from SFC filename\r\n        const maybeSelfReference = id.endsWith(\'__self\');\r\n        if (maybeSelfReference) {\r\n            id = id.slice(0, -6);\r\n        }\r\n        push(`const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`);\r\n        if (i < assets.length - 1) {\r\n            newline();\r\n        }\r\n    }\r\n}\r\nfunction genHoists(hoists, context) {\r\n    if (!hoists.length) {\r\n        return;\r\n    }\r\n    context.pure = true;\r\n    const { push, newline, helper, scopeId, mode } = context;\r\n    newline();\r\n    for (let i = 0; i < hoists.length; i++) {\r\n        const exp = hoists[i];\r\n        if (exp) {\r\n            push(`const _hoisted_${i + 1} = ${``}`);\r\n            genNode(exp, context);\r\n            newline();\r\n        }\r\n    }\r\n    context.pure = false;\r\n}\r\nfunction isText$1(n) {\r\n    return (isString(n) ||\r\n        n.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n        n.type === 2 /* TEXT */ ||\r\n        n.type === 5 /* INTERPOLATION */ ||\r\n        n.type === 8 /* COMPOUND_EXPRESSION */);\r\n}\r\nfunction genNodeListAsArray(nodes, context) {\r\n    const multilines = nodes.length > 3 ||\r\n        ((( false)) && 0);\r\n    context.push(`[`);\r\n    multilines && context.indent();\r\n    genNodeList(nodes, context, multilines);\r\n    multilines && context.deindent();\r\n    context.push(`]`);\r\n}\r\nfunction genNodeList(nodes, context, multilines = false, comma = true) {\r\n    const { push, newline } = context;\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        const node = nodes[i];\r\n        if (shared_esm_bundler_isString(node)) {\r\n            push(node);\r\n        }\r\n        else if (shared_esm_bundler_isArray(node)) {\r\n            genNodeListAsArray(node, context);\r\n        }\r\n        else {\r\n            genNode(node, context);\r\n        }\r\n        if (i < nodes.length - 1) {\r\n            if (multilines) {\r\n                comma && push(\',\');\r\n                newline();\r\n            }\r\n            else {\r\n                comma && push(\', \');\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction genNode(node, context) {\r\n    if (shared_esm_bundler_isString(node)) {\r\n        context.push(node);\r\n        return;\r\n    }\r\n    if (isSymbol(node)) {\r\n        context.push(context.helper(node));\r\n        return;\r\n    }\r\n    switch (node.type) {\r\n        case 1 /* ELEMENT */:\r\n        case 9 /* IF */:\r\n        case 11 /* FOR */:\r\n            ( false) &&\r\n                0;\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 2 /* TEXT */:\r\n            genText(node, context);\r\n            break;\r\n        case 4 /* SIMPLE_EXPRESSION */:\r\n            genExpression(node, context);\r\n            break;\r\n        case 5 /* INTERPOLATION */:\r\n            genInterpolation(node, context);\r\n            break;\r\n        case 12 /* TEXT_CALL */:\r\n            genNode(node.codegenNode, context);\r\n            break;\r\n        case 8 /* COMPOUND_EXPRESSION */:\r\n            genCompoundExpression(node, context);\r\n            break;\r\n        case 3 /* COMMENT */:\r\n            genComment(node, context);\r\n            break;\r\n        case 13 /* VNODE_CALL */:\r\n            genVNodeCall(node, context);\r\n            break;\r\n        case 14 /* JS_CALL_EXPRESSION */:\r\n            genCallExpression(node, context);\r\n            break;\r\n        case 15 /* JS_OBJECT_EXPRESSION */:\r\n            genObjectExpression(node, context);\r\n            break;\r\n        case 17 /* JS_ARRAY_EXPRESSION */:\r\n            genArrayExpression(node, context);\r\n            break;\r\n        case 18 /* JS_FUNCTION_EXPRESSION */:\r\n            genFunctionExpression(node, context);\r\n            break;\r\n        case 19 /* JS_CONDITIONAL_EXPRESSION */:\r\n            genConditionalExpression(node, context);\r\n            break;\r\n        case 20 /* JS_CACHE_EXPRESSION */:\r\n            genCacheExpression(node, context);\r\n            break;\r\n        case 21 /* JS_BLOCK_STATEMENT */:\r\n            genNodeList(node.body, context, true, false);\r\n            break;\r\n        // SSR only types\r\n        case 22 /* JS_TEMPLATE_LITERAL */:\r\n            break;\r\n        case 23 /* JS_IF_STATEMENT */:\r\n            break;\r\n        case 24 /* JS_ASSIGNMENT_EXPRESSION */:\r\n            break;\r\n        case 25 /* JS_SEQUENCE_EXPRESSION */:\r\n            break;\r\n        case 26 /* JS_RETURN_STATEMENT */:\r\n            break;\r\n        /* istanbul ignore next */\r\n        case 10 /* IF_BRANCH */:\r\n            // noop\r\n            break;\r\n        default:\r\n            if ((false)) {}\r\n    }\r\n}\r\nfunction genText(node, context) {\r\n    context.push(JSON.stringify(node.content), node);\r\n}\r\nfunction genExpression(node, context) {\r\n    const { content, isStatic } = node;\r\n    context.push(isStatic ? JSON.stringify(content) : content, node);\r\n}\r\nfunction genInterpolation(node, context) {\r\n    const { push, helper, pure } = context;\r\n    if (pure)\r\n        push(PURE_ANNOTATION);\r\n    push(`${helper(TO_DISPLAY_STRING)}(`);\r\n    genNode(node.content, context);\r\n    push(`)`);\r\n}\r\nfunction genCompoundExpression(node, context) {\r\n    for (let i = 0; i < node.children.length; i++) {\r\n        const child = node.children[i];\r\n        if (shared_esm_bundler_isString(child)) {\r\n            context.push(child);\r\n        }\r\n        else {\r\n            genNode(child, context);\r\n        }\r\n    }\r\n}\r\nfunction genExpressionAsPropertyKey(node, context) {\r\n    const { push } = context;\r\n    if (node.type === 8 /* COMPOUND_EXPRESSION */) {\r\n        push(`[`);\r\n        genCompoundExpression(node, context);\r\n        push(`]`);\r\n    }\r\n    else if (node.isStatic) {\r\n        // only quote keys if necessary\r\n        const text = isSimpleIdentifier(node.content)\r\n            ? node.content\r\n            : JSON.stringify(node.content);\r\n        push(text, node);\r\n    }\r\n    else {\r\n        push(`[${node.content}]`, node);\r\n    }\r\n}\r\nfunction genComment(node, context) {\r\n    const { push, helper, pure } = context;\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    push(`${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`, node);\r\n}\r\nfunction genVNodeCall(node, context) {\r\n    const { push, helper, pure } = context;\r\n    const { tag, props, children, patchFlag, dynamicProps, directives, isBlock, disableTracking, isComponent } = node;\r\n    if (directives) {\r\n        push(helper(WITH_DIRECTIVES) + `(`);\r\n    }\r\n    if (isBlock) {\r\n        push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);\r\n    }\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    const callHelper = isBlock\r\n        ? getVNodeBlockHelper(context.inSSR, isComponent)\r\n        : getVNodeHelper(context.inSSR, isComponent);\r\n    push(helper(callHelper) + `(`, node);\r\n    genNodeList(genNullableArgs([tag, props, children, patchFlag, dynamicProps]), context);\r\n    push(`)`);\r\n    if (isBlock) {\r\n        push(`)`);\r\n    }\r\n    if (directives) {\r\n        push(`, `);\r\n        genNode(directives, context);\r\n        push(`)`);\r\n    }\r\n}\r\nfunction genNullableArgs(args) {\r\n    let i = args.length;\r\n    while (i--) {\r\n        if (args[i] != null)\r\n            break;\r\n    }\r\n    return args.slice(0, i + 1).map(arg => arg || `null`);\r\n}\r\n// JavaScript\r\nfunction genCallExpression(node, context) {\r\n    const { push, helper, pure } = context;\r\n    const callee = shared_esm_bundler_isString(node.callee) ? node.callee : helper(node.callee);\r\n    if (pure) {\r\n        push(PURE_ANNOTATION);\r\n    }\r\n    push(callee + `(`, node);\r\n    genNodeList(node.arguments, context);\r\n    push(`)`);\r\n}\r\nfunction genObjectExpression(node, context) {\r\n    const { push, indent, deindent, newline } = context;\r\n    const { properties } = node;\r\n    if (!properties.length) {\r\n        push(`{}`, node);\r\n        return;\r\n    }\r\n    const multilines = properties.length > 1 ||\r\n        ((( false)) &&\r\n            0);\r\n    push(multilines ? `{` : `{ `);\r\n    multilines && indent();\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const { key, value } = properties[i];\r\n        // key\r\n        genExpressionAsPropertyKey(key, context);\r\n        push(`: `);\r\n        // value\r\n        genNode(value, context);\r\n        if (i < properties.length - 1) {\r\n            // will only reach this if it\'s multilines\r\n            push(`,`);\r\n            newline();\r\n        }\r\n    }\r\n    multilines && deindent();\r\n    push(multilines ? `}` : ` }`);\r\n}\r\nfunction genArrayExpression(node, context) {\r\n    genNodeListAsArray(node.elements, context);\r\n}\r\nfunction genFunctionExpression(node, context) {\r\n    const { push, indent, deindent } = context;\r\n    const { params, returns, body, newline, isSlot } = node;\r\n    if (isSlot) {\r\n        // wrap slot functions with owner context\r\n        push(`_${helperNameMap[WITH_CTX]}(`);\r\n    }\r\n    push(`(`, node);\r\n    if (shared_esm_bundler_isArray(params)) {\r\n        genNodeList(params, context);\r\n    }\r\n    else if (params) {\r\n        genNode(params, context);\r\n    }\r\n    push(`) => `);\r\n    if (newline || body) {\r\n        push(`{`);\r\n        indent();\r\n    }\r\n    if (returns) {\r\n        if (newline) {\r\n            push(`return `);\r\n        }\r\n        if (shared_esm_bundler_isArray(returns)) {\r\n            genNodeListAsArray(returns, context);\r\n        }\r\n        else {\r\n            genNode(returns, context);\r\n        }\r\n    }\r\n    else if (body) {\r\n        genNode(body, context);\r\n    }\r\n    if (newline || body) {\r\n        deindent();\r\n        push(`}`);\r\n    }\r\n    if (isSlot) {\r\n        if (node.isNonScopedSlot) {\r\n            push(`, undefined, true`);\r\n        }\r\n        push(`)`);\r\n    }\r\n}\r\nfunction genConditionalExpression(node, context) {\r\n    const { test, consequent, alternate, newline: needNewline } = node;\r\n    const { push, indent, deindent, newline } = context;\r\n    if (test.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        const needsParens = !isSimpleIdentifier(test.content);\r\n        needsParens && push(`(`);\r\n        genExpression(test, context);\r\n        needsParens && push(`)`);\r\n    }\r\n    else {\r\n        push(`(`);\r\n        genNode(test, context);\r\n        push(`)`);\r\n    }\r\n    needNewline && indent();\r\n    context.indentLevel++;\r\n    needNewline || push(` `);\r\n    push(`? `);\r\n    genNode(consequent, context);\r\n    context.indentLevel--;\r\n    needNewline && newline();\r\n    needNewline || push(` `);\r\n    push(`: `);\r\n    const isNested = alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */;\r\n    if (!isNested) {\r\n        context.indentLevel++;\r\n    }\r\n    genNode(alternate, context);\r\n    if (!isNested) {\r\n        context.indentLevel--;\r\n    }\r\n    needNewline && deindent(true /* without newline */);\r\n}\r\nfunction genCacheExpression(node, context) {\r\n    const { push, helper, indent, deindent, newline } = context;\r\n    push(`_cache[${node.index}] || (`);\r\n    if (node.isVNode) {\r\n        indent();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(-1),`);\r\n        newline();\r\n    }\r\n    push(`_cache[${node.index}] = `);\r\n    genNode(node.value, context);\r\n    if (node.isVNode) {\r\n        push(`,`);\r\n        newline();\r\n        push(`${helper(SET_BLOCK_TRACKING)}(1),`);\r\n        newline();\r\n        push(`_cache[${node.index}]`);\r\n        deindent();\r\n    }\r\n    push(`)`);\r\n}\n\nfunction walkIdentifiers(root, onIdentifier, includeAll = false, parentStack = [], knownIds = Object.create(null)) {\r\n    {\r\n        return;\r\n    }\r\n}\r\nfunction isReferencedIdentifier(id, parent, parentStack) {\r\n    {\r\n        return false;\r\n    }\r\n}\r\nfunction isInDestructureAssignment(parent, parentStack) {\r\n    if (parent &&\r\n        (parent.type === \'ObjectProperty\' || parent.type === \'ArrayPattern\')) {\r\n        let i = parentStack.length;\r\n        while (i--) {\r\n            const p = parentStack[i];\r\n            if (p.type === \'AssignmentExpression\') {\r\n                return true;\r\n            }\r\n            else if (p.type !== \'ObjectProperty\' && !p.type.endsWith(\'Pattern\')) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction walkFunctionParams(node, onIdent) {\r\n    for (const p of node.params) {\r\n        for (const id of extractIdentifiers(p)) {\r\n            onIdent(id);\r\n        }\r\n    }\r\n}\r\nfunction walkBlockDeclarations(block, onIdent) {\r\n    for (const stmt of block.body) {\r\n        if (stmt.type === \'VariableDeclaration\') {\r\n            if (stmt.declare)\r\n                continue;\r\n            for (const decl of stmt.declarations) {\r\n                for (const id of extractIdentifiers(decl.id)) {\r\n                    onIdent(id);\r\n                }\r\n            }\r\n        }\r\n        else if (stmt.type === \'FunctionDeclaration\' ||\r\n            stmt.type === \'ClassDeclaration\') {\r\n            if (stmt.declare || !stmt.id)\r\n                continue;\r\n            onIdent(stmt.id);\r\n        }\r\n    }\r\n}\r\nfunction extractIdentifiers(param, nodes = []) {\r\n    switch (param.type) {\r\n        case \'Identifier\':\r\n            nodes.push(param);\r\n            break;\r\n        case \'MemberExpression\':\r\n            let object = param;\r\n            while (object.type === \'MemberExpression\') {\r\n                object = object.object;\r\n            }\r\n            nodes.push(object);\r\n            break;\r\n        case \'ObjectPattern\':\r\n            for (const prop of param.properties) {\r\n                if (prop.type === \'RestElement\') {\r\n                    extractIdentifiers(prop.argument, nodes);\r\n                }\r\n                else {\r\n                    extractIdentifiers(prop.value, nodes);\r\n                }\r\n            }\r\n            break;\r\n        case \'ArrayPattern\':\r\n            param.elements.forEach(element => {\r\n                if (element)\r\n                    extractIdentifiers(element, nodes);\r\n            });\r\n            break;\r\n        case \'RestElement\':\r\n            extractIdentifiers(param.argument, nodes);\r\n            break;\r\n        case \'AssignmentPattern\':\r\n            extractIdentifiers(param.left, nodes);\r\n            break;\r\n    }\r\n    return nodes;\r\n}\r\nconst isFunctionType = (node) => {\r\n    return /Function(?:Expression|Declaration)$|Method$/.test(node.type);\r\n};\r\nconst isStaticProperty = (node) => node &&\r\n    (node.type === \'ObjectProperty\' || node.type === \'ObjectMethod\') &&\r\n    !node.computed;\r\nconst isStaticPropertyKey = (node, parent) => isStaticProperty(parent) && parent.key === node;\n\n// these keywords should not appear inside expressions, but operators like\r\n// typeof, instanceof and in are allowed\r\nconst prohibitedKeywordRE = new RegExp(\'\\\\b\' +\r\n    (\'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,\' +\r\n        \'super,throw,while,yield,delete,export,import,return,switch,default,\' +\r\n        \'extends,finally,continue,debugger,function,arguments,typeof,void\')\r\n        .split(\',\')\r\n        .join(\'\\\\b|\\\\b\') +\r\n    \'\\\\b\');\r\n// strip strings in expressions\r\nconst stripStringRE = /\'(?:[^\'\\\\]|\\\\.)*\'|"(?:[^"\\\\]|\\\\.)*"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\r\n/**\r\n * Validate a non-prefixed expression.\r\n * This is only called when using the in-browser runtime compiler since it\r\n * doesn\'t prefix expressions.\r\n */\r\nfunction validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {\r\n    const exp = node.content;\r\n    // empty expressions are validated per-directive since some directives\r\n    // do allow empty expressions.\r\n    if (!exp.trim()) {\r\n        return;\r\n    }\r\n    try {\r\n        new Function(asRawStatements\r\n            ? ` ${exp} `\r\n            : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`);\r\n    }\r\n    catch (e) {\r\n        let message = e.message;\r\n        const keywordMatch = exp\r\n            .replace(stripStringRE, \'\')\r\n            .match(prohibitedKeywordRE);\r\n        if (keywordMatch) {\r\n            message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;\r\n        }\r\n        context.onError(createCompilerError(44 /* X_INVALID_EXPRESSION */, node.loc, undefined, message));\r\n    }\r\n}\n\nconst transformExpression = (node, context) => {\r\n    if (node.type === 5 /* INTERPOLATION */) {\r\n        node.content = processExpression(node.content, context);\r\n    }\r\n    else if (node.type === 1 /* ELEMENT */) {\r\n        // handle directives on element\r\n        for (let i = 0; i < node.props.length; i++) {\r\n            const dir = node.props[i];\r\n            // do not process for v-on & v-for since they are special handled\r\n            if (dir.type === 7 /* DIRECTIVE */ && dir.name !== \'for\') {\r\n                const exp = dir.exp;\r\n                const arg = dir.arg;\r\n                // do not process exp if this is v-on:arg - we need special handling\r\n                // for wrapping inline statements.\r\n                if (exp &&\r\n                    exp.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n                    !(dir.name === \'on\' && arg)) {\r\n                    dir.exp = processExpression(exp, context, \r\n                    // slot args must be processed as function params\r\n                    dir.name === \'slot\');\r\n                }\r\n                if (arg && arg.type === 4 /* SIMPLE_EXPRESSION */ && !arg.isStatic) {\r\n                    dir.arg = processExpression(arg, context);\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n// Important: since this function uses Node.js only dependencies, it should\r\n// always be used with a leading !true check so that it can be\r\n// tree-shaken from the browser build.\r\nfunction processExpression(node, context, \r\n// some expressions like v-slot props & v-for aliases should be parsed as\r\n// function params\r\nasParams = false, \r\n// v-on handler values may contain multiple statements\r\nasRawStatements = false, localVars = Object.create(context.identifiers)) {\r\n    {\r\n        if ((false)) {}\r\n        return node;\r\n    }\r\n}\n\nconst transformIf = createStructuralDirectiveTransform(/^(if|else|else-if)$/, (node, dir, context) => {\r\n    return processIf(node, dir, context, (ifNode, branch, isRoot) => {\r\n        // #1587: We need to dynamically increment the key based on the current\r\n        // node\'s sibling nodes, since chained v-if/else branches are\r\n        // rendered at the same depth\r\n        const siblings = context.parent.children;\r\n        let i = siblings.indexOf(ifNode);\r\n        let key = 0;\r\n        while (i-- >= 0) {\r\n            const sibling = siblings[i];\r\n            if (sibling && sibling.type === 9 /* IF */) {\r\n                key += sibling.branches.length;\r\n            }\r\n        }\r\n        // Exit callback. Complete the codegenNode when all children have been\r\n        // transformed.\r\n        return () => {\r\n            if (isRoot) {\r\n                ifNode.codegenNode = createCodegenNodeForBranch(branch, key, context);\r\n            }\r\n            else {\r\n                // attach this branch\'s codegen node to the v-if root.\r\n                const parentCondition = getParentCondition(ifNode.codegenNode);\r\n                parentCondition.alternate = createCodegenNodeForBranch(branch, key + ifNode.branches.length - 1, context);\r\n            }\r\n        };\r\n    });\r\n});\r\n// target-agnostic transform used for both Client and SSR\r\nfunction processIf(node, dir, context, processCodegen) {\r\n    if (dir.name !== \'else\' &&\r\n        (!dir.exp || !dir.exp.content.trim())) {\r\n        const loc = dir.exp ? dir.exp.loc : node.loc;\r\n        context.onError(createCompilerError(28 /* X_V_IF_NO_EXPRESSION */, dir.loc));\r\n        dir.exp = createSimpleExpression(`true`, false, loc);\r\n    }\r\n    if (false) {}\r\n    if (dir.name === \'if\') {\r\n        const branch = createIfBranch(node, dir);\r\n        const ifNode = {\r\n            type: 9 /* IF */,\r\n            loc: node.loc,\r\n            branches: [branch]\r\n        };\r\n        context.replaceNode(ifNode);\r\n        if (processCodegen) {\r\n            return processCodegen(ifNode, branch, true);\r\n        }\r\n    }\r\n    else {\r\n        // locate the adjacent v-if\r\n        const siblings = context.parent.children;\r\n        const comments = [];\r\n        let i = siblings.indexOf(node);\r\n        while (i-- >= -1) {\r\n            const sibling = siblings[i];\r\n            if (false /* COMMENT */) {}\r\n            if (sibling &&\r\n                sibling.type === 2 /* TEXT */ &&\r\n                !sibling.content.trim().length) {\r\n                context.removeNode(sibling);\r\n                continue;\r\n            }\r\n            if (sibling && sibling.type === 9 /* IF */) {\r\n                // Check if v-else was followed by v-else-if\r\n                if (dir.name === \'else-if\' &&\r\n                    sibling.branches[sibling.branches.length - 1].condition === undefined) {\r\n                    context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc));\r\n                }\r\n                // move the node to the if node\'s branches\r\n                context.removeNode();\r\n                const branch = createIfBranch(node, dir);\r\n                if (false) {}\r\n                // check if user is forcing same key on different branches\r\n                if (false) {}\r\n                sibling.branches.push(branch);\r\n                const onExit = processCodegen && processCodegen(sibling, branch, false);\r\n                // since the branch was removed, it will not be traversed.\r\n                // make sure to traverse here.\r\n                traverseNode(branch, context);\r\n                // call on exit\r\n                if (onExit)\r\n                    onExit();\r\n                // make sure to reset currentNode after traversal to indicate this\r\n                // node has been removed.\r\n                context.currentNode = null;\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */, node.loc));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n}\r\nfunction createIfBranch(node, dir) {\r\n    return {\r\n        type: 10 /* IF_BRANCH */,\r\n        loc: node.loc,\r\n        condition: dir.name === \'else\' ? undefined : dir.exp,\r\n        children: node.tagType === 3 /* TEMPLATE */ && !findDir(node, \'for\')\r\n            ? node.children\r\n            : [node],\r\n        userKey: findProp(node, `key`)\r\n    };\r\n}\r\nfunction createCodegenNodeForBranch(branch, keyIndex, context) {\r\n    if (branch.condition) {\r\n        return createConditionalExpression(branch.condition, createChildrenCodegenNode(branch, keyIndex, context), \r\n        // make sure to pass in asBlock: true so that the comment node call\r\n        // closes the current block.\r\n        createCallExpression(context.helper(CREATE_COMMENT), [\r\n            ( false) ? 0 : \'""\',\r\n            \'true\'\r\n        ]));\r\n    }\r\n    else {\r\n        return createChildrenCodegenNode(branch, keyIndex, context);\r\n    }\r\n}\r\nfunction createChildrenCodegenNode(branch, keyIndex, context) {\r\n    const { helper } = context;\r\n    const keyProperty = createObjectProperty(`key`, createSimpleExpression(`${keyIndex}`, false, locStub, 2 /* CAN_HOIST */));\r\n    const { children } = branch;\r\n    const firstChild = children[0];\r\n    const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1 /* ELEMENT */;\r\n    if (needFragmentWrapper) {\r\n        if (children.length === 1 && firstChild.type === 11 /* FOR */) {\r\n            // optimize away nested fragments when child is a ForNode\r\n            const vnodeCall = firstChild.codegenNode;\r\n            injectProp(vnodeCall, keyProperty, context);\r\n            return vnodeCall;\r\n        }\r\n        else {\r\n            let patchFlag = 64 /* STABLE_FRAGMENT */;\r\n            let patchFlagText = PatchFlagNames[64];\r\n            // check if the fragment actually contains a single valid child with\r\n            // the rest being comments\r\n            if (false) {}\r\n            return createVNodeCall(context, helper(FRAGMENT), createObjectExpression([keyProperty]), children, patchFlag + (( false) ? 0 : ``), undefined, undefined, true, false, false /* isComponent */, branch.loc);\r\n        }\r\n    }\r\n    else {\r\n        const ret = firstChild.codegenNode;\r\n        const vnodeCall = getMemoedVNodeCall(ret);\r\n        // Change createVNode to createBlock.\r\n        if (vnodeCall.type === 13 /* VNODE_CALL */) {\r\n            makeBlock(vnodeCall, context);\r\n        }\r\n        // inject branch key\r\n        injectProp(vnodeCall, keyProperty, context);\r\n        return ret;\r\n    }\r\n}\r\nfunction isSameKey(a, b) {\r\n    if (!a || a.type !== b.type) {\r\n        return false;\r\n    }\r\n    if (a.type === 6 /* ATTRIBUTE */) {\r\n        if (a.value.content !== b.value.content) {\r\n            return false;\r\n        }\r\n    }\r\n    else {\r\n        // directive\r\n        const exp = a.exp;\r\n        const branchExp = b.exp;\r\n        if (exp.type !== branchExp.type) {\r\n            return false;\r\n        }\r\n        if (exp.type !== 4 /* SIMPLE_EXPRESSION */ ||\r\n            exp.isStatic !== branchExp.isStatic ||\r\n            exp.content !== branchExp.content) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction getParentCondition(node) {\r\n    while (true) {\r\n        if (node.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n            if (node.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                node = node.alternate;\r\n            }\r\n            else {\r\n                return node;\r\n            }\r\n        }\r\n        else if (node.type === 20 /* JS_CACHE_EXPRESSION */) {\r\n            node = node.value;\r\n        }\r\n    }\r\n}\n\nconst transformFor = createStructuralDirectiveTransform(\'for\', (node, dir, context) => {\r\n    const { helper, removeHelper } = context;\r\n    return processFor(node, dir, context, forNode => {\r\n        // create the loop render function expression now, and add the\r\n        // iterator on exit after all children have been traversed\r\n        const renderExp = createCallExpression(helper(RENDER_LIST), [\r\n            forNode.source\r\n        ]);\r\n        const isTemplate = isTemplateNode(node);\r\n        const memo = findDir(node, \'memo\');\r\n        const keyProp = findProp(node, `key`);\r\n        const keyExp = keyProp &&\r\n            (keyProp.type === 6 /* ATTRIBUTE */\r\n                ? createSimpleExpression(keyProp.value.content, true)\r\n                : keyProp.exp);\r\n        const keyProperty = keyProp ? createObjectProperty(`key`, keyExp) : null;\r\n        const isStableFragment = forNode.source.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n            forNode.source.constType > 0 /* NOT_CONSTANT */;\r\n        const fragmentFlag = isStableFragment\r\n            ? 64 /* STABLE_FRAGMENT */\r\n            : keyProp\r\n                ? 128 /* KEYED_FRAGMENT */\r\n                : 256 /* UNKEYED_FRAGMENT */;\r\n        forNode.codegenNode = createVNodeCall(context, helper(FRAGMENT), undefined, renderExp, fragmentFlag +\r\n            (( false) ? 0 : ``), undefined, undefined, true /* isBlock */, !isStableFragment /* disableTracking */, false /* isComponent */, node.loc);\r\n        return () => {\r\n            // finish the codegen now that all children have been traversed\r\n            let childBlock;\r\n            const { children } = forNode;\r\n            // check <template v-for> key placement\r\n            if (false) {}\r\n            const needFragmentWrapper = children.length !== 1 || children[0].type !== 1 /* ELEMENT */;\r\n            const slotOutlet = isSlotOutlet(node)\r\n                ? node\r\n                : isTemplate &&\r\n                    node.children.length === 1 &&\r\n                    isSlotOutlet(node.children[0])\r\n                    ? node.children[0] // api-extractor somehow fails to infer this\r\n                    : null;\r\n            if (slotOutlet) {\r\n                // <slot v-for="..."> or <template v-for="..."><slot/></template>\r\n                childBlock = slotOutlet.codegenNode;\r\n                if (isTemplate && keyProperty) {\r\n                    // <template v-for="..." :key="..."><slot/></template>\r\n                    // we need to inject the key to the renderSlot() call.\r\n                    // the props for renderSlot is passed as the 3rd argument.\r\n                    injectProp(childBlock, keyProperty, context);\r\n                }\r\n            }\r\n            else if (needFragmentWrapper) {\r\n                // <template v-for="..."> with text or multi-elements\r\n                // should generate a fragment block for each loop\r\n                childBlock = createVNodeCall(context, helper(FRAGMENT), keyProperty ? createObjectExpression([keyProperty]) : undefined, node.children, 64 /* STABLE_FRAGMENT */ +\r\n                    (( false)\r\n                        ? 0\r\n                        : ``), undefined, undefined, true, undefined, false /* isComponent */);\r\n            }\r\n            else {\r\n                // Normal element v-for. Directly use the child\'s codegenNode\r\n                // but mark it as a block.\r\n                childBlock = children[0]\r\n                    .codegenNode;\r\n                if (isTemplate && keyProperty) {\r\n                    injectProp(childBlock, keyProperty, context);\r\n                }\r\n                if (childBlock.isBlock !== !isStableFragment) {\r\n                    if (childBlock.isBlock) {\r\n                        // switch from block to vnode\r\n                        removeHelper(OPEN_BLOCK);\r\n                        removeHelper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\r\n                    }\r\n                    else {\r\n                        // switch from vnode to block\r\n                        removeHelper(getVNodeHelper(context.inSSR, childBlock.isComponent));\r\n                    }\r\n                }\r\n                childBlock.isBlock = !isStableFragment;\r\n                if (childBlock.isBlock) {\r\n                    helper(OPEN_BLOCK);\r\n                    helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));\r\n                }\r\n                else {\r\n                    helper(getVNodeHelper(context.inSSR, childBlock.isComponent));\r\n                }\r\n            }\r\n            if (memo) {\r\n                const loop = createFunctionExpression(createForLoopParams(forNode.parseResult, [\r\n                    createSimpleExpression(`_cached`)\r\n                ]));\r\n                loop.body = createBlockStatement([\r\n                    createCompoundExpression([`const _memo = (`, memo.exp, `)`]),\r\n                    createCompoundExpression([\r\n                        `if (_cached`,\r\n                        ...(keyExp ? [` && _cached.key === `, keyExp] : []),\r\n                        ` && ${context.helperString(IS_MEMO_SAME)}(_cached, _memo)) return _cached`\r\n                    ]),\r\n                    createCompoundExpression([`const _item = `, childBlock]),\r\n                    createSimpleExpression(`_item.memo = _memo`),\r\n                    createSimpleExpression(`return _item`)\r\n                ]);\r\n                renderExp.arguments.push(loop, createSimpleExpression(`_cache`), createSimpleExpression(String(context.cached++)));\r\n            }\r\n            else {\r\n                renderExp.arguments.push(createFunctionExpression(createForLoopParams(forNode.parseResult), childBlock, true /* force newline */));\r\n            }\r\n        };\r\n    });\r\n});\r\n// target-agnostic transform used for both Client and SSR\r\nfunction processFor(node, dir, context, processCodegen) {\r\n    if (!dir.exp) {\r\n        context.onError(createCompilerError(31 /* X_V_FOR_NO_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const parseResult = parseForExpression(\r\n    // can only be simple expression because vFor transform is applied\r\n    // before expression transform.\r\n    dir.exp, context);\r\n    if (!parseResult) {\r\n        context.onError(createCompilerError(32 /* X_V_FOR_MALFORMED_EXPRESSION */, dir.loc));\r\n        return;\r\n    }\r\n    const { addIdentifiers, removeIdentifiers, scopes } = context;\r\n    const { source, value, key, index } = parseResult;\r\n    const forNode = {\r\n        type: 11 /* FOR */,\r\n        loc: dir.loc,\r\n        source,\r\n        valueAlias: value,\r\n        keyAlias: key,\r\n        objectIndexAlias: index,\r\n        parseResult,\r\n        children: isTemplateNode(node) ? node.children : [node]\r\n    };\r\n    context.replaceNode(forNode);\r\n    // bookkeeping\r\n    scopes.vFor++;\r\n    const onExit = processCodegen && processCodegen(forNode);\r\n    return () => {\r\n        scopes.vFor--;\r\n        if (onExit)\r\n            onExit();\r\n    };\r\n}\r\nconst forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\r\n// This regex doesn\'t cover the case if key or index aliases have destructuring,\r\n// but those do not make sense in the first place, so this works in practice.\r\nconst forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\nconst stripParensRE = /^\\(|\\)$/g;\r\nfunction parseForExpression(input, context) {\r\n    const loc = input.loc;\r\n    const exp = input.content;\r\n    const inMatch = exp.match(forAliasRE);\r\n    if (!inMatch)\r\n        return;\r\n    const [, LHS, RHS] = inMatch;\r\n    const result = {\r\n        source: createAliasExpression(loc, RHS.trim(), exp.indexOf(RHS, LHS.length)),\r\n        value: undefined,\r\n        key: undefined,\r\n        index: undefined\r\n    };\r\n    if (false) {}\r\n    let valueContent = LHS.trim().replace(stripParensRE, \'\').trim();\r\n    const trimmedOffset = LHS.indexOf(valueContent);\r\n    const iteratorMatch = valueContent.match(forIteratorRE);\r\n    if (iteratorMatch) {\r\n        valueContent = valueContent.replace(forIteratorRE, \'\').trim();\r\n        const keyContent = iteratorMatch[1].trim();\r\n        let keyOffset;\r\n        if (keyContent) {\r\n            keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);\r\n            result.key = createAliasExpression(loc, keyContent, keyOffset);\r\n            if (false) {}\r\n        }\r\n        if (iteratorMatch[2]) {\r\n            const indexContent = iteratorMatch[2].trim();\r\n            if (indexContent) {\r\n                result.index = createAliasExpression(loc, indexContent, exp.indexOf(indexContent, result.key\r\n                    ? keyOffset + keyContent.length\r\n                    : trimmedOffset + valueContent.length));\r\n                if (false) {}\r\n            }\r\n        }\r\n    }\r\n    if (valueContent) {\r\n        result.value = createAliasExpression(loc, valueContent, trimmedOffset);\r\n        if (false) {}\r\n    }\r\n    return result;\r\n}\r\nfunction createAliasExpression(range, content, offset) {\r\n    return createSimpleExpression(content, false, getInnerRange(range, offset, content.length));\r\n}\r\nfunction createForLoopParams({ value, key, index }, memoArgs = []) {\r\n    return createParamsList([value, key, index, ...memoArgs]);\r\n}\r\nfunction createParamsList(args) {\r\n    let i = args.length;\r\n    while (i--) {\r\n        if (args[i])\r\n            break;\r\n    }\r\n    return args\r\n        .slice(0, i + 1)\r\n        .map((arg, i) => arg || createSimpleExpression(`_`.repeat(i + 1), false));\r\n}\n\nconst defaultFallback = createSimpleExpression(`undefined`, false);\r\n// A NodeTransform that:\r\n// 1. Tracks scope identifiers for scoped slots so that they don\'t get prefixed\r\n//    by transformExpression. This is only applied in non-browser builds with\r\n//    { prefixIdentifiers: true }.\r\n// 2. Track v-slot depths so that we know a slot is inside another slot.\r\n//    Note the exit callback is executed before buildSlots() on the same node,\r\n//    so only nested slots see positive numbers.\r\nconst trackSlotScopes = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        (node.tagType === 1 /* COMPONENT */ ||\r\n            node.tagType === 3 /* TEMPLATE */)) {\r\n        // We are only checking non-empty v-slot here\r\n        // since we only care about slots that introduce scope variables.\r\n        const vSlot = findDir(node, \'slot\');\r\n        if (vSlot) {\r\n            vSlot.exp;\r\n            context.scopes.vSlot++;\r\n            return () => {\r\n                context.scopes.vSlot--;\r\n            };\r\n        }\r\n    }\r\n};\r\n// A NodeTransform that tracks scope identifiers for scoped slots with v-for.\r\n// This transform is only applied in non-browser builds with { prefixIdentifiers: true }\r\nconst trackVForSlotScopes = (node, context) => {\r\n    let vFor;\r\n    if (isTemplateNode(node) &&\r\n        node.props.some(isVSlot) &&\r\n        (vFor = findDir(node, \'for\'))) {\r\n        const result = (vFor.parseResult = parseForExpression(vFor.exp, context));\r\n        if (result) {\r\n            const { value, key, index } = result;\r\n            const { addIdentifiers, removeIdentifiers } = context;\r\n            value && addIdentifiers(value);\r\n            key && addIdentifiers(key);\r\n            index && addIdentifiers(index);\r\n            return () => {\r\n                value && removeIdentifiers(value);\r\n                key && removeIdentifiers(key);\r\n                index && removeIdentifiers(index);\r\n            };\r\n        }\r\n    }\r\n};\r\nconst buildClientSlotFn = (props, children, loc) => createFunctionExpression(props, children, false /* newline */, true /* isSlot */, children.length ? children[0].loc : loc);\r\n// Instead of being a DirectiveTransform, v-slot processing is called during\r\n// transformElement to build the slots object for a component.\r\nfunction buildSlots(node, context, buildSlotFn = buildClientSlotFn) {\r\n    context.helper(WITH_CTX);\r\n    const { children, loc } = node;\r\n    const slotsProperties = [];\r\n    const dynamicSlots = [];\r\n    // If the slot is inside a v-for or another v-slot, force it to be dynamic\r\n    // since it likely uses a scope variable.\r\n    let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;\r\n    // 1. Check for slot with slotProps on component itself.\r\n    //    <Comp v-slot="{ prop }"/>\r\n    const onComponentSlot = findDir(node, \'slot\', true);\r\n    if (onComponentSlot) {\r\n        const { arg, exp } = onComponentSlot;\r\n        if (arg && !isStaticExp(arg)) {\r\n            hasDynamicSlots = true;\r\n        }\r\n        slotsProperties.push(createObjectProperty(arg || createSimpleExpression(\'default\', true), buildSlotFn(exp, children, loc)));\r\n    }\r\n    // 2. Iterate through children and check for template slots\r\n    //    <template v-slot:foo="{ prop }">\r\n    let hasTemplateSlots = false;\r\n    let hasNamedDefaultSlot = false;\r\n    const implicitDefaultChildren = [];\r\n    const seenSlotNames = new Set();\r\n    for (let i = 0; i < children.length; i++) {\r\n        const slotElement = children[i];\r\n        let slotDir;\r\n        if (!isTemplateNode(slotElement) ||\r\n            !(slotDir = findDir(slotElement, \'slot\', true))) {\r\n            // not a <template v-slot>, skip.\r\n            if (slotElement.type !== 3 /* COMMENT */) {\r\n                implicitDefaultChildren.push(slotElement);\r\n            }\r\n            continue;\r\n        }\r\n        if (onComponentSlot) {\r\n            // already has on-component slot - this is incorrect usage.\r\n            context.onError(createCompilerError(37 /* X_V_SLOT_MIXED_SLOT_USAGE */, slotDir.loc));\r\n            break;\r\n        }\r\n        hasTemplateSlots = true;\r\n        const { children: slotChildren, loc: slotLoc } = slotElement;\r\n        const { arg: slotName = createSimpleExpression(`default`, true), exp: slotProps, loc: dirLoc } = slotDir;\r\n        // check if name is dynamic.\r\n        let staticSlotName;\r\n        if (isStaticExp(slotName)) {\r\n            staticSlotName = slotName ? slotName.content : `default`;\r\n        }\r\n        else {\r\n            hasDynamicSlots = true;\r\n        }\r\n        const slotFunction = buildSlotFn(slotProps, slotChildren, slotLoc);\r\n        // check if this slot is conditional (v-if/v-for)\r\n        let vIf;\r\n        let vElse;\r\n        let vFor;\r\n        if ((vIf = findDir(slotElement, \'if\'))) {\r\n            hasDynamicSlots = true;\r\n            dynamicSlots.push(createConditionalExpression(vIf.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback));\r\n        }\r\n        else if ((vElse = findDir(slotElement, /^else(-if)?$/, true /* allowEmpty */))) {\r\n            // find adjacent v-if\r\n            let j = i;\r\n            let prev;\r\n            while (j--) {\r\n                prev = children[j];\r\n                if (prev.type !== 3 /* COMMENT */) {\r\n                    break;\r\n                }\r\n            }\r\n            if (prev && isTemplateNode(prev) && findDir(prev, \'if\')) {\r\n                // remove node\r\n                children.splice(i, 1);\r\n                i--;\r\n                // attach this slot to previous conditional\r\n                let conditional = dynamicSlots[dynamicSlots.length - 1];\r\n                while (conditional.alternate.type === 19 /* JS_CONDITIONAL_EXPRESSION */) {\r\n                    conditional = conditional.alternate;\r\n                }\r\n                conditional.alternate = vElse.exp\r\n                    ? createConditionalExpression(vElse.exp, buildDynamicSlot(slotName, slotFunction), defaultFallback)\r\n                    : buildDynamicSlot(slotName, slotFunction);\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(30 /* X_V_ELSE_NO_ADJACENT_IF */, vElse.loc));\r\n            }\r\n        }\r\n        else if ((vFor = findDir(slotElement, \'for\'))) {\r\n            hasDynamicSlots = true;\r\n            const parseResult = vFor.parseResult ||\r\n                parseForExpression(vFor.exp, context);\r\n            if (parseResult) {\r\n                // Render the dynamic slots as an array and add it to the createSlot()\r\n                // args. The runtime knows how to handle it appropriately.\r\n                dynamicSlots.push(createCallExpression(context.helper(RENDER_LIST), [\r\n                    parseResult.source,\r\n                    createFunctionExpression(createForLoopParams(parseResult), buildDynamicSlot(slotName, slotFunction), true /* force newline */)\r\n                ]));\r\n            }\r\n            else {\r\n                context.onError(createCompilerError(32 /* X_V_FOR_MALFORMED_EXPRESSION */, vFor.loc));\r\n            }\r\n        }\r\n        else {\r\n            // check duplicate static names\r\n            if (staticSlotName) {\r\n                if (seenSlotNames.has(staticSlotName)) {\r\n                    context.onError(createCompilerError(38 /* X_V_SLOT_DUPLICATE_SLOT_NAMES */, dirLoc));\r\n                    continue;\r\n                }\r\n                seenSlotNames.add(staticSlotName);\r\n                if (staticSlotName === \'default\') {\r\n                    hasNamedDefaultSlot = true;\r\n                }\r\n            }\r\n            slotsProperties.push(createObjectProperty(slotName, slotFunction));\r\n        }\r\n    }\r\n    if (!onComponentSlot) {\r\n        const buildDefaultSlotProperty = (props, children) => {\r\n            const fn = buildSlotFn(props, children, loc);\r\n            if (context.compatConfig) {\r\n                fn.isNonScopedSlot = true;\r\n            }\r\n            return createObjectProperty(`default`, fn);\r\n        };\r\n        if (!hasTemplateSlots) {\r\n            // implicit default slot (on component)\r\n            slotsProperties.push(buildDefaultSlotProperty(undefined, children));\r\n        }\r\n        else if (implicitDefaultChildren.length &&\r\n            // #3766\r\n            // with whitespace: \'preserve\', whitespaces between slots will end up in\r\n            // implicitDefaultChildren. Ignore if all implicit children are whitespaces.\r\n            implicitDefaultChildren.some(node => isNonWhitespaceContent(node))) {\r\n            // implicit default slot (mixed with named slots)\r\n            if (hasNamedDefaultSlot) {\r\n                context.onError(createCompilerError(39 /* X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN */, implicitDefaultChildren[0].loc));\r\n            }\r\n            else {\r\n                slotsProperties.push(buildDefaultSlotProperty(undefined, implicitDefaultChildren));\r\n            }\r\n        }\r\n    }\r\n    const slotFlag = hasDynamicSlots\r\n        ? 2 /* DYNAMIC */\r\n        : hasForwardedSlots(node.children)\r\n            ? 3 /* FORWARDED */\r\n            : 1 /* STABLE */;\r\n    let slots = createObjectExpression(slotsProperties.concat(createObjectProperty(`_`, \r\n    // 2 = compiled but dynamic = can skip normalization, but must run diff\r\n    // 1 = compiled and static = can skip normalization AND diff as optimized\r\n    createSimpleExpression(slotFlag + (( false) ? 0 : ``), false))), loc);\r\n    if (dynamicSlots.length) {\r\n        slots = createCallExpression(context.helper(CREATE_SLOTS), [\r\n            slots,\r\n            createArrayExpression(dynamicSlots)\r\n        ]);\r\n    }\r\n    return {\r\n        slots,\r\n        hasDynamicSlots\r\n    };\r\n}\r\nfunction buildDynamicSlot(name, fn) {\r\n    return createObjectExpression([\r\n        createObjectProperty(`name`, name),\r\n        createObjectProperty(`fn`, fn)\r\n    ]);\r\n}\r\nfunction hasForwardedSlots(children) {\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        switch (child.type) {\r\n            case 1 /* ELEMENT */:\r\n                if (child.tagType === 2 /* SLOT */ ||\r\n                    hasForwardedSlots(child.children)) {\r\n                    return true;\r\n                }\r\n                break;\r\n            case 9 /* IF */:\r\n                if (hasForwardedSlots(child.branches))\r\n                    return true;\r\n                break;\r\n            case 10 /* IF_BRANCH */:\r\n            case 11 /* FOR */:\r\n                if (hasForwardedSlots(child.children))\r\n                    return true;\r\n                break;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction isNonWhitespaceContent(node) {\r\n    if (node.type !== 2 /* TEXT */ && node.type !== 12 /* TEXT_CALL */)\r\n        return true;\r\n    return node.type === 2 /* TEXT */\r\n        ? !!node.content.trim()\r\n        : isNonWhitespaceContent(node.content);\r\n}\n\n// some directive transforms (e.g. v-model) may return a symbol for runtime\r\n// import, which should be used instead of a resolveDirective call.\r\nconst directiveImportMap = new WeakMap();\r\n// generate a JavaScript AST for this element\'s codegen\r\nconst transformElement = (node, context) => {\r\n    // perform the work on exit, after all child expressions have been\r\n    // processed and merged.\r\n    return function postTransformElement() {\r\n        node = context.currentNode;\r\n        if (!(node.type === 1 /* ELEMENT */ &&\r\n            (node.tagType === 0 /* ELEMENT */ ||\r\n                node.tagType === 1 /* COMPONENT */))) {\r\n            return;\r\n        }\r\n        const { tag, props } = node;\r\n        const isComponent = node.tagType === 1 /* COMPONENT */;\r\n        // The goal of the transform is to create a codegenNode implementing the\r\n        // VNodeCall interface.\r\n        let vnodeTag = isComponent\r\n            ? resolveComponentType(node, context)\r\n            : `"${tag}"`;\r\n        const isDynamicComponent = shared_esm_bundler_isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;\r\n        let vnodeProps;\r\n        let vnodeChildren;\r\n        let vnodePatchFlag;\r\n        let patchFlag = 0;\r\n        let vnodeDynamicProps;\r\n        let dynamicPropNames;\r\n        let vnodeDirectives;\r\n        let shouldUseBlock = \r\n        // dynamic component may resolve to plain elements\r\n        isDynamicComponent ||\r\n            vnodeTag === TELEPORT ||\r\n            vnodeTag === SUSPENSE ||\r\n            (!isComponent &&\r\n                // <svg> and <foreignObject> must be forced into blocks so that block\r\n                // updates inside get proper isSVG flag at runtime. (#639, #643)\r\n                // This is technically web-specific, but splitting the logic out of core\r\n                // leads to too much unnecessary complexity.\r\n                (tag === \'svg\' || tag === \'foreignObject\'));\r\n        // props\r\n        if (props.length > 0) {\r\n            const propsBuildResult = buildProps(node, context);\r\n            vnodeProps = propsBuildResult.props;\r\n            patchFlag = propsBuildResult.patchFlag;\r\n            dynamicPropNames = propsBuildResult.dynamicPropNames;\r\n            const directives = propsBuildResult.directives;\r\n            vnodeDirectives =\r\n                directives && directives.length\r\n                    ? createArrayExpression(directives.map(dir => buildDirectiveArgs(dir, context)))\r\n                    : undefined;\r\n            if (propsBuildResult.shouldUseBlock) {\r\n                shouldUseBlock = true;\r\n            }\r\n        }\r\n        // children\r\n        if (node.children.length > 0) {\r\n            if (vnodeTag === KEEP_ALIVE) {\r\n                // Although a built-in component, we compile KeepAlive with raw children\r\n                // instead of slot functions so that it can be used inside Transition\r\n                // or other Transition-wrapping HOCs.\r\n                // To ensure correct updates with block optimizations, we need to:\r\n                // 1. Force keep-alive into a block. This avoids its children being\r\n                //    collected by a parent block.\r\n                shouldUseBlock = true;\r\n                // 2. Force keep-alive to always be updated, since it uses raw children.\r\n                patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                if (false) {}\r\n            }\r\n            const shouldBuildAsSlots = isComponent &&\r\n                // Teleport is not a real component and has dedicated runtime handling\r\n                vnodeTag !== TELEPORT &&\r\n                // explained above.\r\n                vnodeTag !== KEEP_ALIVE;\r\n            if (shouldBuildAsSlots) {\r\n                const { slots, hasDynamicSlots } = buildSlots(node, context);\r\n                vnodeChildren = slots;\r\n                if (hasDynamicSlots) {\r\n                    patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n            else if (node.children.length === 1 && vnodeTag !== TELEPORT) {\r\n                const child = node.children[0];\r\n                const type = child.type;\r\n                // check for dynamic text children\r\n                const hasDynamicTextChild = type === 5 /* INTERPOLATION */ ||\r\n                    type === 8 /* COMPOUND_EXPRESSION */;\r\n                if (hasDynamicTextChild &&\r\n                    getConstantType(child, context) === 0 /* NOT_CONSTANT */) {\r\n                    patchFlag |= 1 /* TEXT */;\r\n                }\r\n                // pass directly if the only child is a text node\r\n                // (plain / interpolation / expression)\r\n                if (hasDynamicTextChild || type === 2 /* TEXT */) {\r\n                    vnodeChildren = child;\r\n                }\r\n                else {\r\n                    vnodeChildren = node.children;\r\n                }\r\n            }\r\n            else {\r\n                vnodeChildren = node.children;\r\n            }\r\n        }\r\n        // patchFlag & dynamicPropNames\r\n        if (patchFlag !== 0) {\r\n            if ((false)) {}\r\n            else {\r\n                vnodePatchFlag = String(patchFlag);\r\n            }\r\n            if (dynamicPropNames && dynamicPropNames.length) {\r\n                vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);\r\n            }\r\n        }\r\n        node.codegenNode = createVNodeCall(context, vnodeTag, vnodeProps, vnodeChildren, vnodePatchFlag, vnodeDynamicProps, vnodeDirectives, !!shouldUseBlock, false /* disableTracking */, isComponent, node.loc);\r\n    };\r\n};\r\nfunction resolveComponentType(node, context, ssr = false) {\r\n    let { tag } = node;\r\n    // 1. dynamic component\r\n    const isExplicitDynamic = isComponentTag(tag);\r\n    const isProp = findProp(node, \'is\');\r\n    if (isProp) {\r\n        if (isExplicitDynamic ||\r\n            (isCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */, context))) {\r\n            const exp = isProp.type === 6 /* ATTRIBUTE */\r\n                ? isProp.value && createSimpleExpression(isProp.value.content, true)\r\n                : isProp.exp;\r\n            if (exp) {\r\n                return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\r\n                    exp\r\n                ]);\r\n            }\r\n        }\r\n        else if (isProp.type === 6 /* ATTRIBUTE */ &&\r\n            isProp.value.content.startsWith(\'vue:\')) {\r\n            // <button is="vue:xxx">\r\n            // if not <component>, only is value that starts with "vue:" will be\r\n            // treated as component by the parse phase and reach here, unless it\'s\r\n            // compat mode where all is values are considered components\r\n            tag = isProp.value.content.slice(4);\r\n        }\r\n    }\r\n    // 1.5 v-is (TODO: Deprecate)\r\n    const isDir = !isExplicitDynamic && findDir(node, \'is\');\r\n    if (isDir && isDir.exp) {\r\n        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [\r\n            isDir.exp\r\n        ]);\r\n    }\r\n    // 2. built-in components (Teleport, Transition, KeepAlive, Suspense...)\r\n    const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);\r\n    if (builtIn) {\r\n        // built-ins are simply fallthroughs / have special handling during ssr\r\n        // so we don\'t need to import their runtime equivalents\r\n        if (!ssr)\r\n            context.helper(builtIn);\r\n        return builtIn;\r\n    }\r\n    // 5. user component (resolve)\r\n    context.helper(RESOLVE_COMPONENT);\r\n    context.components.add(tag);\r\n    return toValidAssetId(tag, `component`);\r\n}\r\nfunction buildProps(node, context, props = node.props, ssr = false) {\r\n    const { tag, loc: elementLoc, children } = node;\r\n    const isComponent = node.tagType === 1 /* COMPONENT */;\r\n    let properties = [];\r\n    const mergeArgs = [];\r\n    const runtimeDirectives = [];\r\n    const hasChildren = children.length > 0;\r\n    let shouldUseBlock = false;\r\n    // patchFlag analysis\r\n    let patchFlag = 0;\r\n    let hasRef = false;\r\n    let hasClassBinding = false;\r\n    let hasStyleBinding = false;\r\n    let hasHydrationEventBinding = false;\r\n    let hasDynamicKeys = false;\r\n    let hasVnodeHook = false;\r\n    const dynamicPropNames = [];\r\n    const analyzePatchFlag = ({ key, value }) => {\r\n        if (isStaticExp(key)) {\r\n            const name = key.content;\r\n            const isEventHandler = isOn(name);\r\n            if (!isComponent &&\r\n                isEventHandler &&\r\n                // omit the flag for click handlers because hydration gives click\r\n                // dedicated fast path.\r\n                name.toLowerCase() !== \'onclick\' &&\r\n                // omit v-model handlers\r\n                name !== \'onUpdate:modelValue\' &&\r\n                // omit onVnodeXXX hooks\r\n                !isReservedProp(name)) {\r\n                hasHydrationEventBinding = true;\r\n            }\r\n            if (isEventHandler && isReservedProp(name)) {\r\n                hasVnodeHook = true;\r\n            }\r\n            if (value.type === 20 /* JS_CACHE_EXPRESSION */ ||\r\n                ((value.type === 4 /* SIMPLE_EXPRESSION */ ||\r\n                    value.type === 8 /* COMPOUND_EXPRESSION */) &&\r\n                    getConstantType(value, context) > 0)) {\r\n                // skip if the prop is a cached handler or has constant value\r\n                return;\r\n            }\r\n            if (name === \'ref\') {\r\n                hasRef = true;\r\n            }\r\n            else if (name === \'class\') {\r\n                hasClassBinding = true;\r\n            }\r\n            else if (name === \'style\') {\r\n                hasStyleBinding = true;\r\n            }\r\n            else if (name !== \'key\' && !dynamicPropNames.includes(name)) {\r\n                dynamicPropNames.push(name);\r\n            }\r\n            // treat the dynamic class and style binding of the component as dynamic props\r\n            if (isComponent &&\r\n                (name === \'class\' || name === \'style\') &&\r\n                !dynamicPropNames.includes(name)) {\r\n                dynamicPropNames.push(name);\r\n            }\r\n        }\r\n        else {\r\n            hasDynamicKeys = true;\r\n        }\r\n    };\r\n    for (let i = 0; i < props.length; i++) {\r\n        // static attribute\r\n        const prop = props[i];\r\n        if (prop.type === 6 /* ATTRIBUTE */) {\r\n            const { loc, name, value } = prop;\r\n            let isStatic = true;\r\n            if (name === \'ref\') {\r\n                hasRef = true;\r\n                if (context.scopes.vFor > 0) {\r\n                    properties.push(createObjectProperty(createSimpleExpression(\'ref_for\', true), createSimpleExpression(\'true\')));\r\n                }\r\n            }\r\n            // skip is on <component>, or is="vue:xxx"\r\n            if (name === \'is\' &&\r\n                (isComponentTag(tag) ||\r\n                    (value && value.content.startsWith(\'vue:\')) ||\r\n                    (isCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */, context)))) {\r\n                continue;\r\n            }\r\n            properties.push(createObjectProperty(createSimpleExpression(name, true, getInnerRange(loc, 0, name.length)), createSimpleExpression(value ? value.content : \'\', isStatic, value ? value.loc : loc)));\r\n        }\r\n        else {\r\n            // directives\r\n            const { name, arg, exp, loc } = prop;\r\n            const isVBind = name === \'bind\';\r\n            const isVOn = name === \'on\';\r\n            // skip v-slot - it is handled by its dedicated transform.\r\n            if (name === \'slot\') {\r\n                if (!isComponent) {\r\n                    context.onError(createCompilerError(40 /* X_V_SLOT_MISPLACED */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            // skip v-once/v-memo - they are handled by dedicated transforms.\r\n            if (name === \'once\' || name === \'memo\') {\r\n                continue;\r\n            }\r\n            // skip v-is and :is on <component>\r\n            if (name === \'is\' ||\r\n                (isVBind &&\r\n                    isStaticArgOf(arg, \'is\') &&\r\n                    (isComponentTag(tag) ||\r\n                        (isCompatEnabled("COMPILER_IS_ON_ELEMENT" /* COMPILER_IS_ON_ELEMENT */, context))))) {\r\n                continue;\r\n            }\r\n            // skip v-on in SSR compilation\r\n            if (isVOn && ssr) {\r\n                continue;\r\n            }\r\n            if (\r\n            // #938: elements with dynamic keys should be forced into blocks\r\n            (isVBind && isStaticArgOf(arg, \'key\')) ||\r\n                // inline before-update hooks need to force block so that it is invoked\r\n                // before children\r\n                (isVOn && hasChildren && isStaticArgOf(arg, \'vue:before-update\'))) {\r\n                shouldUseBlock = true;\r\n            }\r\n            if (isVBind && isStaticArgOf(arg, \'ref\') && context.scopes.vFor > 0) {\r\n                properties.push(createObjectProperty(createSimpleExpression(\'ref_for\', true), createSimpleExpression(\'true\')));\r\n            }\r\n            // special case for v-bind and v-on with no argument\r\n            if (!arg && (isVBind || isVOn)) {\r\n                hasDynamicKeys = true;\r\n                if (exp) {\r\n                    if (properties.length) {\r\n                        mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n                        properties = [];\r\n                    }\r\n                    if (isVBind) {\r\n                        {\r\n                            // 2.x v-bind object order compat\r\n                            if ((false)) {}\r\n                            if (isCompatEnabled("COMPILER_V_BIND_OBJECT_ORDER" /* COMPILER_V_BIND_OBJECT_ORDER */, context)) {\r\n                                mergeArgs.unshift(exp);\r\n                                continue;\r\n                            }\r\n                        }\r\n                        mergeArgs.push(exp);\r\n                    }\r\n                    else {\r\n                        // v-on="obj" -> toHandlers(obj)\r\n                        mergeArgs.push({\r\n                            type: 14 /* JS_CALL_EXPRESSION */,\r\n                            loc,\r\n                            callee: context.helper(TO_HANDLERS),\r\n                            arguments: [exp]\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    context.onError(createCompilerError(isVBind\r\n                        ? 34 /* X_V_BIND_NO_EXPRESSION */\r\n                        : 35 /* X_V_ON_NO_EXPRESSION */, loc));\r\n                }\r\n                continue;\r\n            }\r\n            const directiveTransform = context.directiveTransforms[name];\r\n            if (directiveTransform) {\r\n                // has built-in directive transform.\r\n                const { props, needRuntime } = directiveTransform(prop, node, context);\r\n                !ssr && props.forEach(analyzePatchFlag);\r\n                properties.push(...props);\r\n                if (needRuntime) {\r\n                    runtimeDirectives.push(prop);\r\n                    if (isSymbol(needRuntime)) {\r\n                        directiveImportMap.set(prop, needRuntime);\r\n                    }\r\n                }\r\n            }\r\n            else if (!shared_esm_bundler_isBuiltInDirective(name)) {\r\n                // no built-in transform, this is a user custom directive.\r\n                runtimeDirectives.push(prop);\r\n                // custom dirs may use beforeUpdate so they need to force blocks\r\n                // to ensure before-update gets called before children update\r\n                if (hasChildren) {\r\n                    shouldUseBlock = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let propsExpression = undefined;\r\n    // has v-bind="object" or v-on="object", wrap with mergeProps\r\n    if (mergeArgs.length) {\r\n        if (properties.length) {\r\n            mergeArgs.push(createObjectExpression(dedupeProperties(properties), elementLoc));\r\n        }\r\n        if (mergeArgs.length > 1) {\r\n            propsExpression = createCallExpression(context.helper(MERGE_PROPS), mergeArgs, elementLoc);\r\n        }\r\n        else {\r\n            // single v-bind with nothing else - no need for a mergeProps call\r\n            propsExpression = mergeArgs[0];\r\n        }\r\n    }\r\n    else if (properties.length) {\r\n        propsExpression = createObjectExpression(dedupeProperties(properties), elementLoc);\r\n    }\r\n    // patchFlag analysis\r\n    if (hasDynamicKeys) {\r\n        patchFlag |= 16 /* FULL_PROPS */;\r\n    }\r\n    else {\r\n        if (hasClassBinding && !isComponent) {\r\n            patchFlag |= 2 /* CLASS */;\r\n        }\r\n        if (hasStyleBinding && !isComponent) {\r\n            patchFlag |= 4 /* STYLE */;\r\n        }\r\n        if (dynamicPropNames.length) {\r\n            patchFlag |= 8 /* PROPS */;\r\n        }\r\n        if (hasHydrationEventBinding) {\r\n            patchFlag |= 32 /* HYDRATE_EVENTS */;\r\n        }\r\n    }\r\n    if (!shouldUseBlock &&\r\n        (patchFlag === 0 || patchFlag === 32 /* HYDRATE_EVENTS */) &&\r\n        (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {\r\n        patchFlag |= 512 /* NEED_PATCH */;\r\n    }\r\n    // pre-normalize props, SSR is skipped for now\r\n    if (!context.inSSR && propsExpression) {\r\n        switch (propsExpression.type) {\r\n            case 15 /* JS_OBJECT_EXPRESSION */:\r\n                // means that there is no v-bind,\r\n                // but still need to deal with dynamic key binding\r\n                let classKeyIndex = -1;\r\n                let styleKeyIndex = -1;\r\n                let hasDynamicKey = false;\r\n                for (let i = 0; i < propsExpression.properties.length; i++) {\r\n                    const key = propsExpression.properties[i].key;\r\n                    if (isStaticExp(key)) {\r\n                        if (key.content === \'class\') {\r\n                            classKeyIndex = i;\r\n                        }\r\n                        else if (key.content === \'style\') {\r\n                            styleKeyIndex = i;\r\n                        }\r\n                    }\r\n                    else if (!key.isHandlerKey) {\r\n                        hasDynamicKey = true;\r\n                    }\r\n                }\r\n                const classProp = propsExpression.properties[classKeyIndex];\r\n                const styleProp = propsExpression.properties[styleKeyIndex];\r\n                // no dynamic key\r\n                if (!hasDynamicKey) {\r\n                    if (classProp && !isStaticExp(classProp.value)) {\r\n                        classProp.value = createCallExpression(context.helper(NORMALIZE_CLASS), [classProp.value]);\r\n                    }\r\n                    if (styleProp &&\r\n                        !isStaticExp(styleProp.value) &&\r\n                        // the static style is compiled into an object,\r\n                        // so use `hasStyleBinding` to ensure that it is a dynamic style binding\r\n                        (hasStyleBinding ||\r\n                            // v-bind:style and style both exist,\r\n                            // v-bind:style with static literal object\r\n                            styleProp.value.type === 17 /* JS_ARRAY_EXPRESSION */)) {\r\n                        styleProp.value = createCallExpression(context.helper(NORMALIZE_STYLE), [styleProp.value]);\r\n                    }\r\n                }\r\n                else {\r\n                    // dynamic key binding, wrap with `normalizeProps`\r\n                    propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [propsExpression]);\r\n                }\r\n                break;\r\n            case 14 /* JS_CALL_EXPRESSION */:\r\n                // mergeProps call, do nothing\r\n                break;\r\n            default:\r\n                // single v-bind\r\n                propsExpression = createCallExpression(context.helper(NORMALIZE_PROPS), [\r\n                    createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [\r\n                        propsExpression\r\n                    ])\r\n                ]);\r\n                break;\r\n        }\r\n    }\r\n    return {\r\n        props: propsExpression,\r\n        directives: runtimeDirectives,\r\n        patchFlag,\r\n        dynamicPropNames,\r\n        shouldUseBlock\r\n    };\r\n}\r\n// Dedupe props in an object literal.\r\n// Literal duplicated attributes would have been warned during the parse phase,\r\n// however, it\'s possible to encounter duplicated `onXXX` handlers with different\r\n// modifiers. We also need to merge static and dynamic class / style attributes.\r\n// - onXXX handlers / style: merge into array\r\n// - class: merge into single expression with concatenation\r\nfunction dedupeProperties(properties) {\r\n    const knownProps = new Map();\r\n    const deduped = [];\r\n    for (let i = 0; i < properties.length; i++) {\r\n        const prop = properties[i];\r\n        // dynamic keys are always allowed\r\n        if (prop.key.type === 8 /* COMPOUND_EXPRESSION */ || !prop.key.isStatic) {\r\n            deduped.push(prop);\r\n            continue;\r\n        }\r\n        const name = prop.key.content;\r\n        const existing = knownProps.get(name);\r\n        if (existing) {\r\n            if (name === \'style\' || name === \'class\' || isOn(name)) {\r\n                compiler_core_esm_bundler_mergeAsArray(existing, prop);\r\n            }\r\n            // unexpected duplicate, should have emitted error during parse\r\n        }\r\n        else {\r\n            knownProps.set(name, prop);\r\n            deduped.push(prop);\r\n        }\r\n    }\r\n    return deduped;\r\n}\r\nfunction compiler_core_esm_bundler_mergeAsArray(existing, incoming) {\r\n    if (existing.value.type === 17 /* JS_ARRAY_EXPRESSION */) {\r\n        existing.value.elements.push(incoming.value);\r\n    }\r\n    else {\r\n        existing.value = createArrayExpression([existing.value, incoming.value], existing.loc);\r\n    }\r\n}\r\nfunction buildDirectiveArgs(dir, context) {\r\n    const dirArgs = [];\r\n    const runtime = directiveImportMap.get(dir);\r\n    if (runtime) {\r\n        // built-in directive with runtime\r\n        dirArgs.push(context.helperString(runtime));\r\n    }\r\n    else {\r\n        {\r\n            // inject statement for resolving directive\r\n            context.helper(RESOLVE_DIRECTIVE);\r\n            context.directives.add(dir.name);\r\n            dirArgs.push(toValidAssetId(dir.name, `directive`));\r\n        }\r\n    }\r\n    const { loc } = dir;\r\n    if (dir.exp)\r\n        dirArgs.push(dir.exp);\r\n    if (dir.arg) {\r\n        if (!dir.exp) {\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        dirArgs.push(dir.arg);\r\n    }\r\n    if (Object.keys(dir.modifiers).length) {\r\n        if (!dir.arg) {\r\n            if (!dir.exp) {\r\n                dirArgs.push(`void 0`);\r\n            }\r\n            dirArgs.push(`void 0`);\r\n        }\r\n        const trueExpression = createSimpleExpression(`true`, false, loc);\r\n        dirArgs.push(createObjectExpression(dir.modifiers.map(modifier => createObjectProperty(modifier, trueExpression)), loc));\r\n    }\r\n    return createArrayExpression(dirArgs, dir.loc);\r\n}\r\nfunction stringifyDynamicPropNames(props) {\r\n    let propsNamesString = `[`;\r\n    for (let i = 0, l = props.length; i < l; i++) {\r\n        propsNamesString += JSON.stringify(props[i]);\r\n        if (i < l - 1)\r\n            propsNamesString += \', \';\r\n    }\r\n    return propsNamesString + `]`;\r\n}\r\nfunction isComponentTag(tag) {\r\n    return tag === \'component\' || tag === \'Component\';\r\n}\n\n( false)\r\n    ? 0\r\n    : {};\r\n( false) ? 0 : [];\r\nconst compiler_core_esm_bundler_cacheStringFunction = (fn) => {\r\n    const cache = Object.create(null);\r\n    return ((str) => {\r\n        const hit = cache[str];\r\n        return hit || (cache[str] = fn(str));\r\n    });\r\n};\r\nconst compiler_core_esm_bundler_camelizeRE = /-(\\w)/g;\r\n/**\r\n * @private\r\n */\r\nconst compiler_core_esm_bundler_camelize = compiler_core_esm_bundler_cacheStringFunction((str) => {\r\n    return str.replace(compiler_core_esm_bundler_camelizeRE, (_, c) => (c ? c.toUpperCase() : \'\'));\r\n});\n\nconst transformSlotOutlet = (node, context) => {\r\n    if (isSlotOutlet(node)) {\r\n        const { children, loc } = node;\r\n        const { slotName, slotProps } = processSlotOutlet(node, context);\r\n        const slotArgs = [\r\n            context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,\r\n            slotName,\r\n            \'{}\',\r\n            \'undefined\',\r\n            \'true\'\r\n        ];\r\n        let expectedLen = 2;\r\n        if (slotProps) {\r\n            slotArgs[2] = slotProps;\r\n            expectedLen = 3;\r\n        }\r\n        if (children.length) {\r\n            slotArgs[3] = createFunctionExpression([], children, false, false, loc);\r\n            expectedLen = 4;\r\n        }\r\n        if (context.scopeId && !context.slotted) {\r\n            expectedLen = 5;\r\n        }\r\n        slotArgs.splice(expectedLen); // remove unused arguments\r\n        node.codegenNode = createCallExpression(context.helper(RENDER_SLOT), slotArgs, loc);\r\n    }\r\n};\r\nfunction processSlotOutlet(node, context) {\r\n    let slotName = `"default"`;\r\n    let slotProps = undefined;\r\n    const nonNameProps = [];\r\n    for (let i = 0; i < node.props.length; i++) {\r\n        const p = node.props[i];\r\n        if (p.type === 6 /* ATTRIBUTE */) {\r\n            if (p.value) {\r\n                if (p.name === \'name\') {\r\n                    slotName = JSON.stringify(p.value.content);\r\n                }\r\n                else {\r\n                    p.name = compiler_core_esm_bundler_camelize(p.name);\r\n                    nonNameProps.push(p);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (p.name === \'bind\' && isStaticArgOf(p.arg, \'name\')) {\r\n                if (p.exp)\r\n                    slotName = p.exp;\r\n            }\r\n            else {\r\n                if (p.name === \'bind\' && p.arg && isStaticExp(p.arg)) {\r\n                    p.arg.content = compiler_core_esm_bundler_camelize(p.arg.content);\r\n                }\r\n                nonNameProps.push(p);\r\n            }\r\n        }\r\n    }\r\n    if (nonNameProps.length > 0) {\r\n        const { props, directives } = buildProps(node, context, nonNameProps);\r\n        slotProps = props;\r\n        if (directives.length) {\r\n            context.onError(createCompilerError(36 /* X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET */, directives[0].loc));\r\n        }\r\n    }\r\n    return {\r\n        slotName,\r\n        slotProps\r\n    };\r\n}\n\nconst fnExpRE = /^\\s*([\\w$_]+|(async\\s*)?\\([^)]*?\\))\\s*=>|^\\s*(async\\s+)?function(?:\\s+[\\w$]+)?\\s*\\(/;\r\nconst transformOn = (dir, node, context, augmentor) => {\r\n    const { loc, modifiers, arg } = dir;\r\n    if (!dir.exp && !modifiers.length) {\r\n        context.onError(createCompilerError(35 /* X_V_ON_NO_EXPRESSION */, loc));\r\n    }\r\n    let eventName;\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            let rawName = arg.content;\r\n            // TODO deprecate @vnodeXXX usage\r\n            if (rawName.startsWith(\'vue:\')) {\r\n                rawName = `vnode-${rawName.slice(4)}`;\r\n            }\r\n            // for all event listeners, auto convert it to camelCase. See issue #2249\r\n            eventName = createSimpleExpression(toHandlerKey(shared_esm_bundler_camelize(rawName)), true, arg.loc);\r\n        }\r\n        else {\r\n            // #2388\r\n            eventName = createCompoundExpression([\r\n                `${context.helperString(TO_HANDLER_KEY)}(`,\r\n                arg,\r\n                `)`\r\n            ]);\r\n        }\r\n    }\r\n    else {\r\n        // already a compound expression.\r\n        eventName = arg;\r\n        eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);\r\n        eventName.children.push(`)`);\r\n    }\r\n    // handler processing\r\n    let exp = dir.exp;\r\n    if (exp && !exp.content.trim()) {\r\n        exp = undefined;\r\n    }\r\n    let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;\r\n    if (exp) {\r\n        const isMemberExp = isMemberExpression(exp.content);\r\n        const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));\r\n        const hasMultipleStatements = exp.content.includes(`;`);\r\n        if (false) {}\r\n        if (isInlineStatement || (shouldCache && isMemberExp)) {\r\n            // wrap inline statement in a function expression\r\n            exp = createCompoundExpression([\r\n                `${isInlineStatement\r\n                    ? `$event`\r\n                    : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,\r\n                exp,\r\n                hasMultipleStatements ? `}` : `)`\r\n            ]);\r\n        }\r\n    }\r\n    let ret = {\r\n        props: [\r\n            createObjectProperty(eventName, exp || createSimpleExpression(`() => {}`, false, loc))\r\n        ]\r\n    };\r\n    // apply extended compiler augmentor\r\n    if (augmentor) {\r\n        ret = augmentor(ret);\r\n    }\r\n    if (shouldCache) {\r\n        // cache handlers so that it\'s always the same handler being passed down.\r\n        // this avoids unnecessary re-renders when users use inline handlers on\r\n        // components.\r\n        ret.props[0].value = context.cache(ret.props[0].value);\r\n    }\r\n    // mark the key as handler for props normalization check\r\n    ret.props.forEach(p => (p.key.isHandlerKey = true));\r\n    return ret;\r\n};\n\n// v-bind without arg is handled directly in ./transformElements.ts due to it affecting\r\n// codegen for the entire props object. This transform here is only for v-bind\r\n// *with* args.\r\nconst transformBind = (dir, _node, context) => {\r\n    const { exp, modifiers, loc } = dir;\r\n    const arg = dir.arg;\r\n    if (arg.type !== 4 /* SIMPLE_EXPRESSION */) {\r\n        arg.children.unshift(`(`);\r\n        arg.children.push(`) || ""`);\r\n    }\r\n    else if (!arg.isStatic) {\r\n        arg.content = `${arg.content} || ""`;\r\n    }\r\n    // .sync is replaced by v-model:arg\r\n    if (modifiers.includes(\'camel\')) {\r\n        if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n            if (arg.isStatic) {\r\n                arg.content = shared_esm_bundler_camelize(arg.content);\r\n            }\r\n            else {\r\n                arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;\r\n            }\r\n        }\r\n        else {\r\n            arg.children.unshift(`${context.helperString(CAMELIZE)}(`);\r\n            arg.children.push(`)`);\r\n        }\r\n    }\r\n    if (!context.inSSR) {\r\n        if (modifiers.includes(\'prop\')) {\r\n            injectPrefix(arg, \'.\');\r\n        }\r\n        if (modifiers.includes(\'attr\')) {\r\n            injectPrefix(arg, \'^\');\r\n        }\r\n    }\r\n    if (!exp ||\r\n        (exp.type === 4 /* SIMPLE_EXPRESSION */ && !exp.content.trim())) {\r\n        context.onError(createCompilerError(34 /* X_V_BIND_NO_EXPRESSION */, loc));\r\n        return {\r\n            props: [createObjectProperty(arg, createSimpleExpression(\'\', true, loc))]\r\n        };\r\n    }\r\n    return {\r\n        props: [createObjectProperty(arg, exp)]\r\n    };\r\n};\r\nconst injectPrefix = (arg, prefix) => {\r\n    if (arg.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        if (arg.isStatic) {\r\n            arg.content = prefix + arg.content;\r\n        }\r\n        else {\r\n            arg.content = `\\`${prefix}\\${${arg.content}}\\``;\r\n        }\r\n    }\r\n    else {\r\n        arg.children.unshift(`\'${prefix}\' + (`);\r\n        arg.children.push(`)`);\r\n    }\r\n};\n\n// Merge adjacent text nodes and expressions into a single expression\r\n// e.g. <div>abc {{ d }} {{ e }}</div> should have a single expression node as child.\r\nconst transformText = (node, context) => {\r\n    if (node.type === 0 /* ROOT */ ||\r\n        node.type === 1 /* ELEMENT */ ||\r\n        node.type === 11 /* FOR */ ||\r\n        node.type === 10 /* IF_BRANCH */) {\r\n        // perform the transform on node exit so that all expressions have already\r\n        // been processed.\r\n        return () => {\r\n            const children = node.children;\r\n            let currentContainer = undefined;\r\n            let hasText = false;\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (isText(child)) {\r\n                    hasText = true;\r\n                    for (let j = i + 1; j < children.length; j++) {\r\n                        const next = children[j];\r\n                        if (isText(next)) {\r\n                            if (!currentContainer) {\r\n                                currentContainer = children[i] = {\r\n                                    type: 8 /* COMPOUND_EXPRESSION */,\r\n                                    loc: child.loc,\r\n                                    children: [child]\r\n                                };\r\n                            }\r\n                            // merge adjacent text node into current\r\n                            currentContainer.children.push(` + `, next);\r\n                            children.splice(j, 1);\r\n                            j--;\r\n                        }\r\n                        else {\r\n                            currentContainer = undefined;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (!hasText ||\r\n                // if this is a plain element with a single text child, leave it\r\n                // as-is since the runtime has dedicated fast path for this by directly\r\n                // setting textContent of the element.\r\n                // for component root it\'s always normalized anyway.\r\n                (children.length === 1 &&\r\n                    (node.type === 0 /* ROOT */ ||\r\n                        (node.type === 1 /* ELEMENT */ &&\r\n                            node.tagType === 0 /* ELEMENT */ &&\r\n                            // #3756\r\n                            // custom directives can potentially add DOM elements arbitrarily,\r\n                            // we need to avoid setting textContent of the element at runtime\r\n                            // to avoid accidentally overwriting the DOM elements added\r\n                            // by the user through custom directives.\r\n                            !node.props.find(p => p.type === 7 /* DIRECTIVE */ &&\r\n                                !context.directiveTransforms[p.name]) &&\r\n                            // in compat mode, <template> tags with no special directives\r\n                            // will be rendered as a fragment so its children must be\r\n                            // converted into vnodes.\r\n                            !(node.tag === \'template\'))))) {\r\n                return;\r\n            }\r\n            // pre-convert text nodes into createTextVNode(text) calls to avoid\r\n            // runtime normalization.\r\n            for (let i = 0; i < children.length; i++) {\r\n                const child = children[i];\r\n                if (isText(child) || child.type === 8 /* COMPOUND_EXPRESSION */) {\r\n                    const callArgs = [];\r\n                    // createTextVNode defaults to single whitespace, so if it is a\r\n                    // single space the code could be an empty call to save bytes.\r\n                    if (child.type !== 2 /* TEXT */ || child.content !== \' \') {\r\n                        callArgs.push(child);\r\n                    }\r\n                    // mark dynamic text with flag so it gets patched inside a block\r\n                    if (!context.ssr &&\r\n                        getConstantType(child, context) === 0 /* NOT_CONSTANT */) {\r\n                        callArgs.push(1 /* TEXT */ +\r\n                            (( false) ? 0 : ``));\r\n                    }\r\n                    children[i] = {\r\n                        type: 12 /* TEXT_CALL */,\r\n                        content: child,\r\n                        loc: child.loc,\r\n                        codegenNode: createCallExpression(context.helper(CREATE_TEXT), callArgs)\r\n                    };\r\n                }\r\n            }\r\n        };\r\n    }\r\n};\n\nconst seen = new WeakSet();\r\nconst transformOnce = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ && findDir(node, \'once\', true)) {\r\n        if (seen.has(node) || context.inVOnce) {\r\n            return;\r\n        }\r\n        seen.add(node);\r\n        context.inVOnce = true;\r\n        context.helper(SET_BLOCK_TRACKING);\r\n        return () => {\r\n            context.inVOnce = false;\r\n            const cur = context.currentNode;\r\n            if (cur.codegenNode) {\r\n                cur.codegenNode = context.cache(cur.codegenNode, true /* isVNode */);\r\n            }\r\n        };\r\n    }\r\n};\n\nconst transformModel = (dir, node, context) => {\r\n    const { exp, arg } = dir;\r\n    if (!exp) {\r\n        context.onError(createCompilerError(41 /* X_V_MODEL_NO_EXPRESSION */, dir.loc));\r\n        return createTransformProps();\r\n    }\r\n    const rawExp = exp.loc.source;\r\n    const expString = exp.type === 4 /* SIMPLE_EXPRESSION */ ? exp.content : rawExp;\r\n    // im SFC <script setup> inline mode, the exp may have been transformed into\r\n    // _unref(exp)\r\n    context.bindingMetadata[rawExp];\r\n    const maybeRef = !true    /* SETUP_CONST */;\r\n    if (!expString.trim() ||\r\n        (!isMemberExpression(expString) && !maybeRef)) {\r\n        context.onError(createCompilerError(42 /* X_V_MODEL_MALFORMED_EXPRESSION */, exp.loc));\r\n        return createTransformProps();\r\n    }\r\n    const propName = arg ? arg : createSimpleExpression(\'modelValue\', true);\r\n    const eventName = arg\r\n        ? isStaticExp(arg)\r\n            ? `onUpdate:${arg.content}`\r\n            : createCompoundExpression([\'"onUpdate:" + \', arg])\r\n        : `onUpdate:modelValue`;\r\n    let assignmentExp;\r\n    const eventArg = context.isTS ? `($event: any)` : `$event`;\r\n    {\r\n        assignmentExp = createCompoundExpression([\r\n            `${eventArg} => ((`,\r\n            exp,\r\n            `) = $event)`\r\n        ]);\r\n    }\r\n    const props = [\r\n        // modelValue: foo\r\n        createObjectProperty(propName, dir.exp),\r\n        // "onUpdate:modelValue": $event => (foo = $event)\r\n        createObjectProperty(eventName, assignmentExp)\r\n    ];\r\n    // modelModifiers: { foo: true, "bar-baz": true }\r\n    if (dir.modifiers.length && node.tagType === 1 /* COMPONENT */) {\r\n        const modifiers = dir.modifiers\r\n            .map(m => (isSimpleIdentifier(m) ? m : JSON.stringify(m)) + `: true`)\r\n            .join(`, `);\r\n        const modifiersKey = arg\r\n            ? isStaticExp(arg)\r\n                ? `${arg.content}Modifiers`\r\n                : createCompoundExpression([arg, \' + "Modifiers"\'])\r\n            : `modelModifiers`;\r\n        props.push(createObjectProperty(modifiersKey, createSimpleExpression(`{ ${modifiers} }`, false, dir.loc, 2 /* CAN_HOIST */)));\r\n    }\r\n    return createTransformProps(props);\r\n};\r\nfunction createTransformProps(props = []) {\r\n    return { props };\r\n}\n\nconst validDivisionCharRE = /[\\w).+\\-_$\\]]/;\r\nconst transformFilter = (node, context) => {\r\n    if (!isCompatEnabled("COMPILER_FILTER" /* COMPILER_FILTERS */, context)) {\r\n        return;\r\n    }\r\n    if (node.type === 5 /* INTERPOLATION */) {\r\n        // filter rewrite is applied before expression transform so only\r\n        // simple expressions are possible at this stage\r\n        rewriteFilter(node.content, context);\r\n    }\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        node.props.forEach((prop) => {\r\n            if (prop.type === 7 /* DIRECTIVE */ &&\r\n                prop.name !== \'for\' &&\r\n                prop.exp) {\r\n                rewriteFilter(prop.exp, context);\r\n            }\r\n        });\r\n    }\r\n};\r\nfunction rewriteFilter(node, context) {\r\n    if (node.type === 4 /* SIMPLE_EXPRESSION */) {\r\n        parseFilter(node, context);\r\n    }\r\n    else {\r\n        for (let i = 0; i < node.children.length; i++) {\r\n            const child = node.children[i];\r\n            if (typeof child !== \'object\')\r\n                continue;\r\n            if (child.type === 4 /* SIMPLE_EXPRESSION */) {\r\n                parseFilter(child, context);\r\n            }\r\n            else if (child.type === 8 /* COMPOUND_EXPRESSION */) {\r\n                rewriteFilter(node, context);\r\n            }\r\n            else if (child.type === 5 /* INTERPOLATION */) {\r\n                rewriteFilter(child.content, context);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction parseFilter(node, context) {\r\n    const exp = node.content;\r\n    let inSingle = false;\r\n    let inDouble = false;\r\n    let inTemplateString = false;\r\n    let inRegex = false;\r\n    let curly = 0;\r\n    let square = 0;\r\n    let paren = 0;\r\n    let lastFilterIndex = 0;\r\n    let c, prev, i, expression, filters = [];\r\n    for (i = 0; i < exp.length; i++) {\r\n        prev = c;\r\n        c = exp.charCodeAt(i);\r\n        if (inSingle) {\r\n            if (c === 0x27 && prev !== 0x5c)\r\n                inSingle = false;\r\n        }\r\n        else if (inDouble) {\r\n            if (c === 0x22 && prev !== 0x5c)\r\n                inDouble = false;\r\n        }\r\n        else if (inTemplateString) {\r\n            if (c === 0x60 && prev !== 0x5c)\r\n                inTemplateString = false;\r\n        }\r\n        else if (inRegex) {\r\n            if (c === 0x2f && prev !== 0x5c)\r\n                inRegex = false;\r\n        }\r\n        else if (c === 0x7c && // pipe\r\n            exp.charCodeAt(i + 1) !== 0x7c &&\r\n            exp.charCodeAt(i - 1) !== 0x7c &&\r\n            !curly &&\r\n            !square &&\r\n            !paren) {\r\n            if (expression === undefined) {\r\n                // first filter, end of expression\r\n                lastFilterIndex = i + 1;\r\n                expression = exp.slice(0, i).trim();\r\n            }\r\n            else {\r\n                pushFilter();\r\n            }\r\n        }\r\n        else {\r\n            switch (c) {\r\n                case 0x22:\r\n                    inDouble = true;\r\n                    break; // "\r\n                case 0x27:\r\n                    inSingle = true;\r\n                    break; // \'\r\n                case 0x60:\r\n                    inTemplateString = true;\r\n                    break; // `\r\n                case 0x28:\r\n                    paren++;\r\n                    break; // (\r\n                case 0x29:\r\n                    paren--;\r\n                    break; // )\r\n                case 0x5b:\r\n                    square++;\r\n                    break; // [\r\n                case 0x5d:\r\n                    square--;\r\n                    break; // ]\r\n                case 0x7b:\r\n                    curly++;\r\n                    break; // {\r\n                case 0x7d:\r\n                    curly--;\r\n                    break; // }\r\n            }\r\n            if (c === 0x2f) {\r\n                // /\r\n                let j = i - 1;\r\n                let p;\r\n                // find first non-whitespace prev char\r\n                for (; j >= 0; j--) {\r\n                    p = exp.charAt(j);\r\n                    if (p !== \' \')\r\n                        break;\r\n                }\r\n                if (!p || !validDivisionCharRE.test(p)) {\r\n                    inRegex = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (expression === undefined) {\r\n        expression = exp.slice(0, i).trim();\r\n    }\r\n    else if (lastFilterIndex !== 0) {\r\n        pushFilter();\r\n    }\r\n    function pushFilter() {\r\n        filters.push(exp.slice(lastFilterIndex, i).trim());\r\n        lastFilterIndex = i + 1;\r\n    }\r\n    if (filters.length) {\r\n        ( false) &&\r\n            0;\r\n        for (i = 0; i < filters.length; i++) {\r\n            expression = wrapFilter(expression, filters[i], context);\r\n        }\r\n        node.content = expression;\r\n    }\r\n}\r\nfunction wrapFilter(exp, filter, context) {\r\n    context.helper(RESOLVE_FILTER);\r\n    const i = filter.indexOf(\'(\');\r\n    if (i < 0) {\r\n        context.filters.add(filter);\r\n        return `${toValidAssetId(filter, \'filter\')}(${exp})`;\r\n    }\r\n    else {\r\n        const name = filter.slice(0, i);\r\n        const args = filter.slice(i + 1);\r\n        context.filters.add(name);\r\n        return `${toValidAssetId(name, \'filter\')}(${exp}${args !== \')\' ? \',\' + args : args}`;\r\n    }\r\n}\n\nconst seen$1 = new WeakSet();\r\nconst transformMemo = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        const dir = findDir(node, \'memo\');\r\n        if (!dir || seen$1.has(node)) {\r\n            return;\r\n        }\r\n        seen$1.add(node);\r\n        return () => {\r\n            const codegenNode = node.codegenNode ||\r\n                context.currentNode.codegenNode;\r\n            if (codegenNode && codegenNode.type === 13 /* VNODE_CALL */) {\r\n                // non-component sub tree should be turned into a block\r\n                if (node.tagType !== 1 /* COMPONENT */) {\r\n                    makeBlock(codegenNode, context);\r\n                }\r\n                node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [\r\n                    dir.exp,\r\n                    createFunctionExpression(undefined, codegenNode),\r\n                    `_cache`,\r\n                    String(context.cached++)\r\n                ]);\r\n            }\r\n        };\r\n    }\r\n};\n\nfunction getBaseTransformPreset(prefixIdentifiers) {\r\n    return [\r\n        [\r\n            transformOnce,\r\n            transformIf,\r\n            transformMemo,\r\n            transformFor,\r\n            ...([transformFilter] ),\r\n            ...(( false)\r\n                    ? 0\r\n                    : []),\r\n            transformSlotOutlet,\r\n            transformElement,\r\n            trackSlotScopes,\r\n            transformText\r\n        ],\r\n        {\r\n            on: transformOn,\r\n            bind: transformBind,\r\n            model: transformModel\r\n        }\r\n    ];\r\n}\r\n// we name it `baseCompile` so that higher order compilers like\r\n// @vue/compiler-dom can export `compile` while re-exporting everything else.\r\nfunction baseCompile(template, options = {}) {\r\n    const onError = options.onError || defaultOnError;\r\n    const isModuleMode = options.mode === \'module\';\r\n    /* istanbul ignore if */\r\n    {\r\n        if (options.prefixIdentifiers === true) {\r\n            onError(createCompilerError(46 /* X_PREFIX_ID_NOT_SUPPORTED */));\r\n        }\r\n        else if (isModuleMode) {\r\n            onError(createCompilerError(47 /* X_MODULE_MODE_NOT_SUPPORTED */));\r\n        }\r\n    }\r\n    const prefixIdentifiers = !true ;\r\n    if (options.cacheHandlers) {\r\n        onError(createCompilerError(48 /* X_CACHE_HANDLER_NOT_SUPPORTED */));\r\n    }\r\n    if (options.scopeId && !isModuleMode) {\r\n        onError(createCompilerError(49 /* X_SCOPE_ID_NOT_SUPPORTED */));\r\n    }\r\n    const ast = shared_esm_bundler_isString(template) ? compiler_core_esm_bundler_baseParse(template, options) : template;\r\n    const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();\r\n    transform(ast, shared_esm_bundler_extend({}, options, {\r\n        prefixIdentifiers,\r\n        nodeTransforms: [\r\n            ...nodeTransforms,\r\n            ...(options.nodeTransforms || []) // user transforms\r\n        ],\r\n        directiveTransforms: shared_esm_bundler_extend({}, directiveTransforms, options.directiveTransforms || {} // user transforms\r\n        )\r\n    }));\r\n    return generate(ast, shared_esm_bundler_extend({}, options, {\r\n        prefixIdentifiers\r\n    }));\r\n}\n\nconst noopDirectiveTransform = () => ({ props: [] });\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vue/compiler-dom/dist/compiler-dom.esm-bundler.js\n\n\n\n\nconst V_MODEL_RADIO = Symbol(( false) ? 0 : ``);\r\nconst V_MODEL_CHECKBOX = Symbol(( false) ? 0 : ``);\r\nconst V_MODEL_TEXT = Symbol(( false) ? 0 : ``);\r\nconst V_MODEL_SELECT = Symbol(( false) ? 0 : ``);\r\nconst V_MODEL_DYNAMIC = Symbol(( false) ? 0 : ``);\r\nconst V_ON_WITH_MODIFIERS = Symbol(( false) ? 0 : ``);\r\nconst V_ON_WITH_KEYS = Symbol(( false) ? 0 : ``);\r\nconst V_SHOW = Symbol(( false) ? 0 : ``);\r\nconst compiler_dom_esm_bundler_TRANSITION = Symbol(( false) ? 0 : ``);\r\nconst TRANSITION_GROUP = Symbol(( false) ? 0 : ``);\r\nregisterRuntimeHelpers({\r\n    [V_MODEL_RADIO]: `vModelRadio`,\r\n    [V_MODEL_CHECKBOX]: `vModelCheckbox`,\r\n    [V_MODEL_TEXT]: `vModelText`,\r\n    [V_MODEL_SELECT]: `vModelSelect`,\r\n    [V_MODEL_DYNAMIC]: `vModelDynamic`,\r\n    [V_ON_WITH_MODIFIERS]: `withModifiers`,\r\n    [V_ON_WITH_KEYS]: `withKeys`,\r\n    [V_SHOW]: `vShow`,\r\n    [compiler_dom_esm_bundler_TRANSITION]: `Transition`,\r\n    [TRANSITION_GROUP]: `TransitionGroup`\r\n});\n\n/* eslint-disable no-restricted-globals */\r\nlet decoder;\r\nfunction decodeHtmlBrowser(raw, asAttr = false) {\r\n    if (!decoder) {\r\n        decoder = document.createElement(\'div\');\r\n    }\r\n    if (asAttr) {\r\n        decoder.innerHTML = `<div foo="${raw.replace(/"/g, \'&quot;\')}">`;\r\n        return decoder.children[0].getAttribute(\'foo\');\r\n    }\r\n    else {\r\n        decoder.innerHTML = raw;\r\n        return decoder.textContent;\r\n    }\r\n}\n\nconst isRawTextContainer = /*#__PURE__*/ shared_esm_bundler_makeMap(\'style,iframe,script,noscript\', true);\r\nconst parserOptions = {\r\n    isVoidTag: isVoidTag,\r\n    isNativeTag: tag => shared_esm_bundler_isHTMLTag(tag) || shared_esm_bundler_isSVGTag(tag),\r\n    isPreTag: tag => tag === \'pre\',\r\n    decodeEntities: decodeHtmlBrowser ,\r\n    isBuiltInComponent: (tag) => {\r\n        if (isBuiltInType(tag, `Transition`)) {\r\n            return compiler_dom_esm_bundler_TRANSITION;\r\n        }\r\n        else if (isBuiltInType(tag, `TransitionGroup`)) {\r\n            return TRANSITION_GROUP;\r\n        }\r\n    },\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher\r\n    getNamespace(tag, parent) {\r\n        let ns = parent ? parent.ns : 0 /* HTML */;\r\n        if (parent && ns === 2 /* MATH_ML */) {\r\n            if (parent.tag === \'annotation-xml\') {\r\n                if (tag === \'svg\') {\r\n                    return 1 /* SVG */;\r\n                }\r\n                if (parent.props.some(a => a.type === 6 /* ATTRIBUTE */ &&\r\n                    a.name === \'encoding\' &&\r\n                    a.value != null &&\r\n                    (a.value.content === \'text/html\' ||\r\n                        a.value.content === \'application/xhtml+xml\'))) {\r\n                    ns = 0 /* HTML */;\r\n                }\r\n            }\r\n            else if (/^m(?:[ions]|text)$/.test(parent.tag) &&\r\n                tag !== \'mglyph\' &&\r\n                tag !== \'malignmark\') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        else if (parent && ns === 1 /* SVG */) {\r\n            if (parent.tag === \'foreignObject\' ||\r\n                parent.tag === \'desc\' ||\r\n                parent.tag === \'title\') {\r\n                ns = 0 /* HTML */;\r\n            }\r\n        }\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === \'svg\') {\r\n                return 1 /* SVG */;\r\n            }\r\n            if (tag === \'math\') {\r\n                return 2 /* MATH_ML */;\r\n            }\r\n        }\r\n        return ns;\r\n    },\r\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-fragments\r\n    getTextMode({ tag, ns }) {\r\n        if (ns === 0 /* HTML */) {\r\n            if (tag === \'textarea\' || tag === \'title\') {\r\n                return 1 /* RCDATA */;\r\n            }\r\n            if (isRawTextContainer(tag)) {\r\n                return 2 /* RAWTEXT */;\r\n            }\r\n        }\r\n        return 0 /* DATA */;\r\n    }\r\n};\n\n// Parse inline CSS strings for static style attributes into an object.\r\n// This is a NodeTransform since it works on the static `style` attribute and\r\n// converts it into a dynamic equivalent:\r\n// style="color: red" -> :style=\'{ "color": "red" }\'\r\n// It is then processed by `transformElement` and included in the generated\r\n// props.\r\nconst transformStyle = node => {\r\n    if (node.type === 1 /* ELEMENT */) {\r\n        node.props.forEach((p, i) => {\r\n            if (p.type === 6 /* ATTRIBUTE */ && p.name === \'style\' && p.value) {\r\n                // replace p with an expression node\r\n                node.props[i] = {\r\n                    type: 7 /* DIRECTIVE */,\r\n                    name: `bind`,\r\n                    arg: createSimpleExpression(`style`, true, p.loc),\r\n                    exp: parseInlineCSS(p.value.content, p.loc),\r\n                    modifiers: [],\r\n                    loc: p.loc\r\n                };\r\n            }\r\n        });\r\n    }\r\n};\r\nconst parseInlineCSS = (cssText, loc) => {\r\n    const normalized = parseStringStyle(cssText);\r\n    return createSimpleExpression(JSON.stringify(normalized), false, loc, 3 /* CAN_STRINGIFY */);\r\n};\n\nfunction createDOMCompilerError(code, loc) {\r\n    return createCompilerError(code, loc,  false ? 0 : undefined);\r\n}\r\nconst DOMErrorMessages = {\r\n    [50 /* X_V_HTML_NO_EXPRESSION */]: `v-html is missing expression.`,\r\n    [51 /* X_V_HTML_WITH_CHILDREN */]: `v-html will override element children.`,\r\n    [52 /* X_V_TEXT_NO_EXPRESSION */]: `v-text is missing expression.`,\r\n    [53 /* X_V_TEXT_WITH_CHILDREN */]: `v-text will override element children.`,\r\n    [54 /* X_V_MODEL_ON_INVALID_ELEMENT */]: `v-model can only be used on <input>, <textarea> and <select> elements.`,\r\n    [55 /* X_V_MODEL_ARG_ON_ELEMENT */]: `v-model argument is not supported on plain elements.`,\r\n    [56 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,\r\n    [57 /* X_V_MODEL_UNNECESSARY_VALUE */]: `Unnecessary value binding used alongside v-model. It will interfere with v-model\'s behavior.`,\r\n    [58 /* X_V_SHOW_NO_EXPRESSION */]: `v-show is missing expression.`,\r\n    [59 /* X_TRANSITION_INVALID_CHILDREN */]: `<Transition> expects exactly one child element or component.`,\r\n    [60 /* X_IGNORED_SIDE_EFFECT_TAG */]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`\r\n};\n\nconst transformVHtml = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(50 /* X_V_HTML_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(51 /* X_V_HTML_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`innerHTML`, true, loc), exp || createSimpleExpression(\'\', true))\r\n        ]\r\n    };\r\n};\n\nconst transformVText = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(52 /* X_V_TEXT_NO_EXPRESSION */, loc));\r\n    }\r\n    if (node.children.length) {\r\n        context.onError(createDOMCompilerError(53 /* X_V_TEXT_WITH_CHILDREN */, loc));\r\n        node.children.length = 0;\r\n    }\r\n    return {\r\n        props: [\r\n            createObjectProperty(createSimpleExpression(`textContent`, true), exp\r\n                ? createCallExpression(context.helperString(TO_DISPLAY_STRING), [exp], loc)\r\n                : createSimpleExpression(\'\', true))\r\n        ]\r\n    };\r\n};\n\nconst compiler_dom_esm_bundler_transformModel = (dir, node, context) => {\r\n    const baseResult = transformModel(dir, node, context);\r\n    // base transform has errors OR component v-model (only need props)\r\n    if (!baseResult.props.length || node.tagType === 1 /* COMPONENT */) {\r\n        return baseResult;\r\n    }\r\n    if (dir.arg) {\r\n        context.onError(createDOMCompilerError(55 /* X_V_MODEL_ARG_ON_ELEMENT */, dir.arg.loc));\r\n    }\r\n    function checkDuplicatedValue() {\r\n        const value = findProp(node, \'value\');\r\n        if (value) {\r\n            context.onError(createDOMCompilerError(57 /* X_V_MODEL_UNNECESSARY_VALUE */, value.loc));\r\n        }\r\n    }\r\n    const { tag } = node;\r\n    const isCustomElement = context.isCustomElement(tag);\r\n    if (tag === \'input\' ||\r\n        tag === \'textarea\' ||\r\n        tag === \'select\' ||\r\n        isCustomElement) {\r\n        let directiveToUse = V_MODEL_TEXT;\r\n        let isInvalidType = false;\r\n        if (tag === \'input\' || isCustomElement) {\r\n            const type = findProp(node, `type`);\r\n            if (type) {\r\n                if (type.type === 7 /* DIRECTIVE */) {\r\n                    // :type="foo"\r\n                    directiveToUse = V_MODEL_DYNAMIC;\r\n                }\r\n                else if (type.value) {\r\n                    switch (type.value.content) {\r\n                        case \'radio\':\r\n                            directiveToUse = V_MODEL_RADIO;\r\n                            break;\r\n                        case \'checkbox\':\r\n                            directiveToUse = V_MODEL_CHECKBOX;\r\n                            break;\r\n                        case \'file\':\r\n                            isInvalidType = true;\r\n                            context.onError(createDOMCompilerError(56 /* X_V_MODEL_ON_FILE_INPUT_ELEMENT */, dir.loc));\r\n                            break;\r\n                        default:\r\n                            // text type\r\n                            ( false) && 0;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            else if (hasDynamicKeyVBind(node)) {\r\n                // element has bindings with dynamic keys, which can possibly contain\r\n                // "type".\r\n                directiveToUse = V_MODEL_DYNAMIC;\r\n            }\r\n            else {\r\n                // text type\r\n                ( false) && 0;\r\n            }\r\n        }\r\n        else if (tag === \'select\') {\r\n            directiveToUse = V_MODEL_SELECT;\r\n        }\r\n        else {\r\n            // textarea\r\n            ( false) && 0;\r\n        }\r\n        // inject runtime directive\r\n        // by returning the helper symbol via needRuntime\r\n        // the import will replaced a resolveDirective call.\r\n        if (!isInvalidType) {\r\n            baseResult.needRuntime = context.helper(directiveToUse);\r\n        }\r\n    }\r\n    else {\r\n        context.onError(createDOMCompilerError(54 /* X_V_MODEL_ON_INVALID_ELEMENT */, dir.loc));\r\n    }\r\n    // native vmodel doesn\'t need the `modelValue` props since they are also\r\n    // passed to the runtime as `binding.value`. removing it reduces code size.\r\n    baseResult.props = baseResult.props.filter(p => !(p.key.type === 4 /* SIMPLE_EXPRESSION */ &&\r\n        p.key.content === \'modelValue\'));\r\n    return baseResult;\r\n};\n\nconst isEventOptionModifier = /*#__PURE__*/ shared_esm_bundler_makeMap(`passive,once,capture`);\r\nconst isNonKeyModifier = /*#__PURE__*/ shared_esm_bundler_makeMap(\r\n// event propagation management\r\n`stop,prevent,self,` +\r\n    // system modifiers + exact\r\n    `ctrl,shift,alt,meta,exact,` +\r\n    // mouse\r\n    `middle`);\r\n// left & right could be mouse or key modifiers based on event type\r\nconst maybeKeyModifier = /*#__PURE__*/ shared_esm_bundler_makeMap(\'left,right\');\r\nconst isKeyboardEvent = /*#__PURE__*/ shared_esm_bundler_makeMap(`onkeyup,onkeydown,onkeypress`, true);\r\nconst resolveModifiers = (key, modifiers, context, loc) => {\r\n    const keyModifiers = [];\r\n    const nonKeyModifiers = [];\r\n    const eventOptionModifiers = [];\r\n    for (let i = 0; i < modifiers.length; i++) {\r\n        const modifier = modifiers[i];\r\n        if (modifier === \'native\' &&\r\n            checkCompatEnabled("COMPILER_V_ON_NATIVE" /* COMPILER_V_ON_NATIVE */, context, loc)) {\r\n            eventOptionModifiers.push(modifier);\r\n        }\r\n        else if (isEventOptionModifier(modifier)) {\r\n            // eventOptionModifiers: modifiers for addEventListener() options,\r\n            // e.g. .passive & .capture\r\n            eventOptionModifiers.push(modifier);\r\n        }\r\n        else {\r\n            // runtimeModifiers: modifiers that needs runtime guards\r\n            if (maybeKeyModifier(modifier)) {\r\n                if (isStaticExp(key)) {\r\n                    if (isKeyboardEvent(key.content)) {\r\n                        keyModifiers.push(modifier);\r\n                    }\r\n                    else {\r\n                        nonKeyModifiers.push(modifier);\r\n                    }\r\n                }\r\n                else {\r\n                    keyModifiers.push(modifier);\r\n                    nonKeyModifiers.push(modifier);\r\n                }\r\n            }\r\n            else {\r\n                if (isNonKeyModifier(modifier)) {\r\n                    nonKeyModifiers.push(modifier);\r\n                }\r\n                else {\r\n                    keyModifiers.push(modifier);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        keyModifiers,\r\n        nonKeyModifiers,\r\n        eventOptionModifiers\r\n    };\r\n};\r\nconst transformClick = (key, event) => {\r\n    const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === \'onclick\';\r\n    return isStaticClick\r\n        ? createSimpleExpression(event, true)\r\n        : key.type !== 4 /* SIMPLE_EXPRESSION */\r\n            ? createCompoundExpression([\r\n                `(`,\r\n                key,\r\n                `) === "onClick" ? "${event}" : (`,\r\n                key,\r\n                `)`\r\n            ])\r\n            : key;\r\n};\r\nconst compiler_dom_esm_bundler_transformOn = (dir, node, context) => {\r\n    return transformOn(dir, node, context, baseResult => {\r\n        const { modifiers } = dir;\r\n        if (!modifiers.length)\r\n            return baseResult;\r\n        let { key, value: handlerExp } = baseResult.props[0];\r\n        const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);\r\n        // normalize click.right and click.middle since they don\'t actually fire\r\n        if (nonKeyModifiers.includes(\'right\')) {\r\n            key = transformClick(key, `onContextmenu`);\r\n        }\r\n        if (nonKeyModifiers.includes(\'middle\')) {\r\n            key = transformClick(key, `onMouseup`);\r\n        }\r\n        if (nonKeyModifiers.length) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [\r\n                handlerExp,\r\n                JSON.stringify(nonKeyModifiers)\r\n            ]);\r\n        }\r\n        if (keyModifiers.length &&\r\n            // if event name is dynamic, always wrap with keys guard\r\n            (!isStaticExp(key) || isKeyboardEvent(key.content))) {\r\n            handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [\r\n                handlerExp,\r\n                JSON.stringify(keyModifiers)\r\n            ]);\r\n        }\r\n        if (eventOptionModifiers.length) {\r\n            const modifierPostfix = eventOptionModifiers.map(shared_esm_bundler_capitalize).join(\'\');\r\n            key = isStaticExp(key)\r\n                ? createSimpleExpression(`${key.content}${modifierPostfix}`, true)\r\n                : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);\r\n        }\r\n        return {\r\n            props: [createObjectProperty(key, handlerExp)]\r\n        };\r\n    });\r\n};\n\nconst transformShow = (dir, node, context) => {\r\n    const { exp, loc } = dir;\r\n    if (!exp) {\r\n        context.onError(createDOMCompilerError(58 /* X_V_SHOW_NO_EXPRESSION */, loc));\r\n    }\r\n    return {\r\n        props: [],\r\n        needRuntime: context.helper(V_SHOW)\r\n    };\r\n};\n\nconst warnTransitionChildren = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 1 /* COMPONENT */) {\r\n        const component = context.isBuiltInComponent(node.tag);\r\n        if (component === compiler_dom_esm_bundler_TRANSITION) {\r\n            return () => {\r\n                if (node.children.length && hasMultipleChildren(node)) {\r\n                    context.onError(createDOMCompilerError(59 /* X_TRANSITION_INVALID_CHILDREN */, {\r\n                        start: node.children[0].loc.start,\r\n                        end: node.children[node.children.length - 1].loc.end,\r\n                        source: \'\'\r\n                    }));\r\n                }\r\n            };\r\n        }\r\n    }\r\n};\r\nfunction hasMultipleChildren(node) {\r\n    // #1352 filter out potential comment nodes.\r\n    const children = (node.children = node.children.filter(c => c.type !== 3 /* COMMENT */ &&\r\n        !(c.type === 2 /* TEXT */ && !c.content.trim())));\r\n    const child = children[0];\r\n    return (children.length !== 1 ||\r\n        child.type === 11 /* FOR */ ||\r\n        (child.type === 9 /* IF */ && child.branches.some(hasMultipleChildren)));\r\n}\n\nconst ignoreSideEffectTags = (node, context) => {\r\n    if (node.type === 1 /* ELEMENT */ &&\r\n        node.tagType === 0 /* ELEMENT */ &&\r\n        (node.tag === \'script\' || node.tag === \'style\')) {\r\n        context.onError(createDOMCompilerError(60 /* X_IGNORED_SIDE_EFFECT_TAG */, node.loc));\r\n        context.removeNode();\r\n    }\r\n};\n\nconst DOMNodeTransforms = [\r\n    transformStyle,\r\n    ...(( false) ? 0 : [])\r\n];\r\nconst DOMDirectiveTransforms = {\r\n    cloak: noopDirectiveTransform,\r\n    html: transformVHtml,\r\n    text: transformVText,\r\n    model: compiler_dom_esm_bundler_transformModel,\r\n    on: compiler_dom_esm_bundler_transformOn,\r\n    show: transformShow\r\n};\r\nfunction compiler_dom_esm_bundler_compile(template, options = {}) {\r\n    return baseCompile(template, shared_esm_bundler_extend({}, parserOptions, options, {\r\n        nodeTransforms: [\r\n            // ignore <script> and <tag>\r\n            // this is not put inside DOMNodeTransforms because that list is used\r\n            // by compiler-ssr to generate vnode fallback branches\r\n            ignoreSideEffectTags,\r\n            ...DOMNodeTransforms,\r\n            ...(options.nodeTransforms || [])\r\n        ],\r\n        directiveTransforms: shared_esm_bundler_extend({}, DOMDirectiveTransforms, options.directiveTransforms || {}),\r\n        transformHoist: null \r\n    }));\r\n}\r\nfunction parse(template, options = {}) {\r\n    return baseParse(template, extend({}, parserOptions, options));\r\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/vue/dist/vue.esm-bundler.js\n\n\n\n\n\n\nfunction initDev() {\r\n    {\r\n        initCustomFormatter();\r\n    }\r\n}\n\n// This entry is the "full-build" that includes both the runtime\r\nif ((false)) {}\r\nconst compileCache = Object.create(null);\r\nfunction compileToFunction(template, options) {\r\n    if (!shared_esm_bundler_isString(template)) {\r\n        if (template.nodeType) {\r\n            template = template.innerHTML;\r\n        }\r\n        else {\r\n            ( false) && 0;\r\n            return shared_esm_bundler_NOOP;\r\n        }\r\n    }\r\n    const key = template;\r\n    const cached = compileCache[key];\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    if (template[0] === \'#\') {\r\n        const el = document.querySelector(template);\r\n        if (false) {}\r\n        // __UNSAFE__\r\n        // Reason: potential execution of JS expressions in in-DOM template.\r\n        // The user must make sure the in-DOM template is trusted. If it\'s rendered\r\n        // by the server, the template should not contain any user data.\r\n        template = el ? el.innerHTML : ``;\r\n    }\r\n    const { code } = compiler_dom_esm_bundler_compile(template, shared_esm_bundler_extend({\r\n        hoistStatic: true,\r\n        onError: ( false) ? 0 : undefined,\r\n        onWarn: ( false) ? 0 : shared_esm_bundler_NOOP\r\n    }, options));\r\n    function onError(err, asWarning = false) {\r\n        const message = asWarning\r\n            ? err.message\r\n            : `Template compilation error: ${err.message}`;\r\n        const codeFrame = err.loc &&\r\n            generateCodeFrame(template, err.loc.start.offset, err.loc.end.offset);\r\n        runtime_core_esm_bundler_warn(codeFrame ? `${message}\\n${codeFrame}` : message);\r\n    }\r\n    // The wildcard import results in a huge object with every export\r\n    // with keys that cannot be mangled, and can be quite heavy size-wise.\r\n    // In the global build we know `Vue` is available globally so we can avoid\r\n    // the wildcard object.\r\n    const render = (new Function(\'Vue\', code)(runtime_dom_esm_bundler_namespaceObject));\r\n    render._rc = true;\r\n    return (compileCache[key] = render);\r\n}\r\nregisterRuntimeCompiler(compileToFunction);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/env.js\nfunction getDevtoolsGlobalHook() {\n    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;\n}\nfunction getTarget() {\n    // @ts-ignore\n    return (typeof navigator !== \'undefined\' && typeof window !== \'undefined\')\n        ? window\n        : typeof __webpack_require__.g !== \'undefined\'\n            ? __webpack_require__.g\n            : {};\n}\nconst isProxyAvailable = typeof Proxy === \'function\';\n\n;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/const.js\nconst HOOK_SETUP = \'devtools-plugin:setup\';\nconst HOOK_PLUGIN_SETTINGS_SET = \'plugin:settings:set\';\n\n;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/proxy.js\n\nclass ApiProxy {\n    constructor(plugin, hook) {\n        this.target = null;\n        this.targetQueue = [];\n        this.onQueue = [];\n        this.plugin = plugin;\n        this.hook = hook;\n        const defaultSettings = {};\n        if (plugin.settings) {\n            for (const id in plugin.settings) {\n                const item = plugin.settings[id];\n                defaultSettings[id] = item.defaultValue;\n            }\n        }\n        const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;\n        let currentSettings = Object.assign({}, defaultSettings);\n        try {\n            const raw = localStorage.getItem(localSettingsSaveId);\n            const data = JSON.parse(raw);\n            Object.assign(currentSettings, data);\n        }\n        catch (e) {\n            // noop\n        }\n        this.fallbacks = {\n            getSettings() {\n                return currentSettings;\n            },\n            setSettings(value) {\n                try {\n                    localStorage.setItem(localSettingsSaveId, JSON.stringify(value));\n                }\n                catch (e) {\n                    // noop\n                }\n                currentSettings = value;\n            },\n        };\n        if (hook) {\n            hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {\n                if (pluginId === this.plugin.id) {\n                    this.fallbacks.setSettings(value);\n                }\n            });\n        }\n        this.proxiedOn = new Proxy({}, {\n            get: (_target, prop) => {\n                if (this.target) {\n                    return this.target.on[prop];\n                }\n                else {\n                    return (...args) => {\n                        this.onQueue.push({\n                            method: prop,\n                            args,\n                        });\n                    };\n                }\n            },\n        });\n        this.proxiedTarget = new Proxy({}, {\n            get: (_target, prop) => {\n                if (this.target) {\n                    return this.target[prop];\n                }\n                else if (prop === \'on\') {\n                    return this.proxiedOn;\n                }\n                else if (Object.keys(this.fallbacks).includes(prop)) {\n                    return (...args) => {\n                        this.targetQueue.push({\n                            method: prop,\n                            args,\n                            resolve: () => { },\n                        });\n                        return this.fallbacks[prop](...args);\n                    };\n                }\n                else {\n                    return (...args) => {\n                        return new Promise(resolve => {\n                            this.targetQueue.push({\n                                method: prop,\n                                args,\n                                resolve,\n                            });\n                        });\n                    };\n                }\n            },\n        });\n    }\n    async setRealTarget(target) {\n        this.target = target;\n        for (const item of this.onQueue) {\n            this.target.on[item.method](...item.args);\n        }\n        for (const item of this.targetQueue) {\n            item.resolve(await this.target[item.method](...item.args));\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/@vue/devtools-api/lib/esm/index.js\n\n\n\n\n\nfunction setupDevtoolsPlugin(pluginDescriptor, setupFn) {\n    const descriptor = pluginDescriptor;\n    const target = getTarget();\n    const hook = getDevtoolsGlobalHook();\n    const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;\n    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {\n        hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);\n    }\n    else {\n        const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;\n        const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];\n        list.push({\n            pluginDescriptor: descriptor,\n            setupFn,\n            proxy,\n        });\n        if (proxy)\n            setupFn(proxy.proxiedTarget);\n    }\n}\n\n;// CONCATENATED MODULE: ./node_modules/vuex/dist/vuex.esm-bundler.js\n/*!\n * vuex v4.0.2\n * (c) 2021 Evan You\n * @license MIT\n */\n\n\n\nvar storeKey = \'store\';\n\nfunction useStore (key) {\n  if ( key === void 0 ) key = null;\n\n  return runtime_core_esm_bundler_inject(key !== null ? key : storeKey)\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\nfunction find (list, f) {\n  return list.filter(f)[0]\n}\n\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\nfunction deepCopy (obj, cache) {\n  if ( cache === void 0 ) cache = [];\n\n  // just return if obj is immutable value\n  if (obj === null || typeof obj !== \'object\') {\n    return obj\n  }\n\n  // if obj is hit, it is in circular structure\n  var hit = find(cache, function (c) { return c.original === obj; });\n  if (hit) {\n    return hit.copy\n  }\n\n  var copy = Array.isArray(obj) ? [] : {};\n  // put the copy into cache at first\n  // because we want to refer it in recursive deepCopy\n  cache.push({\n    original: obj,\n    copy: copy\n  });\n\n  Object.keys(obj).forEach(function (key) {\n    copy[key] = deepCopy(obj[key], cache);\n  });\n\n  return copy\n}\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction vuex_esm_bundler_isObject (obj) {\n  return obj !== null && typeof obj === \'object\'\n}\n\nfunction vuex_esm_bundler_isPromise (val) {\n  return val && typeof val.then === \'function\'\n}\n\nfunction vuex_esm_bundler_assert (condition, msg) {\n  if (!condition) { throw new Error(("[vuex] " + msg)) }\n}\n\nfunction partial (fn, arg) {\n  return function () {\n    return fn(arg)\n  }\n}\n\nfunction genericSubscribe (fn, subs, options) {\n  if (subs.indexOf(fn) < 0) {\n    options && options.prepend\n      ? subs.unshift(fn)\n      : subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset state\n  resetStoreState(store, state, hot);\n}\n\nfunction resetStoreState (store, state, hot) {\n  var oldState = store._state;\n\n  // bind store public getters\n  store.getters = {};\n  // reset local getters cache\n  store._makeLocalGettersCache = Object.create(null);\n  var wrappedGetters = store._wrappedGetters;\n  var computedObj = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    // direct inline function use will lead to closure preserving oldState.\n    // using partial to return function with only arguments preserved in closure environment.\n    computedObj[key] = partial(fn, store);\n    Object.defineProperty(store.getters, key, {\n      // TODO: use `computed` when it\'s possible. at the moment we can\'t due to\n      // https://github.com/vuejs/vuex/pull/1883\n      get: function () { return computedObj[key](); },\n      enumerable: true // for local getters\n    });\n  });\n\n  store._state = reactivity_esm_bundler_reactive({\n    data: state\n  });\n\n  // enable strict mode for new state\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldState) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldState.data = null;\n      });\n    }\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    if (store._modulesNamespaceMap[namespace] && ("production" !== \'production\')) {}\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      if ((false)) {}\n      parentState[moduleName] = module.state;\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === \'\';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (false) {}\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if (false) {}\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by state update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  if (!store._makeLocalGettersCache[namespace]) {\n    var gettersProxy = {};\n    var splitPos = namespace.length;\n    Object.keys(store.getters).forEach(function (type) {\n      // skip if the target getter is not match this namespace\n      if (type.slice(0, splitPos) !== namespace) { return }\n\n      // extract local getter type\n      var localType = type.slice(splitPos);\n\n      // Add a port to the getters proxy.\n      // Define as getter property because\n      // we do not want to evaluate the getters in this time.\n      Object.defineProperty(gettersProxy, localType, {\n        get: function () { return store.getters[type]; },\n        enumerable: true\n      });\n    });\n    store._makeLocalGettersCache[namespace] = gettersProxy;\n  }\n\n  return store._makeLocalGettersCache[namespace]\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload);\n    if (!vuex_esm_bundler_isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit(\'vuex:error\', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if ((false)) {}\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  runtime_core_esm_bundler_watch(function () { return store._state.data; }, function () {\n    if ((false)) {}\n  }, { deep: true, flush: \'sync\' });\n}\n\nfunction getNestedState (state, path) {\n  return path.reduce(function (state, key) { return state[key]; }, state)\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (vuex_esm_bundler_isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if ((false)) {}\n\n  return { type: type, payload: payload, options: options }\n}\n\nvar LABEL_VUEX_BINDINGS = \'vuex bindings\';\nvar MUTATIONS_LAYER_ID = \'vuex:mutations\';\nvar ACTIONS_LAYER_ID = \'vuex:actions\';\nvar INSPECTOR_ID = \'vuex\';\n\nvar actionId = 0;\n\nfunction addDevtools (app, store) {\n  setupDevtoolsPlugin(\n    {\n      id: \'org.vuejs.vuex\',\n      app: app,\n      label: \'Vuex\',\n      homepage: \'https://next.vuex.vuejs.org/\',\n      logo: \'https://vuejs.org/images/icons/favicon-96x96.png\',\n      packageName: \'vuex\',\n      componentStateTypes: [LABEL_VUEX_BINDINGS]\n    },\n    function (api) {\n      api.addTimelineLayer({\n        id: MUTATIONS_LAYER_ID,\n        label: \'Vuex Mutations\',\n        color: COLOR_LIME_500\n      });\n\n      api.addTimelineLayer({\n        id: ACTIONS_LAYER_ID,\n        label: \'Vuex Actions\',\n        color: COLOR_LIME_500\n      });\n\n      api.addInspector({\n        id: INSPECTOR_ID,\n        label: \'Vuex\',\n        icon: \'storage\',\n        treeFilterPlaceholder: \'Filter stores...\'\n      });\n\n      api.on.getInspectorTree(function (payload) {\n        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n          if (payload.filter) {\n            var nodes = [];\n            flattenStoreForInspectorTree(nodes, store._modules.root, payload.filter, \'\');\n            payload.rootNodes = nodes;\n          } else {\n            payload.rootNodes = [\n              formatStoreForInspectorTree(store._modules.root, \'\')\n            ];\n          }\n        }\n      });\n\n      api.on.getInspectorState(function (payload) {\n        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n          var modulePath = payload.nodeId;\n          makeLocalGetters(store, modulePath);\n          payload.state = formatStoreForInspectorState(\n            getStoreModule(store._modules, modulePath),\n            modulePath === \'root\' ? store.getters : store._makeLocalGettersCache,\n            modulePath\n          );\n        }\n      });\n\n      api.on.editInspectorState(function (payload) {\n        if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n          var modulePath = payload.nodeId;\n          var path = payload.path;\n          if (modulePath !== \'root\') {\n            path = modulePath.split(\'/\').filter(Boolean).concat( path);\n          }\n          store._withCommit(function () {\n            payload.set(store._state.data, path, payload.state.value);\n          });\n        }\n      });\n\n      store.subscribe(function (mutation, state) {\n        var data = {};\n\n        if (mutation.payload) {\n          data.payload = mutation.payload;\n        }\n\n        data.state = state;\n\n        api.notifyComponentUpdate();\n        api.sendInspectorTree(INSPECTOR_ID);\n        api.sendInspectorState(INSPECTOR_ID);\n\n        api.addTimelineEvent({\n          layerId: MUTATIONS_LAYER_ID,\n          event: {\n            time: Date.now(),\n            title: mutation.type,\n            data: data\n          }\n        });\n      });\n\n      store.subscribeAction({\n        before: function (action, state) {\n          var data = {};\n          if (action.payload) {\n            data.payload = action.payload;\n          }\n          action._id = actionId++;\n          action._time = Date.now();\n          data.state = state;\n\n          api.addTimelineEvent({\n            layerId: ACTIONS_LAYER_ID,\n            event: {\n              time: action._time,\n              title: action.type,\n              groupId: action._id,\n              subtitle: \'start\',\n              data: data\n            }\n          });\n        },\n        after: function (action, state) {\n          var data = {};\n          var duration = Date.now() - action._time;\n          data.duration = {\n            _custom: {\n              type: \'duration\',\n              display: (duration + "ms"),\n              tooltip: \'Action duration\',\n              value: duration\n            }\n          };\n          if (action.payload) {\n            data.payload = action.payload;\n          }\n          data.state = state;\n\n          api.addTimelineEvent({\n            layerId: ACTIONS_LAYER_ID,\n            event: {\n              time: Date.now(),\n              title: action.type,\n              groupId: action._id,\n              subtitle: \'end\',\n              data: data\n            }\n          });\n        }\n      });\n    }\n  );\n}\n\n// extracted from tailwind palette\nvar COLOR_LIME_500 = 0x84cc16;\nvar COLOR_DARK = 0x666666;\nvar COLOR_WHITE = 0xffffff;\n\nvar TAG_NAMESPACED = {\n  label: \'namespaced\',\n  textColor: COLOR_WHITE,\n  backgroundColor: COLOR_DARK\n};\n\n/**\n * @param {string} path\n */\nfunction extractNameFromPath (path) {\n  return path && path !== \'root\' ? path.split(\'/\').slice(-2, -1)[0] : \'Root\'\n}\n\n/**\n * @param {*} module\n * @return {import(\'@vue/devtools-api\').CustomInspectorNode}\n */\nfunction formatStoreForInspectorTree (module, path) {\n  return {\n    id: path || \'root\',\n    // all modules end with a `/`, we want the last segment only\n    // cart/ -> cart\n    // nested/cart/ -> cart\n    label: extractNameFromPath(path),\n    tags: module.namespaced ? [TAG_NAMESPACED] : [],\n    children: Object.keys(module._children).map(function (moduleName) { return formatStoreForInspectorTree(\n        module._children[moduleName],\n        path + moduleName + \'/\'\n      ); }\n    )\n  }\n}\n\n/**\n * @param {import(\'@vue/devtools-api\').CustomInspectorNode[]} result\n * @param {*} module\n * @param {string} filter\n * @param {string} path\n */\nfunction flattenStoreForInspectorTree (result, module, filter, path) {\n  if (path.includes(filter)) {\n    result.push({\n      id: path || \'root\',\n      label: path.endsWith(\'/\') ? path.slice(0, path.length - 1) : path || \'Root\',\n      tags: module.namespaced ? [TAG_NAMESPACED] : []\n    });\n  }\n  Object.keys(module._children).forEach(function (moduleName) {\n    flattenStoreForInspectorTree(result, module._children[moduleName], filter, path + moduleName + \'/\');\n  });\n}\n\n/**\n * @param {*} module\n * @return {import(\'@vue/devtools-api\').CustomInspectorState}\n */\nfunction formatStoreForInspectorState (module, getters, path) {\n  getters = path === \'root\' ? getters : getters[path];\n  var gettersKeys = Object.keys(getters);\n  var storeState = {\n    state: Object.keys(module.state).map(function (key) { return ({\n      key: key,\n      editable: true,\n      value: module.state[key]\n    }); })\n  };\n\n  if (gettersKeys.length) {\n    var tree = transformPathsToObjectTree(getters);\n    storeState.getters = Object.keys(tree).map(function (key) { return ({\n      key: key.endsWith(\'/\') ? extractNameFromPath(key) : key,\n      editable: false,\n      value: canThrow(function () { return tree[key]; })\n    }); });\n  }\n\n  return storeState\n}\n\nfunction transformPathsToObjectTree (getters) {\n  var result = {};\n  Object.keys(getters).forEach(function (key) {\n    var path = key.split(\'/\');\n    if (path.length > 1) {\n      var target = result;\n      var leafKey = path.pop();\n      path.forEach(function (p) {\n        if (!target[p]) {\n          target[p] = {\n            _custom: {\n              value: {},\n              display: p,\n              tooltip: \'Module\',\n              abstract: true\n            }\n          };\n        }\n        target = target[p]._custom.value;\n      });\n      target[leafKey] = canThrow(function () { return getters[key]; });\n    } else {\n      result[key] = canThrow(function () { return getters[key]; });\n    }\n  });\n  return result\n}\n\nfunction getStoreModule (moduleMap, path) {\n  var names = path.split(\'/\').filter(function (n) { return n; });\n  return names.reduce(\n    function (module, moduleName, i) {\n      var child = module[moduleName];\n      if (!child) {\n        throw new Error(("Missing module \\"" + moduleName + "\\" for path \\"" + path + "\\"."))\n      }\n      return i === names.length - 1 ? child : child._children\n    },\n    path === \'root\' ? moduleMap : moduleMap.root._children\n  )\n}\n\nfunction canThrow (cb) {\n  try {\n    return cb()\n  } catch (e) {\n    return e\n  }\n}\n\n// Base data struct for store\'s module, package with some attribute and method\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  // Store some children item\n  this._children = Object.create(null);\n  // Store the origin module object which passed by programmer\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n\n  // Store the origin module\'s state\n  this.state = (typeof rawState === \'function\' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.hasChild = function hasChild (key) {\n  return key in this._children\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + \'/\' : \'\')\n  }, \'\')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if ((false)) {}\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  var child = parent.getChild(key);\n\n  if (!child) {\n    if ((false)) {}\n    return\n  }\n\n  if (!child.runtime) {\n    return\n  }\n\n  parent.removeChild(key);\n};\n\nModuleCollection.prototype.isRegistered = function isRegistered (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n\n  if (parent) {\n    return parent.hasChild(key)\n  }\n\n  return false\n};\n\nfunction update (path, targetModule, newModule) {\n  if ((false)) {}\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if ((false)) {}\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === \'function\'; },\n  expected: \'function\'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === \'function\' ||\n    (typeof value === \'object\' && typeof value.handler === \'function\'); },\n  expected: \'function or object with "handler" function\'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      vuex_esm_bundler_assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + " should be " + expected + " but \\"" + key + "." + type + "\\"";\n  if (path.length > 0) {\n    buf += " in module \\"" + (path.join(\'.\')) + "\\"";\n  }\n  buf += " is " + (JSON.stringify(value)) + ".";\n  return buf\n}\n\nfunction createStore (options) {\n  return new Store(options)\n}\n\nvar Store = function Store (options) {\n  var this$1$1 = this;\n  if ( options === void 0 ) options = {};\n\n  if ((false)) {}\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n  var devtools = options.devtools;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._makeLocalGettersCache = Object.create(null);\n  this._devtools = devtools;\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  var state = this._modules.root.state;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store state, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreState(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1$1); });\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nStore.prototype.install = function install (app, injectKey) {\n  app.provide(injectKey || storeKey, this);\n  app.config.globalProperties.$store = this;\n\n  var useDevtools = this._devtools !== undefined\n    ? this._devtools\n    : ( false) || false;\n\n  if (useDevtools) {\n    addDevtools(app, this);\n  }\n};\n\nprototypeAccessors.state.get = function () {\n  return this._state.data\n};\n\nprototypeAccessors.state.set = function (v) {\n  if ((false)) {}\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if ((false)) {}\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n\n  this._subscribers\n    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n    .forEach(function (sub) { return sub(mutation, this$1$1.state); });\n\n  if (\n    false\n  ) {}\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if ((false)) {}\n    return\n  }\n\n  try {\n    this._actionSubscribers\n      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n      .filter(function (sub) { return sub.before; })\n      .forEach(function (sub) { return sub.before(action, this$1$1.state); });\n  } catch (e) {\n    if ((false)) {}\n  }\n\n  var result = entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload);\n\n  return new Promise(function (resolve, reject) {\n    result.then(function (res) {\n      try {\n        this$1$1._actionSubscribers\n          .filter(function (sub) { return sub.after; })\n          .forEach(function (sub) { return sub.after(action, this$1$1.state); });\n      } catch (e) {\n        if ((false)) {}\n      }\n      resolve(res);\n    }, function (error) {\n      try {\n        this$1$1._actionSubscribers\n          .filter(function (sub) { return sub.error; })\n          .forEach(function (sub) { return sub.error(action, this$1$1.state, error); });\n      } catch (e) {\n        if ((false)) {}\n      }\n      reject(error);\n    });\n  })\n};\n\nStore.prototype.subscribe = function subscribe (fn, options) {\n  return genericSubscribe(fn, this._subscribers, options)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn, options) {\n  var subs = typeof fn === \'function\' ? { before: fn } : fn;\n  return genericSubscribe(subs, this._actionSubscribers, options)\n};\n\nStore.prototype.watch = function watch$1 (getter, cb, options) {\n    var this$1$1 = this;\n\n  if ((false)) {}\n  return runtime_core_esm_bundler_watch(function () { return getter(this$1$1.state, this$1$1.getters); }, cb, Object.assign({}, options))\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1$1 = this;\n\n  this._withCommit(function () {\n    this$1$1._state.data = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === \'string\') { path = [path]; }\n\n  if ((false)) {}\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreState(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1$1 = this;\n\n  if (typeof path === \'string\') { path = [path]; }\n\n  if ((false)) {}\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1$1.state, path.slice(0, -1));\n    delete parentState[path[path.length - 1]];\n  });\n  resetStore(this);\n};\n\nStore.prototype.hasModule = function hasModule (path) {\n  if (typeof path === \'string\') { path = [path]; }\n\n  if ((false)) {}\n\n  return this._modules.isRegistered(path)\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\n/**\n * Reduce the code which written in Vue.js for getting the state.\n * @param {String} [namespace] - Module\'s namespace\n * @param {Object|Array} states # Object\'s item can be a function which accept state and getters for param, you can do something for state and getters in it.\n * @param {Object}\n */\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  if (false) {}\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, \'mapState\', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === \'function\'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for committing the mutation\n * @param {String} [namespace] - Module\'s namespace\n * @param {Object|Array} mutations # Object\'s item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  if (false) {}\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // Get the commit method from store\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, \'mapMutations\', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === \'function\'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for getting the getters\n * @param {String} [namespace] - Module\'s namespace\n * @param {Object|Array} getters\n * @return {Object}\n */\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  if (false) {}\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    // The namespace has been mutated by normalizeNamespace\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, \'mapGetters\', namespace)) {\n        return\n      }\n      if (false) {}\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for dispatch the action\n * @param {String} [namespace] - Module\'s namespace\n * @param {Object|Array} actions # Object\'s item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  if (false) {}\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // get dispatch function from store\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, \'mapActions\', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === \'function\'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object\n * @param {String} namespace\n * @return {Object}\n */\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: \'a\', val: 1 }, { key: \'b\', val: 2 }, { key: \'c\', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nfunction normalizeMap (map) {\n  if (!isValidMap(map)) {\n    return []\n  }\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\n/**\n * Validate whether given map is valid or not\n * @param {*} map\n * @return {Boolean}\n */\nfunction isValidMap (map) {\n  return Array.isArray(map) || vuex_esm_bundler_isObject(map)\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param\'s function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== \'string\') {\n      map = namespace;\n      namespace = \'\';\n    } else if (namespace.charAt(namespace.length - 1) !== \'/\') {\n      namespace += \'/\';\n    }\n    return fn(namespace, map)\n  }\n}\n\n/**\n * Search a special module from store by namespace. if module not exist, print error message.\n * @param {Object} store\n * @param {String} helper\n * @param {String} namespace\n * @return {Object}\n */\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if (false) {}\n  return module\n}\n\n// Credits: borrowed code from fcomb/redux-logger\n\nfunction createLogger (ref) {\n  if ( ref === void 0 ) ref = {};\n  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;\n  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };\n  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };\n  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };\n  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };\n  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };\n  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;\n  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;\n  var logger = ref.logger; if ( logger === void 0 ) logger = console;\n\n  return function (store) {\n    var prevState = deepCopy(store.state);\n\n    if (typeof logger === \'undefined\') {\n      return\n    }\n\n    if (logMutations) {\n      store.subscribe(function (mutation, state) {\n        var nextState = deepCopy(state);\n\n        if (filter(mutation, prevState, nextState)) {\n          var formattedTime = getFormattedTime();\n          var formattedMutation = mutationTransformer(mutation);\n          var message = "mutation " + (mutation.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log(\'%c prev state\', \'color: #9E9E9E; font-weight: bold\', transformer(prevState));\n          logger.log(\'%c mutation\', \'color: #03A9F4; font-weight: bold\', formattedMutation);\n          logger.log(\'%c next state\', \'color: #4CAF50; font-weight: bold\', transformer(nextState));\n          endMessage(logger);\n        }\n\n        prevState = nextState;\n      });\n    }\n\n    if (logActions) {\n      store.subscribeAction(function (action, state) {\n        if (actionFilter(action, state)) {\n          var formattedTime = getFormattedTime();\n          var formattedAction = actionTransformer(action);\n          var message = "action " + (action.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log(\'%c action\', \'color: #03A9F4; font-weight: bold\', formattedAction);\n          endMessage(logger);\n        }\n      });\n    }\n  }\n}\n\nfunction startMessage (logger, message, collapsed) {\n  var startMessage = collapsed\n    ? logger.groupCollapsed\n    : logger.group;\n\n  // render\n  try {\n    startMessage.call(logger, message);\n  } catch (e) {\n    logger.log(message);\n  }\n}\n\nfunction endMessage (logger) {\n  try {\n    logger.groupEnd();\n  } catch (e) {\n    logger.log(\'—— log end ——\');\n  }\n}\n\nfunction getFormattedTime () {\n  var time = new Date();\n  return (" @ " + (pad(time.getHours(), 2)) + ":" + (pad(time.getMinutes(), 2)) + ":" + (pad(time.getSeconds(), 2)) + "." + (pad(time.getMilliseconds(), 3)))\n}\n\nfunction repeat (str, times) {\n  return (new Array(times + 1)).join(str)\n}\n\nfunction pad (num, maxLength) {\n  return repeat(\'0\', maxLength - num.toString().length) + num\n}\n\nvar index = {\n  version: \'4.0.2\',\n  Store: Store,\n  storeKey: storeKey,\n  createStore: createStore,\n  useStore: useStore,\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers,\n  createLogger: createLogger\n};\n\n/* harmony default export */ var vuex_esm_bundler = ((/* unused pure expression or super */ null && (index)));\n\n\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i["return"] != null) _i["return"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === "string") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === "Object" && o.constructor) n = o.constructor.name;\n  if (n === "Map" || n === "Set") return Array.from(o);\n  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(757);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/app.store.js\n\n\n\n\nfunction app_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? app_store_ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : app_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nvar state = function state() {\n  return {\n    discountedVariants: [],\n    cartItems: [],\n    crossSellOffers: {},\n    upsellOffers: {},\n    upsellFromId: null,\n    crossSellFromId: null,\n    upsellToId: null,\n    crossSellToId: null,\n    upsellModalOpened: false,\n    loading: false\n  };\n};\n\nvar getters = {\n  loading: function loading(state) {\n    return state.loading;\n  },\n  discountedVariants: function discountedVariants(state) {\n    return state.discountedVariants;\n  },\n  cartItems: function cartItems(state) {\n    return state.cartItems;\n  },\n  crossSellOffers: function crossSellOffers(state) {\n    return state.crossSellOffers;\n  },\n  upsellOffers: function upsellOffers(state) {\n    return state.upsellOffers;\n  },\n  upsellId: function upsellId(state) {\n    return state.upsellId;\n  },\n  upsellModalOpened: function upsellModalOpened(state) {\n    return state.upsellModalOpened;\n  },\n  upsellFrom: function upsellFrom(state) {\n    return state.cartItems.filter(function (item) {\n      return item.id === state.upsellFromId;\n    })[0] || null;\n  },\n  upsellTo: function upsellTo(state) {\n    try {\n      return state.upsellOffers[state.upsellFromId].options.filter(function (option) {\n        return option.variant_id === state.upsellToId;\n      })[0] || null;\n    } catch (_unused) {\n      return null;\n    }\n  },\n  crossSellTo: function crossSellTo(state) {\n    try {\n      return state.crossSellOffers[state.crossSellFromId].options.filter(function (option) {\n        return option.variant_id === state.crossSellToId;\n      })[0] || null;\n    } catch (_unused2) {\n      return null;\n    }\n  },\n  upsellOptions: function upsellOptions(state) {\n    try {\n      return state.upsellOffers[state.upsellFromId].options;\n    } catch (_unused3) {\n      return [];\n    }\n  },\n  crossSellOptions: function crossSellOptions(state) {\n    try {\n      return state.crossSellOffers[state.crossSellFromId].options;\n    } catch (_unused4) {\n      return [];\n    }\n  }\n};\nvar actions = {\n  init: function init(_ref, variantProducts) {\n    return _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {\n      var dispatch, commit, cartItems, _generateOffers, upsellOffers, crossSellOffers;\n\n      return regenerator_default().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch = _ref.dispatch, commit = _ref.commit;\n              _context.prev = 1;\n              _context.next = 4;\n              return dispatch("syncCart");\n\n            case 4:\n              cartItems = _context.sent;\n              _generateOffers = generateOffers(variantProducts, cartItems), upsellOffers = _generateOffers.upsellOffers, crossSellOffers = _generateOffers.crossSellOffers;\n              commit("setUpsellOffers", upsellOffers);\n              commit("setCrossSellOffers", crossSellOffers); // Find Most Upgrade-able Item In Cart\n\n              dispatch("initalizeUpsellFromId");\n              dispatch("initalizeUpsellToId");\n              dispatch("initalizeCrossSellFromId");\n              dispatch("initalizeCrossSellToId");\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context["catch"](1);\n              console.error(_context.t0);\n\n            case 17:\n            case "end":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 14]]);\n    }))();\n  },\n  initalizeUpsellFromId: function initalizeUpsellFromId(_ref2) {\n    var getters = _ref2.getters,\n        commit = _ref2.commit;\n    var cartItems = JSON.parse(JSON.stringify(getters["cartItems"]));\n    var sorted = cartItems.sort(function (a, b) {\n      return a.price > b.price ? 1 : -1;\n    });\n    var target = sorted[0] || {};\n    commit("setUpsellFromId", Number(target.id));\n  },\n  initalizeCrossSellFromId: function initalizeCrossSellFromId(_ref3) {\n    var getters = _ref3.getters,\n        commit = _ref3.commit;\n    var cartItems = JSON.parse(JSON.stringify(getters["cartItems"]));\n    var sorted = cartItems.sort(function (a, b) {\n      return a.price > b.price ? 1 : -1;\n    });\n    var target = sorted[0] || {};\n    commit("setCrossSellFromId", Number(target.id));\n  },\n  initalizeUpsellToId: function initalizeUpsellToId(_ref4) {\n    var getters = _ref4.getters,\n        commit = _ref4.commit;\n    var upsellOptions = getters["upsellOptions"];\n    if (!upsellOptions.length) return;\n    var upsellFrom = getters["upsellFrom"];\n    var upsellTo = upsellOptions.filter(function (option) {\n      return upsellFrom.option1 === option.option1;\n    })[0] || upsellOptions[0];\n    commit("setUpsellToId", upsellTo.variant_id);\n  },\n  initalizeCrossSellToId: function initalizeCrossSellToId(_ref5) {\n    var getters = _ref5.getters,\n        commit = _ref5.commit;\n    var crossSellOptions = getters["crossSellOptions"];\n    if (!crossSellOptions.length) return;\n    var crossSellFrom = getters["upsellFrom"]; // same\n\n    var crossSellTo = crossSellOptions.filter(function (option) {\n      return crossSellFrom.option1 === option.option1;\n    })[0] || crossSellOptions[0];\n    commit("setCrossSellToId", crossSellTo.variant_id);\n  },\n  syncCart: function syncCart(_ref6) {\n    return _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee2() {\n      var commit, response, cart;\n      return regenerator_default().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              commit = _ref6.commit;\n              commit("setLoading", true);\n              _context2.next = 4;\n              return fetch("/cart.js", {\n                method: \'GET\',\n                headers: {\n                  \'Accept\': \'application/json\',\n                  \'Content-Type\': \'application/json\'\n                }\n              });\n\n            case 4:\n              response = _context2.sent;\n              commit("setLoading", false);\n\n              if (!(response.status !== 200)) {\n                _context2.next = 8;\n                break;\n              }\n\n              throw new Error(response.statusText);\n\n            case 8:\n              _context2.next = 10;\n              return response.json();\n\n            case 10:\n              cart = _context2.sent;\n              commit("setCartItems", cart.items);\n              return _context2.abrupt("return", cart.items);\n\n            case 13:\n            case "end":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  swapItemInCart: function swapItemInCart(_ref7, upsellTo) {\n    return _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee3() {\n      var _updates;\n\n      var getters, commit, upsellFrom, response, item;\n      return regenerator_default().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              getters = _ref7.getters, commit = _ref7.commit;\n              commit("setLoading", true);\n              upsellFrom = getters["upsellFrom"];\n              _context3.next = 5;\n              return fetch("/cart/update.js", {\n                method: \'POST\',\n                headers: {\n                  \'Accept\': \'application/json\',\n                  \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                  updates: (_updates = {}, _defineProperty(_updates, upsellFrom.id, upsellFrom.quantity - 1 || 0), _defineProperty(_updates, upsellTo.id, 1), _updates)\n                })\n              });\n\n            case 5:\n              response = _context3.sent;\n              commit("setLoading", false);\n\n              if (!(response.status !== 200)) {\n                _context3.next = 9;\n                break;\n              }\n\n              throw new Error(response.statusText);\n\n            case 9:\n              _context3.next = 11;\n              return response.json();\n\n            case 11:\n              item = _context3.sent;\n              console.log(item);\n\n            case 13:\n            case "end":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  },\n  addItemToCart: function addItemToCart(_ref8, crossSellTo) {\n    return _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee4() {\n      var commit, response, item;\n      return regenerator_default().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              commit = _ref8.commit;\n              commit("setLoading", true);\n              _context4.next = 4;\n              return fetch("/cart/add.js", {\n                method: \'POST\',\n                headers: {\n                  \'Accept\': \'application/json\',\n                  \'Content-Type\': \'application/json\'\n                },\n                body: JSON.stringify({\n                  items: [{\n                    id: crossSellTo.variant_id,\n                    quantity: 1\n                  }]\n                })\n              });\n\n            case 4:\n              response = _context4.sent;\n              commit("setLoading", false);\n\n              if (!(response.status !== 200)) {\n                _context4.next = 8;\n                break;\n              }\n\n              throw new Error(response.statusText);\n\n            case 8:\n              _context4.next = 10;\n              return response.json();\n\n            case 10:\n              item = _context4.sent;\n              console.log(item.items[0]);\n\n            case 12:\n            case "end":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  }\n};\nvar mutations = {\n  setDiscountedVariants: function setDiscountedVariants(state, array) {\n    state.discountedVariants = array;\n  },\n  setCartItems: function setCartItems(state, array) {\n    state.cartItems = array;\n  },\n  setUpsellFromId: function setUpsellFromId(state, variantId) {\n    state.upsellFromId = variantId;\n  },\n  setCrossSellFromId: function setCrossSellFromId(state, variantId) {\n    state.crossSellFromId = variantId;\n  },\n  setUpsellToId: function setUpsellToId(state, variantId) {\n    state.upsellToId = variantId;\n  },\n  setCrossSellToId: function setCrossSellToId(state, variantId) {\n    state.crossSellToId = variantId;\n  },\n  setCrossSellOffers: function setCrossSellOffers(state, offersObject) {\n    state.crossSellOffers = offersObject;\n  },\n  setUpsellOffers: function setUpsellOffers(state, offersObject) {\n    state.upsellOffers = offersObject;\n  },\n  setUpsellModalOpened: function setUpsellModalOpened(state, _boolean) {\n    if (!_boolean && state.loading) return;\n    state.upsellModalOpened = _boolean;\n  },\n  setLoading: function setLoading(state, _boolean2) {\n    state.loading = _boolean2;\n  }\n};\n/* harmony default export */ var app_store = ({\n  namespaced: true,\n  state: state,\n  getters: getters,\n  actions: actions,\n  mutations: mutations\n});\n\nvar generateOffers = function generateOffers() {\n  var discountedVariants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var cartItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var flavorsInCart = [];\n  var sizesInCart = [];\n  var nonSubscriptionCartItems = [];\n  cartItems.forEach(function (item) {\n    if (!item.requires_selling_plan) {\n      nonSubscriptionCartItems.push(item);\n    }\n\n    var _item$variant_options = _slicedToArray(item.variant_options, 2),\n        flavor = _item$variant_options[0],\n        size = _item$variant_options[1];\n\n    if (flavorsInCart.indexOf(flavor) === -1) {\n      flavorsInCart.push(flavor);\n    }\n\n    if (sizesInCart.indexOf(size) === -1) {\n      sizesInCart.push(size);\n    }\n  });\n  var discountOffersObject = {\n    crossSellsFor: {},\n    upsellsFor: {}\n  }; // Build Options For Each Variant\n\n  discountedVariants.forEach(function (variant) {\n    discountOffersObject.crossSellsFor[variant.title] = discountedVariants.filter(function (oVariant) {\n      return oVariant.id !== variant.id && !flavorsInCart.includes(oVariant.option1) && oVariant.option1 !== "Sampler" && variant.option1 !== "Sampler";\n    });\n    discountOffersObject.upsellsFor[variant.title] = discountedVariants.filter(function (oVariant) {\n      return oVariant.id !== variant.id && parseFloat(oVariant.option2) > parseFloat(variant.option2) && (oVariant.option1 === variant.option1 || oVariant.option1 === "Sampler");\n    });\n  }); // Build Offer Objects\n\n  var crossSellOffers = {};\n  var upsellOffers = {};\n  nonSubscriptionCartItems.forEach(function (item) {\n    var crossSellOptions = discountOffersObject.crossSellsFor[item.variant_title].map(function (option) {\n      return _objectSpread(_objectSpread({}, option), {}, {\n        title: option.title,\n        variant_id: option.id,\n        price: option.price,\n        savings: parseFloat(option.price) - parseFloat(item.price),\n        label: generateLabel(item, option)\n      });\n    });\n    var upsellOptions = discountOffersObject.upsellsFor[item.variant_title].map(function (option) {\n      var _item$variant_options2 = _slicedToArray(item.variant_options, 2),\n          currentFlavor = _item$variant_options2[0],\n          currentQty = _item$variant_options2[1];\n\n      currentQty = parseInt(currentQty);\n      var totalNewQty = parseInt(option.option2);\n      return _objectSpread(_objectSpread({}, option), {}, {\n        title: option.title,\n        variant_id: option.id,\n        price: option.price,\n        savings: parseFloat(option.price) - parseFloat(item.price),\n        label: generateLabel(item, option),\n        increaseQty: totalNewQty - currentQty\n      });\n    });\n    crossSellOffers[item.id] = {\n      options: crossSellOptions,\n      offer: crossSellOptions.filter(function (option) {\n        return option.selected;\n      })[0] || crossSellOptions[0]\n    };\n    upsellOffers[item.id] = {\n      options: upsellOptions,\n      offer: upsellOptions.filter(function (option) {\n        return option.selected;\n      })[0] || upsellOptions[0]\n    };\n  });\n  return {\n    crossSellOffers: crossSellOffers,\n    upsellOffers: upsellOffers\n  };\n};\n\nfunction generateLabel(cartItem, disVariant) {\n  var _newQty;\n\n  var _cartItem$variant_opt = _slicedToArray(cartItem.variant_options, 2),\n      currentFlavor = _cartItem$variant_opt[0],\n      currentQty = _cartItem$variant_opt[1];\n\n  currentQty = parseInt(currentQty);\n  var totalNewQty = parseInt(disVariant.option2);\n  var variantFlavor = disVariant.option1;\n  var totalIndividualQty = 0;\n  var override = {\n    "Apple": "Watermelon",\n    "Watermelon": "Apple"\n  };\n\n  if (variantFlavor === "Sampler") {\n    variantFlavor = override[currentFlavor];\n    totalIndividualQty = totalNewQty / 2;\n  }\n\n  var newQty = (_newQty = {}, _defineProperty(_newQty, variantFlavor, totalIndividualQty), _defineProperty(_newQty, currentFlavor, totalNewQty - currentQty - totalIndividualQty), _newQty);\n\n  if (currentFlavor === "Sampler") {\n    var mixQty = (totalNewQty - currentQty) / 2;\n    return "".concat(mixQty, " Watermelon and ").concat(mixQty, " Apple");\n  } else if (newQty[variantFlavor] && currentFlavor !== variantFlavor && newQty[currentFlavor]) {\n    return "".concat(newQty[currentFlavor], " ").concat(currentFlavor, " and ").concat(newQty[variantFlavor], " ").concat(variantFlavor);\n  } else if (!newQty[currentFlavor]) {\n    return "".concat(newQty[variantFlavor], " ").concat(variantFlavor);\n  }\n\n  return "".concat(newQty[currentFlavor], " ").concat(currentFlavor);\n}\n;// CONCATENATED MODULE: ./node_modules/vue-demi/lib/index.mjs\n\n\nvar lib_isVue2 = false\nvar lib_isVue3 = true\nvar Vue2 = (/* unused pure expression or super */ null && (undefined))\n\nfunction install() {}\n\nfunction lib_set(target, key, val) {\n  if (Array.isArray(target)) {\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n  }\n  target[key] = val\n  return val\n}\n\nfunction lib_del(target, key) {\n  if (Array.isArray(target)) {\n    target.splice(key, 1)\n    return\n  }\n  delete target[key]\n}\n\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vueuse/shared/index.mjs\n\n\nfunction and(...args) {\n  return computed(() => args.every((i) => unref(i)));\n}\n\nfunction shared_biSyncRef(a, b) {\n  const flush = "sync";\n  const stop1 = watch(a, (newValue) => {\n    b.value = newValue;\n  }, {\n    flush,\n    immediate: true\n  });\n  const stop2 = watch(b, (newValue) => {\n    a.value = newValue;\n  }, {\n    flush,\n    immediate: true\n  });\n  return () => {\n    stop1();\n    stop2();\n  };\n}\n\nfunction controlledComputed(source, fn) {\n  let v = void 0;\n  let track;\n  let trigger;\n  const dirty = ref(true);\n  watch(source, () => {\n    dirty.value = true;\n    trigger();\n  }, { flush: "sync" });\n  return customRef((_track, _trigger) => {\n    track = _track;\n    trigger = _trigger;\n    return {\n      get() {\n        if (dirty.value) {\n          v = fn();\n          dirty.value = false;\n        }\n        track();\n        return v;\n      },\n      set() {\n      }\n    };\n  });\n}\n\nfunction __onlyVue3(name = "this function") {\n  if (isVue3)\n    return;\n  throw new Error(`[VueUse] ${name} is only works on Vue 3.`);\n}\n\nfunction extendRef(ref, extend, { enumerable = false, unwrap = true } = {}) {\n  __onlyVue3();\n  for (const [key, value] of Object.entries(extend)) {\n    if (key === "value")\n      continue;\n    if (isRef(value) && unwrap) {\n      Object.defineProperty(ref, key, {\n        get() {\n          return value.value;\n        },\n        set(v) {\n          value.value = v;\n        },\n        enumerable\n      });\n    } else {\n      Object.defineProperty(ref, key, { value, enumerable });\n    }\n  }\n  return ref;\n}\n\nfunction controlledRef(initial, options = {}) {\n  let source = initial;\n  let track;\n  let trigger;\n  const ref = customRef((_track, _trigger) => {\n    track = _track;\n    trigger = _trigger;\n    return {\n      get() {\n        return get();\n      },\n      set(v) {\n        set(v);\n      }\n    };\n  });\n  function get(tracking = true) {\n    if (tracking)\n      track();\n    return source;\n  }\n  function set(value, triggering = true) {\n    var _a, _b;\n    if (value === source)\n      return;\n    const old = source;\n    if (((_a = options.onBeforeChange) == null ? void 0 : _a.call(options, value, old)) === false)\n      return;\n    source = value;\n    (_b = options.onChanged) == null ? void 0 : _b.call(options, value, old);\n    if (triggering)\n      trigger();\n  }\n  const untrackedGet = () => get(false);\n  const silentSet = (v) => set(v, false);\n  const peek = () => get(false);\n  const lay = (v) => set(v, false);\n  return extendRef(ref, {\n    get,\n    set,\n    untrackedGet,\n    silentSet,\n    peek,\n    lay\n  }, { enumerable: true });\n}\n\nfunction shared_createEventHook() {\n  const fns = [];\n  const off = (fn) => {\n    const index = fns.indexOf(fn);\n    if (index !== -1)\n      fns.splice(index, 1);\n  };\n  const on = (fn) => {\n    fns.push(fn);\n    return {\n      off: () => off(fn)\n    };\n  };\n  const trigger = (param) => {\n    fns.forEach((fn) => fn(param));\n  };\n  return {\n    on,\n    off,\n    trigger\n  };\n}\n\nfunction createGlobalState(stateFactory) {\n  let initialized = false;\n  let state;\n  const scope = effectScope(true);\n  return () => {\n    if (!initialized) {\n      state = scope.run(stateFactory);\n      initialized = true;\n    }\n    return state;\n  };\n}\n\nfunction reactify(fn) {\n  return function(...args) {\n    return computed(() => fn.apply(this, args.map((i) => unref(i))));\n  };\n}\n\nfunction shared_tryOnScopeDispose(fn) {\n  if (reactivity_esm_bundler_getCurrentScope()) {\n    onScopeDispose(fn);\n    return true;\n  }\n  return false;\n}\n\nfunction createSharedComposable(composable) {\n  let subscribers = 0;\n  let state;\n  let scope;\n  const dispose = () => {\n    subscribers -= 1;\n    if (scope && subscribers <= 0) {\n      scope.stop();\n      state = void 0;\n      scope = void 0;\n    }\n  };\n  return (...args) => {\n    subscribers += 1;\n    if (!state) {\n      scope = effectScope(true);\n      state = scope.run(() => composable(...args));\n    }\n    shared_tryOnScopeDispose(dispose);\n    return state;\n  };\n}\n\nconst shared_isClient = typeof window !== "undefined";\nconst isDef = (val) => typeof val !== "undefined";\nconst shared_assert = (condition, ...infos) => {\n  if (!condition)\n    console.warn(...infos);\n};\nconst shared_toString = Object.prototype.toString;\nconst shared_isBoolean = (val) => typeof val === "boolean";\nconst shared_isFunction = (val) => typeof val === "function";\nconst shared_isNumber = (val) => typeof val === "number";\nconst shared_isString = (val) => typeof val === "string";\nconst shared_isObject = (val) => shared_toString.call(val) === "[object Object]";\nconst isWindow = (val) => typeof window !== "undefined" && shared_toString.call(val) === "[object Window]";\nconst now = () => Date.now();\nconst shared_timestamp = () => +Date.now();\nconst shared_clamp = (n, min, max) => Math.min(max, Math.max(min, n));\nconst shared_noop = () => {\n};\nconst rand = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nfunction shared_createFilterWrapper(filter, fn) {\n  function wrapper(...args) {\n    filter(() => fn.apply(this, args), { fn, thisArg: this, args });\n  }\n  return wrapper;\n}\nconst shared_bypassFilter = (invoke) => {\n  return invoke();\n};\nfunction shared_debounceFilter(ms, options = {}) {\n  let timer;\n  let maxTimer;\n  const filter = (invoke) => {\n    const duration = unref(ms);\n    const maxDuration = unref(options.maxWait);\n    if (timer)\n      clearTimeout(timer);\n    if (duration <= 0 || maxDuration !== void 0 && maxDuration <= 0) {\n      if (maxTimer) {\n        clearTimeout(maxTimer);\n        maxTimer = null;\n      }\n      return invoke();\n    }\n    if (maxDuration && !maxTimer) {\n      maxTimer = setTimeout(() => {\n        if (timer)\n          clearTimeout(timer);\n        maxTimer = null;\n        invoke();\n      }, maxDuration);\n    }\n    timer = setTimeout(() => {\n      if (maxTimer)\n        clearTimeout(maxTimer);\n      maxTimer = null;\n      invoke();\n    }, duration);\n  };\n  return filter;\n}\nfunction shared_throttleFilter(ms, trailing = true, leading = true) {\n  let lastExec = 0;\n  let timer;\n  let preventLeading = !leading;\n  const clear = () => {\n    if (timer) {\n      clearTimeout(timer);\n      timer = void 0;\n    }\n  };\n  const filter = (invoke) => {\n    const duration = unref(ms);\n    const elapsed = Date.now() - lastExec;\n    clear();\n    if (duration <= 0) {\n      lastExec = Date.now();\n      return invoke();\n    }\n    if (elapsed > duration) {\n      lastExec = Date.now();\n      if (preventLeading)\n        preventLeading = false;\n      else\n        invoke();\n    }\n    if (trailing) {\n      timer = setTimeout(() => {\n        lastExec = Date.now();\n        if (!leading)\n          preventLeading = true;\n        clear();\n        invoke();\n      }, duration);\n    }\n    if (!leading && !timer)\n      timer = setTimeout(() => preventLeading = true, duration);\n  };\n  return filter;\n}\nfunction shared_pausableFilter(extendFilter = shared_bypassFilter) {\n  const isActive = ref(true);\n  function pause() {\n    isActive.value = false;\n  }\n  function resume() {\n    isActive.value = true;\n  }\n  const eventFilter = (...args) => {\n    if (isActive.value)\n      extendFilter(...args);\n  };\n  return { isActive, pause, resume, eventFilter };\n}\n\nfunction shared_promiseTimeout(ms, throwOnTimeout = false, reason = "Timeout") {\n  return new Promise((resolve, reject) => {\n    if (throwOnTimeout)\n      setTimeout(() => reject(reason), ms);\n    else\n      setTimeout(resolve, ms);\n  });\n}\nfunction shared_identity(arg) {\n  return arg;\n}\nfunction shared_createSingletonPromise(fn) {\n  let _promise;\n  function wrapper() {\n    if (!_promise)\n      _promise = fn();\n    return _promise;\n  }\n  wrapper.reset = async () => {\n    const _prev = _promise;\n    _promise = void 0;\n    if (_prev)\n      await _prev;\n  };\n  return wrapper;\n}\nfunction invoke(fn) {\n  return fn();\n}\nfunction shared_containsProp(obj, ...props) {\n  return props.some((k) => k in obj);\n}\nfunction shared_increaseWithUnit(target, delta) {\n  var _a;\n  if (typeof target === "number")\n    return target + delta;\n  const value = ((_a = target.match(/^-?[0-9]+\\.?[0-9]*/)) == null ? void 0 : _a[0]) || "";\n  const unit = target.slice(value.length);\n  const result = parseFloat(value) + delta;\n  if (Number.isNaN(result))\n    return target;\n  return result + unit;\n}\nfunction shared_objectPick(obj, keys, omitUndefined = false) {\n  return keys.reduce((n, k) => {\n    if (k in obj) {\n      if (!omitUndefined || !obj[k] === void 0)\n        n[k] = obj[k];\n    }\n    return n;\n  }, {});\n}\n\nfunction shared_useDebounceFn(fn, ms = 200, options = {}) {\n  return shared_createFilterWrapper(shared_debounceFilter(ms, options), fn);\n}\n\nfunction useDebounce(value, ms = 200, options = {}) {\n  if (ms <= 0)\n    return value;\n  const debounced = ref(value.value);\n  const updater = shared_useDebounceFn(() => {\n    debounced.value = value.value;\n  }, ms, options);\n  watch(value, () => updater());\n  return debounced;\n}\n\nvar __getOwnPropSymbols$a = Object.getOwnPropertySymbols;\nvar __hasOwnProp$a = Object.prototype.hasOwnProperty;\nvar __propIsEnum$a = Object.prototype.propertyIsEnumerable;\nvar __objRest$5 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$a.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$a)\n    for (var prop of __getOwnPropSymbols$a(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$a.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction shared_watchWithFilter(source, cb, options = {}) {\n  const _a = options, {\n    eventFilter = shared_bypassFilter\n  } = _a, watchOptions = __objRest$5(_a, [\n    "eventFilter"\n  ]);\n  return watch(source, shared_createFilterWrapper(eventFilter, cb), watchOptions);\n}\n\nvar __defProp$8 = Object.defineProperty;\nvar __defProps$5 = Object.defineProperties;\nvar __getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$9 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$9 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$9 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$8 = (obj, key, value) => key in obj ? __defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$8 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$9.call(b, prop))\n      __defNormalProp$8(a, prop, b[prop]);\n  if (__getOwnPropSymbols$9)\n    for (var prop of __getOwnPropSymbols$9(b)) {\n      if (__propIsEnum$9.call(b, prop))\n        __defNormalProp$8(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$5 = (a, b) => __defProps$5(a, __getOwnPropDescs$5(b));\nvar __objRest$4 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$9.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$9)\n    for (var prop of __getOwnPropSymbols$9(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$9.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction debouncedWatch(source, cb, options = {}) {\n  const _a = options, {\n    debounce = 0\n  } = _a, watchOptions = __objRest$4(_a, [\n    "debounce"\n  ]);\n  return shared_watchWithFilter(source, cb, __spreadProps$5(__spreadValues$8({}, watchOptions), {\n    eventFilter: shared_debounceFilter(debounce)\n  }));\n}\n\nvar __defProp$7 = Object.defineProperty;\nvar __defProps$4 = Object.defineProperties;\nvar __getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$8 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$8 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$8 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$7 = (obj, key, value) => key in obj ? __defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$7 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$8.call(b, prop))\n      __defNormalProp$7(a, prop, b[prop]);\n  if (__getOwnPropSymbols$8)\n    for (var prop of __getOwnPropSymbols$8(b)) {\n      if (__propIsEnum$8.call(b, prop))\n        __defNormalProp$7(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$4 = (a, b) => __defProps$4(a, __getOwnPropDescs$4(b));\nfunction eagerComputed(fn, options) {\n  var _a;\n  const result = shallowRef();\n  watchEffect(() => {\n    result.value = fn();\n  }, __spreadProps$4(__spreadValues$7({}, options), {\n    flush: (_a = options == null ? void 0 : options.flush) != null ? _a : "sync"\n  }));\n  return readonly(result);\n}\n\nfunction shared_get(obj, key) {\n  if (key == null)\n    return unref(obj);\n  return unref(obj)[key];\n}\n\nvar __defProp$6 = Object.defineProperty;\nvar __defProps$3 = Object.defineProperties;\nvar __getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$7 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$7 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$7 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$6 = (obj, key, value) => key in obj ? __defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$6 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$7.call(b, prop))\n      __defNormalProp$6(a, prop, b[prop]);\n  if (__getOwnPropSymbols$7)\n    for (var prop of __getOwnPropSymbols$7(b)) {\n      if (__propIsEnum$7.call(b, prop))\n        __defNormalProp$6(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$3 = (a, b) => __defProps$3(a, __getOwnPropDescs$3(b));\nvar __objRest$3 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$7)\n    for (var prop of __getOwnPropSymbols$7(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$7.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction shared_ignorableWatch(source, cb, options = {}) {\n  const _a = options, {\n    eventFilter = shared_bypassFilter\n  } = _a, watchOptions = __objRest$3(_a, [\n    "eventFilter"\n  ]);\n  const filteredCb = shared_createFilterWrapper(eventFilter, cb);\n  let ignoreUpdates;\n  let ignorePrevAsyncUpdates;\n  let stop;\n  if (watchOptions.flush === "sync") {\n    const ignore = ref(false);\n    ignorePrevAsyncUpdates = () => {\n    };\n    ignoreUpdates = (updater) => {\n      ignore.value = true;\n      updater();\n      ignore.value = false;\n    };\n    stop = watch(source, (...args) => {\n      if (!ignore.value)\n        filteredCb(...args);\n    }, watchOptions);\n  } else {\n    const disposables = [];\n    const ignoreCounter = ref(0);\n    const syncCounter = ref(0);\n    ignorePrevAsyncUpdates = () => {\n      ignoreCounter.value = syncCounter.value;\n    };\n    disposables.push(watch(source, () => {\n      syncCounter.value++;\n    }, __spreadProps$3(__spreadValues$6({}, watchOptions), { flush: "sync" })));\n    ignoreUpdates = (updater) => {\n      const syncCounterPrev = syncCounter.value;\n      updater();\n      ignoreCounter.value += syncCounter.value - syncCounterPrev;\n    };\n    disposables.push(watch(source, (...args) => {\n      const ignore = ignoreCounter.value > 0 && ignoreCounter.value === syncCounter.value;\n      ignoreCounter.value = 0;\n      syncCounter.value = 0;\n      if (ignore)\n        return;\n      filteredCb(...args);\n    }, watchOptions));\n    stop = () => {\n      disposables.forEach((fn) => fn());\n    };\n  }\n  return { stop, ignoreUpdates, ignorePrevAsyncUpdates };\n}\n\nfunction isDefined(v) {\n  return unref(v) != null;\n}\n\nvar __defProp$5 = Object.defineProperty;\nvar __getOwnPropSymbols$6 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$6 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$6 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$5 = (obj, key, value) => key in obj ? __defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$5 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$6.call(b, prop))\n      __defNormalProp$5(a, prop, b[prop]);\n  if (__getOwnPropSymbols$6)\n    for (var prop of __getOwnPropSymbols$6(b)) {\n      if (__propIsEnum$6.call(b, prop))\n        __defNormalProp$5(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction makeDestructurable(obj, arr) {\n  if (typeof Symbol !== "undefined") {\n    const clone = __spreadValues$5({}, obj);\n    Object.defineProperty(clone, Symbol.iterator, {\n      enumerable: false,\n      value() {\n        let index = 0;\n        return {\n          next: () => ({\n            value: arr[index++],\n            done: index > arr.length\n          })\n        };\n      }\n    });\n    return clone;\n  } else {\n    return Object.assign([...arr], obj);\n  }\n}\n\nfunction not(v) {\n  return computed(() => !unref(v));\n}\n\nfunction or(...args) {\n  return computed(() => args.some((i) => unref(i)));\n}\n\nvar __defProp$4 = Object.defineProperty;\nvar __defProps$2 = Object.defineProperties;\nvar __getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$5 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$5 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$5 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$4 = (obj, key, value) => key in obj ? __defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$4 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$5.call(b, prop))\n      __defNormalProp$4(a, prop, b[prop]);\n  if (__getOwnPropSymbols$5)\n    for (var prop of __getOwnPropSymbols$5(b)) {\n      if (__propIsEnum$5.call(b, prop))\n        __defNormalProp$4(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$2 = (a, b) => __defProps$2(a, __getOwnPropDescs$2(b));\nvar __objRest$2 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$5.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$5)\n    for (var prop of __getOwnPropSymbols$5(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$5.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction shared_pausableWatch(source, cb, options = {}) {\n  const _a = options, {\n    eventFilter: filter\n  } = _a, watchOptions = __objRest$2(_a, [\n    "eventFilter"\n  ]);\n  const { eventFilter, pause, resume, isActive } = shared_pausableFilter(filter);\n  const stop = shared_watchWithFilter(source, cb, __spreadProps$2(__spreadValues$4({}, watchOptions), {\n    eventFilter\n  }));\n  return { stop, pause, resume, isActive };\n}\n\nfunction reactifyObject(obj, optionsOrKeys = {}) {\n  let keys = [];\n  if (Array.isArray(optionsOrKeys)) {\n    keys = optionsOrKeys;\n  } else {\n    const { includeOwnProperties = true } = optionsOrKeys;\n    keys.push(...Object.keys(obj));\n    if (includeOwnProperties)\n      keys.push(...Object.getOwnPropertyNames(obj));\n  }\n  return Object.fromEntries(keys.map((key) => {\n    const value = obj[key];\n    return [\n      key,\n      typeof value === "function" ? reactify(value.bind(obj)) : value\n    ];\n  }));\n}\n\nfunction shared_toReactive(objectRef) {\n  if (!isRef(objectRef))\n    return reactive(objectRef);\n  const proxy = new Proxy({}, {\n    get(_, p, receiver) {\n      return unref(Reflect.get(objectRef.value, p, receiver));\n    },\n    set(_, p, value) {\n      if (isRef(objectRef.value[p]) && !isRef(value))\n        objectRef.value[p].value = value;\n      else\n        objectRef.value[p] = value;\n      return true;\n    },\n    deleteProperty(_, p) {\n      return Reflect.deleteProperty(objectRef.value, p);\n    },\n    has(_, p) {\n      return Reflect.has(objectRef.value, p);\n    },\n    ownKeys() {\n      return Object.keys(objectRef.value);\n    },\n    getOwnPropertyDescriptor() {\n      return {\n        enumerable: true,\n        configurable: true\n      };\n    }\n  });\n  return reactive(proxy);\n}\n\nfunction reactiveComputed(fn) {\n  return shared_toReactive(computed(fn));\n}\n\nfunction reactiveOmit(obj, ...keys) {\n  return reactiveComputed(() => Object.fromEntries(Object.entries(toRefs$1(obj)).filter((e) => !keys.includes(e[0]))));\n}\n\nfunction reactivePick(obj, ...keys) {\n  return reactive(Object.fromEntries(keys.map((k) => [k, toRef(obj, k)])));\n}\n\nfunction refDefault(source, defaultValue) {\n  return computed({\n    get() {\n      var _a;\n      return (_a = source.value) != null ? _a : defaultValue;\n    },\n    set(value) {\n      source.value = value;\n    }\n  });\n}\n\nfunction shared_set(...args) {\n  if (args.length === 2) {\n    const [ref, value] = args;\n    ref.value = value;\n  }\n  if (args.length === 3) {\n    if (isVue2) {\n      set$1(...args);\n    } else {\n      const [target, key, value] = args;\n      target[key] = value;\n    }\n  }\n}\n\nfunction syncRef(source, targets, {\n  flush = "sync",\n  deep = false,\n  immediate = true\n} = {}) {\n  if (!Array.isArray(targets))\n    targets = [targets];\n  return watch(source, (newValue) => targets.forEach((target) => target.value = newValue), { flush, deep, immediate });\n}\n\nfunction shared_useThrottleFn(fn, ms = 200, trailing = true, leading = true) {\n  return shared_createFilterWrapper(shared_throttleFilter(ms, trailing, leading), fn);\n}\n\nfunction useThrottle(value, delay = 200, trailing = true, leading = true) {\n  if (delay <= 0)\n    return value;\n  const throttled = ref(value.value);\n  const updater = shared_useThrottleFn(() => {\n    throttled.value = value.value;\n  }, delay, trailing, leading);\n  watch(value, () => updater());\n  return throttled;\n}\n\nvar __defProp$3 = Object.defineProperty;\nvar __defProps$1 = Object.defineProperties;\nvar __getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$4 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$4 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$4 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$3 = (obj, key, value) => key in obj ? __defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$3 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$4.call(b, prop))\n      __defNormalProp$3(a, prop, b[prop]);\n  if (__getOwnPropSymbols$4)\n    for (var prop of __getOwnPropSymbols$4(b)) {\n      if (__propIsEnum$4.call(b, prop))\n        __defNormalProp$3(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$1 = (a, b) => __defProps$1(a, __getOwnPropDescs$1(b));\nvar __objRest$1 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$4.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$4)\n    for (var prop of __getOwnPropSymbols$4(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$4.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction throttledWatch(source, cb, options = {}) {\n  const _a = options, {\n    throttle = 0,\n    trailing = true,\n    leading = true\n  } = _a, watchOptions = __objRest$1(_a, [\n    "throttle",\n    "trailing",\n    "leading"\n  ]);\n  return shared_watchWithFilter(source, cb, __spreadProps$1(__spreadValues$3({}, watchOptions), {\n    eventFilter: shared_throttleFilter(throttle, trailing, leading)\n  }));\n}\n\nvar __defProp$2 = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$3 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$3 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$3 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$2 = (obj, key, value) => key in obj ? __defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$3.call(b, prop))\n      __defNormalProp$2(a, prop, b[prop]);\n  if (__getOwnPropSymbols$3)\n    for (var prop of __getOwnPropSymbols$3(b)) {\n      if (__propIsEnum$3.call(b, prop))\n        __defNormalProp$2(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nfunction shared_toRefs(objectRef) {\n  if (!isRef(objectRef))\n    return toRefs$1(objectRef);\n  const result = Array.isArray(objectRef.value) ? new Array(objectRef.value.length) : {};\n  for (const key in objectRef.value) {\n    result[key] = customRef(() => ({\n      get() {\n        return objectRef.value[key];\n      },\n      set(v) {\n        if (Array.isArray(objectRef.value)) {\n          const copy = [...objectRef.value];\n          copy[key] = v;\n          objectRef.value = copy;\n        } else {\n          objectRef.value = __spreadProps(__spreadValues$2({}, objectRef.value), { [key]: v });\n        }\n      }\n    }));\n  }\n  return result;\n}\n\nfunction tryOnBeforeUnmount(fn) {\n  if (getCurrentInstance())\n    onBeforeUnmount(fn);\n}\n\nfunction shared_tryOnMounted(fn, sync = true) {\n  if (getCurrentInstance())\n    onMounted(fn);\n  else if (sync)\n    fn();\n  else\n    nextTick(fn);\n}\n\nfunction shared_tryOnUnmounted(fn) {\n  if (getCurrentInstance())\n    onUnmounted(fn);\n}\n\nfunction shared_until(r) {\n  let isNot = false;\n  function toMatch(condition, { flush = "sync", deep = false, timeout, throwOnTimeout } = {}) {\n    let stop = null;\n    const watcher = new Promise((resolve) => {\n      stop = watch(r, (v) => {\n        if (condition(v) === !isNot) {\n          stop == null ? void 0 : stop();\n          resolve();\n        }\n      }, {\n        flush,\n        deep,\n        immediate: true\n      });\n    });\n    const promises = [watcher];\n    if (timeout) {\n      promises.push(shared_promiseTimeout(timeout, throwOnTimeout).finally(() => {\n        stop == null ? void 0 : stop();\n      }));\n    }\n    return Promise.race(promises);\n  }\n  function toBe(value, options) {\n    return toMatch((v) => v === unref(value), options);\n  }\n  function toBeTruthy(options) {\n    return toMatch((v) => Boolean(v), options);\n  }\n  function toBeNull(options) {\n    return toBe(null, options);\n  }\n  function toBeUndefined(options) {\n    return toBe(void 0, options);\n  }\n  function toBeNaN(options) {\n    return toMatch(Number.isNaN, options);\n  }\n  function toContains(value, options) {\n    return toMatch((v) => {\n      const array = Array.from(v);\n      return array.includes(value) || array.includes(unref(value));\n    }, options);\n  }\n  function changed(options) {\n    return changedTimes(1, options);\n  }\n  function changedTimes(n = 1, options) {\n    let count = -1;\n    return toMatch(() => {\n      count += 1;\n      return count >= n;\n    }, options);\n  }\n  if (Array.isArray(unref(r))) {\n    const instance = {\n      toMatch,\n      toContains,\n      changed,\n      changedTimes,\n      get not() {\n        isNot = !isNot;\n        return this;\n      }\n    };\n    return instance;\n  } else {\n    const instance = {\n      toMatch,\n      toBe,\n      toBeTruthy,\n      toBeNull,\n      toBeNaN,\n      toBeUndefined,\n      changed,\n      changedTimes,\n      get not() {\n        isNot = !isNot;\n        return this;\n      }\n    };\n    return instance;\n  }\n}\n\nfunction useCounter(initialValue = 0, options = {}) {\n  const count = ref(initialValue);\n  const {\n    max = Infinity,\n    min = -Infinity\n  } = options;\n  const inc = (delta = 1) => count.value = Math.min(max, count.value + delta);\n  const dec = (delta = 1) => count.value = Math.max(min, count.value - delta);\n  const get = () => count.value;\n  const set = (val) => count.value = val;\n  const reset = (val = initialValue) => {\n    initialValue = val;\n    return set(val);\n  };\n  return { count, inc, dec, get, set, reset };\n}\n\nfunction shared_useIntervalFn(cb, interval = 1e3, options = {}) {\n  const {\n    immediate = true,\n    immediateCallback = false\n  } = options;\n  let timer = null;\n  const isActive = ref(false);\n  function clean() {\n    if (timer) {\n      clearInterval(timer);\n      timer = null;\n    }\n  }\n  function pause() {\n    isActive.value = false;\n    clean();\n  }\n  function resume() {\n    if (interval <= 0)\n      return;\n    isActive.value = true;\n    if (immediateCallback)\n      cb();\n    clean();\n    timer = setInterval(cb, unref(interval));\n  }\n  if (immediate && shared_isClient)\n    resume();\n  if (isRef(interval)) {\n    const stopWatch = watch(interval, () => {\n      if (immediate && shared_isClient)\n        resume();\n    });\n    shared_tryOnScopeDispose(stopWatch);\n  }\n  shared_tryOnScopeDispose(pause);\n  return {\n    isActive,\n    pause,\n    resume\n  };\n}\n\nvar __defProp$1 = Object.defineProperty;\nvar __getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$2 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$2.call(b, prop))\n      __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols$2)\n    for (var prop of __getOwnPropSymbols$2(b)) {\n      if (__propIsEnum$2.call(b, prop))\n        __defNormalProp$1(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useInterval(interval = 1e3, options = {}) {\n  const {\n    controls: exposeControls = false,\n    immediate = true\n  } = options;\n  const counter = ref(0);\n  const controls = shared_useIntervalFn(() => counter.value += 1, interval, { immediate });\n  if (exposeControls) {\n    return __spreadValues$1({\n      counter\n    }, controls);\n  } else {\n    return counter;\n  }\n}\n\nfunction useLastChanged(source, options = {}) {\n  var _a;\n  const ms = ref((_a = options.initialValue) != null ? _a : null);\n  watch(source, () => ms.value = shared_timestamp(), options);\n  return ms;\n}\n\nfunction shared_useTimeoutFn(cb, interval, options = {}) {\n  const {\n    immediate = true\n  } = options;\n  const isPending = reactivity_esm_bundler_ref(false);\n  let timer = null;\n  function clear() {\n    if (timer) {\n      clearTimeout(timer);\n      timer = null;\n    }\n  }\n  function stop() {\n    isPending.value = false;\n    clear();\n  }\n  function start(...args) {\n    clear();\n    isPending.value = true;\n    timer = setTimeout(() => {\n      isPending.value = false;\n      timer = null;\n      cb(...args);\n    }, reactivity_esm_bundler_unref(interval));\n  }\n  if (immediate) {\n    isPending.value = true;\n    if (shared_isClient)\n      start();\n  }\n  shared_tryOnScopeDispose(stop);\n  return {\n    isPending,\n    start,\n    stop\n  };\n}\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar __hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar __propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$1.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols$1)\n    for (var prop of __getOwnPropSymbols$1(b)) {\n      if (__propIsEnum$1.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useTimeout(interval = 1e3, options = {}) {\n  const {\n    controls: exposeControls = false\n  } = options;\n  const controls = shared_useTimeoutFn(shared_noop, interval, options);\n  const ready = computed(() => !controls.isPending.value);\n  if (exposeControls) {\n    return __spreadValues({\n      ready\n    }, controls);\n  } else {\n    return ready;\n  }\n}\n\nfunction useToggle(initialValue = false) {\n  if (isRef(initialValue)) {\n    return (value) => {\n      initialValue.value = typeof value === "boolean" ? value : !initialValue.value;\n      return initialValue.value;\n    };\n  } else {\n    const boolean = ref(initialValue);\n    const toggle = (value) => {\n      boolean.value = typeof value === "boolean" ? value : !boolean.value;\n      return boolean.value;\n    };\n    return [boolean, toggle];\n  }\n}\n\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction watchAtMost(source, cb, options) {\n  const _a = options, {\n    count\n  } = _a, watchOptions = __objRest(_a, [\n    "count"\n  ]);\n  const current = ref(0);\n  const stop = shared_watchWithFilter(source, (...args) => {\n    current.value += 1;\n    if (current.value >= unref(count))\n      nextTick(() => stop());\n    cb(...args);\n  }, watchOptions);\n  return { count: current, stop };\n}\n\nfunction watchOnce(source, cb, options) {\n  const stop = watch(source, (...args) => {\n    nextTick(() => stop());\n    return cb(...args);\n  }, options);\n}\n\nfunction whenever(source, cb, options) {\n  return watch(source, (v, ov, onInvalidate) => {\n    if (v)\n      cb(v, ov, onInvalidate);\n  }, options);\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@vueuse/core/index.mjs\n\n\n\n\n\nfunction asyncComputed(evaluationCallback, initialState, optionsOrRef) {\n  let options;\n  if (isRef(optionsOrRef)) {\n    options = {\n      evaluating: optionsOrRef\n    };\n  } else {\n    options = optionsOrRef || {};\n  }\n  const {\n    lazy = false,\n    evaluating = void 0,\n    onError = noop\n  } = options;\n  const started = ref(!lazy);\n  const current = ref(initialState);\n  let counter = 0;\n  watchEffect(async (onInvalidate) => {\n    if (!started.value)\n      return;\n    counter++;\n    const counterAtBeginning = counter;\n    let hasFinished = false;\n    if (evaluating) {\n      Promise.resolve().then(() => {\n        evaluating.value = true;\n      });\n    }\n    try {\n      const result = await evaluationCallback((cancelCallback) => {\n        onInvalidate(() => {\n          if (evaluating)\n            evaluating.value = false;\n          if (!hasFinished)\n            cancelCallback();\n        });\n      });\n      if (counterAtBeginning === counter)\n        current.value = result;\n    } catch (e) {\n      onError(e);\n    } finally {\n      if (evaluating)\n        evaluating.value = false;\n      hasFinished = true;\n    }\n  });\n  if (lazy) {\n    return computed(() => {\n      started.value = true;\n      return current.value;\n    });\n  } else {\n    return current;\n  }\n}\n\nfunction autoResetRef(defaultValue, afterMs = 1e4) {\n  return customRef((track, trigger) => {\n    let value = defaultValue;\n    let timer;\n    const resetAfter = () => setTimeout(() => {\n      value = defaultValue;\n      trigger();\n    }, unref(afterMs));\n    return {\n      get() {\n        track();\n        return value;\n      },\n      set(newValue) {\n        value = newValue;\n        trigger();\n        clearTimeout(timer);\n        timer = resetAfter();\n      }\n    };\n  });\n}\n\nfunction computedInject(key, options, defaultSource, treatDefaultAsFactory) {\n  let source = inject(key);\n  if (defaultSource)\n    source = inject(key, defaultSource);\n  if (treatDefaultAsFactory)\n    source = inject(key, defaultSource, treatDefaultAsFactory);\n  if (typeof options === "function") {\n    return computed((ctx) => options(source, ctx));\n  } else {\n    return computed({\n      get: (ctx) => options.get(source, ctx),\n      set: options.set\n    });\n  }\n}\n\nconst createUnrefFn = (fn) => {\n  return function(...args) {\n    return fn.apply(this, args.map((i) => unref(i)));\n  };\n};\n\nfunction unrefElement(elRef) {\n  var _a;\n  const plain = reactivity_esm_bundler_unref(elRef);\n  return (_a = plain == null ? void 0 : plain.$el) != null ? _a : plain;\n}\n\nconst defaultWindow = shared_isClient ? window : void 0;\nconst defaultDocument = shared_isClient ? window.document : void 0;\nconst defaultNavigator = shared_isClient ? window.navigator : void 0;\nconst defaultLocation = shared_isClient ? window.location : void 0;\n\nfunction useEventListener(...args) {\n  let target;\n  let event;\n  let listener;\n  let options;\n  if (shared_isString(args[0])) {\n    [event, listener, options] = args;\n    target = defaultWindow;\n  } else {\n    [target, event, listener, options] = args;\n  }\n  if (!target)\n    return shared_noop;\n  let cleanup = shared_noop;\n  const stopWatch = runtime_core_esm_bundler_watch(() => reactivity_esm_bundler_unref(target), (el) => {\n    cleanup();\n    if (!el)\n      return;\n    el.addEventListener(event, listener, options);\n    cleanup = () => {\n      el.removeEventListener(event, listener, options);\n      cleanup = shared_noop;\n    };\n  }, { immediate: true, flush: "post" });\n  const stop = () => {\n    stopWatch();\n    cleanup();\n  };\n  shared_tryOnScopeDispose(stop);\n  return stop;\n}\n\nfunction onClickOutside(target, handler, options = {}) {\n  const { window = defaultWindow, ignore } = options;\n  if (!window)\n    return;\n  const shouldListen = reactivity_esm_bundler_ref(true);\n  const listener = (event) => {\n    const el = unrefElement(target);\n    const composedPath = event.composedPath();\n    if (!el || el === event.target || composedPath.includes(el) || !shouldListen.value)\n      return;\n    if (ignore && ignore.length > 0) {\n      if (ignore.some((target2) => {\n        const el2 = unrefElement(target2);\n        return el2 && (event.target === el2 || composedPath.includes(el2));\n      }))\n        return;\n    }\n    handler(event);\n  };\n  const cleanup = [\n    useEventListener(window, "click", listener, { passive: true, capture: true }),\n    useEventListener(window, "pointerdown", (e) => {\n      const el = unrefElement(target);\n      shouldListen.value = !!el && !e.composedPath().includes(el);\n    }, { passive: true })\n  ];\n  const stop = () => cleanup.forEach((fn) => fn());\n  return stop;\n}\n\nvar __defProp$h = Object.defineProperty;\nvar __defProps$9 = Object.defineProperties;\nvar __getOwnPropDescs$9 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$j = Object.getOwnPropertySymbols;\nvar __hasOwnProp$j = Object.prototype.hasOwnProperty;\nvar __propIsEnum$j = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$h = (obj, key, value) => key in obj ? __defProp$h(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$h = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$j.call(b, prop))\n      __defNormalProp$h(a, prop, b[prop]);\n  if (__getOwnPropSymbols$j)\n    for (var prop of __getOwnPropSymbols$j(b)) {\n      if (__propIsEnum$j.call(b, prop))\n        __defNormalProp$h(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$9 = (a, b) => __defProps$9(a, __getOwnPropDescs$9(b));\nconst createKeyPredicate = (keyFilter) => {\n  if (typeof keyFilter === "function")\n    return keyFilter;\n  else if (typeof keyFilter === "string")\n    return (event) => event.key === keyFilter;\n  else if (Array.isArray(keyFilter))\n    return (event) => keyFilter.includes(event.key);\n  else if (keyFilter)\n    return () => true;\n  else\n    return () => false;\n};\nfunction onKeyStroke(key, handler, options = {}) {\n  const { target = defaultWindow, eventName = "keydown", passive = false } = options;\n  const predicate = createKeyPredicate(key);\n  const listener = (e) => {\n    if (predicate(e))\n      handler(e);\n  };\n  return useEventListener(target, eventName, listener, passive);\n}\nfunction onKeyDown(key, handler, options = {}) {\n  return onKeyStroke(key, handler, __spreadProps$9(__spreadValues$h({}, options), { eventName: "keydown" }));\n}\nfunction onKeyPressed(key, handler, options = {}) {\n  return onKeyStroke(key, handler, __spreadProps$9(__spreadValues$h({}, options), { eventName: "keypress" }));\n}\nfunction onKeyUp(key, handler, options = {}) {\n  return onKeyStroke(key, handler, __spreadProps$9(__spreadValues$h({}, options), { eventName: "keyup" }));\n}\n\nconst DEFAULT_DELAY = 500;\nfunction onLongPress(target, handler, options) {\n  const elementRef = computed(() => unrefElement$1(target));\n  let timeout = null;\n  function clear() {\n    if (timeout != null) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  }\n  function onDown(ev) {\n    var _a;\n    clear();\n    timeout = setTimeout(() => handler(ev), (_a = options == null ? void 0 : options.delay) != null ? _a : DEFAULT_DELAY);\n  }\n  useEventListener$1(elementRef, "pointerdown", onDown);\n  useEventListener$1(elementRef, "pointerup", clear);\n  useEventListener$1(elementRef, "pointerleave", clear);\n}\n\nconst isFocusedElementEditable = () => {\n  const { activeElement, body } = document;\n  if (!activeElement)\n    return false;\n  if (activeElement === body)\n    return false;\n  switch (activeElement.tagName) {\n    case "INPUT":\n    case "TEXTAREA":\n      return true;\n  }\n  return activeElement.hasAttribute("contenteditable");\n};\nconst isTypedCharValid = ({\n  keyCode,\n  metaKey,\n  ctrlKey,\n  altKey\n}) => {\n  if (metaKey || ctrlKey || altKey)\n    return false;\n  if (keyCode >= 48 && keyCode <= 57 || keyCode >= 96 && keyCode <= 105)\n    return true;\n  if (keyCode >= 65 && keyCode <= 90)\n    return true;\n  return false;\n};\nfunction onStartTyping(callback, options = {}) {\n  const { document: document2 = defaultDocument } = options;\n  const keydown = (event) => {\n    !isFocusedElementEditable() && isTypedCharValid(event) && callback(event);\n  };\n  if (document2)\n    useEventListener(document2, "keydown", keydown, { passive: true });\n}\n\nfunction templateRef(key, initialValue = null) {\n  const instance = getCurrentInstance();\n  let _trigger = () => {\n  };\n  const element = customRef((track, trigger) => {\n    _trigger = trigger;\n    return {\n      get() {\n        var _a, _b;\n        track();\n        return (_b = (_a = instance == null ? void 0 : instance.proxy) == null ? void 0 : _a.$refs[key]) != null ? _b : initialValue;\n      },\n      set() {\n      }\n    };\n  });\n  tryOnMounted(_trigger);\n  onUpdated(_trigger);\n  return element;\n}\n\nfunction useActiveElement(options = {}) {\n  const { window = defaultWindow } = options;\n  const counter = ref(0);\n  if (window) {\n    useEventListener(window, "blur", () => counter.value += 1, true);\n    useEventListener(window, "focus", () => counter.value += 1, true);\n  }\n  return computed(() => {\n    counter.value;\n    return window == null ? void 0 : window.document.activeElement;\n  });\n}\n\nfunction useAsyncQueue(tasks, options = {}) {\n  const {\n    interrupt = true,\n    onError = noop,\n    onFinished = noop\n  } = options;\n  const promiseState = {\n    pending: "pending",\n    rejected: "rejected",\n    fulfilled: "fulfilled"\n  };\n  const initialResult = Array.from(new Array(tasks.length), () => ({ state: promiseState.pending, data: null }));\n  const result = reactive(initialResult);\n  const activeIndex = ref(-1);\n  if (!tasks || tasks.length === 0) {\n    onFinished();\n    return {\n      activeIndex,\n      result\n    };\n  }\n  function updateResult(state, res) {\n    activeIndex.value++;\n    result[activeIndex.value].data = res;\n    result[activeIndex.value].state = state;\n  }\n  tasks.reduce((prev, curr) => {\n    return prev.then((prevRes) => {\n      var _a;\n      if (((_a = result[activeIndex.value]) == null ? void 0 : _a.state) === promiseState.rejected && interrupt) {\n        onFinished();\n        return;\n      }\n      return curr(prevRes).then((currentRes) => {\n        updateResult(promiseState.fulfilled, currentRes);\n        activeIndex.value === tasks.length - 1 && onFinished();\n        return currentRes;\n      });\n    }).catch((e) => {\n      updateResult(promiseState.rejected, e);\n      onError();\n      return e;\n    });\n  }, Promise.resolve());\n  return {\n    activeIndex,\n    result\n  };\n}\n\nfunction useAsyncState(promise, initialState, options) {\n  const {\n    immediate = true,\n    delay = 0,\n    onError = noop,\n    resetOnExecute = true,\n    shallow = true\n  } = options != null ? options : {};\n  const state = shallow ? shallowRef(initialState) : ref(initialState);\n  const isReady = ref(false);\n  const isLoading = ref(false);\n  const error = ref(void 0);\n  async function execute(delay2 = 0, ...args) {\n    if (resetOnExecute)\n      state.value = initialState;\n    error.value = void 0;\n    isReady.value = false;\n    isLoading.value = true;\n    if (delay2 > 0)\n      await promiseTimeout(delay2);\n    const _promise = typeof promise === "function" ? promise(...args) : promise;\n    try {\n      const data = await _promise;\n      state.value = data;\n      isReady.value = true;\n    } catch (e) {\n      error.value = e;\n      onError(e);\n    }\n    isLoading.value = false;\n    return state.value;\n  }\n  if (immediate)\n    execute(delay);\n  return {\n    state,\n    isReady,\n    isLoading,\n    error,\n    execute\n  };\n}\n\nfunction useBase64(target, options) {\n  const base64 = ref("");\n  const promise = ref();\n  function execute() {\n    if (!isClient)\n      return;\n    promise.value = new Promise((resolve, reject) => {\n      try {\n        const _target = unref(target);\n        if (_target === void 0 || _target === null) {\n          resolve("");\n        } else if (typeof _target === "string") {\n          resolve(blobToBase64(new Blob([_target], { type: "text/plain" })));\n        } else if (_target instanceof Blob) {\n          resolve(blobToBase64(_target));\n        } else if (_target instanceof ArrayBuffer) {\n          resolve(window.btoa(String.fromCharCode(...new Uint8Array(_target))));\n        } else if (_target instanceof HTMLCanvasElement) {\n          resolve(_target.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));\n        } else if (_target instanceof HTMLImageElement) {\n          const img = _target.cloneNode(false);\n          img.crossOrigin = "Anonymous";\n          imgLoaded(img).then(() => {\n            const canvas = document.createElement("canvas");\n            const ctx = canvas.getContext("2d");\n            canvas.width = img.width;\n            canvas.height = img.height;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            resolve(canvas.toDataURL(options == null ? void 0 : options.type, options == null ? void 0 : options.quality));\n          }).catch(reject);\n        } else {\n          reject(new Error("target is unsupported types"));\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n    promise.value.then((res) => base64.value = res);\n    return promise.value;\n  }\n  watch(target, execute, { immediate: true });\n  return {\n    base64,\n    promise,\n    execute\n  };\n}\nfunction imgLoaded(img) {\n  return new Promise((resolve, reject) => {\n    if (!img.complete) {\n      img.onload = () => {\n        resolve();\n      };\n      img.onerror = reject;\n    } else {\n      resolve();\n    }\n  });\n}\nfunction blobToBase64(blob) {\n  return new Promise((resolve, reject) => {\n    const fr = new FileReader();\n    fr.onload = (e) => {\n      resolve(e.target.result);\n    };\n    fr.onerror = reject;\n    fr.readAsDataURL(blob);\n  });\n}\n\nfunction useBattery({ navigator = defaultNavigator } = {}) {\n  const events = ["chargingchange", "chargingtimechange", "dischargingtimechange", "levelchange"];\n  const isSupported = navigator && "getBattery" in navigator;\n  const charging = ref(false);\n  const chargingTime = ref(0);\n  const dischargingTime = ref(0);\n  const level = ref(1);\n  let battery;\n  function updateBatteryInfo() {\n    charging.value = this.charging;\n    chargingTime.value = this.chargingTime || 0;\n    dischargingTime.value = this.dischargingTime || 0;\n    level.value = this.level;\n  }\n  if (isSupported) {\n    navigator.getBattery().then((_battery) => {\n      battery = _battery;\n      updateBatteryInfo.call(battery);\n      for (const event of events)\n        useEventListener(battery, event, updateBatteryInfo, { passive: true });\n    });\n  }\n  return {\n    isSupported,\n    charging,\n    chargingTime,\n    dischargingTime,\n    level\n  };\n}\n\nfunction useMediaQuery(query, options = {}) {\n  const { window = defaultWindow } = options;\n  let mediaQuery;\n  const matches = ref(false);\n  const update = () => {\n    if (!window)\n      return;\n    if (!mediaQuery)\n      mediaQuery = window.matchMedia(query);\n    matches.value = mediaQuery.matches;\n  };\n  tryOnMounted(() => {\n    update();\n    if (!mediaQuery)\n      return;\n    if ("addEventListener" in mediaQuery)\n      mediaQuery.addEventListener("change", update);\n    else\n      mediaQuery.addListener(update);\n    tryOnScopeDispose(() => {\n      if ("removeEventListener" in update)\n        mediaQuery.removeEventListener("change", update);\n      else\n        mediaQuery.removeListener(update);\n    });\n  });\n  return matches;\n}\n\nconst breakpointsTailwind = {\n  "sm": 640,\n  "md": 768,\n  "lg": 1024,\n  "xl": 1280,\n  "2xl": 1536\n};\nconst breakpointsBootstrapV5 = {\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1400\n};\nconst breakpointsVuetify = {\n  xs: 600,\n  sm: 960,\n  md: 1264,\n  lg: 1904\n};\nconst breakpointsAntDesign = {\n  xs: 480,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n  xxl: 1600\n};\nconst breakpointsQuasar = {\n  xs: 600,\n  sm: 1024,\n  md: 1440,\n  lg: 1920\n};\nconst breakpointsSematic = {\n  mobileS: 320,\n  mobileM: 375,\n  mobileL: 425,\n  tablet: 768,\n  laptop: 1024,\n  laptopL: 1440,\n  desktop4K: 2560\n};\n\nvar __defProp$g = Object.defineProperty;\nvar __getOwnPropSymbols$i = Object.getOwnPropertySymbols;\nvar __hasOwnProp$i = Object.prototype.hasOwnProperty;\nvar __propIsEnum$i = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$g = (obj, key, value) => key in obj ? __defProp$g(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$g = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$i.call(b, prop))\n      __defNormalProp$g(a, prop, b[prop]);\n  if (__getOwnPropSymbols$i)\n    for (var prop of __getOwnPropSymbols$i(b)) {\n      if (__propIsEnum$i.call(b, prop))\n        __defNormalProp$g(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useBreakpoints(breakpoints, options = {}) {\n  function getValue(k, delta) {\n    let v = breakpoints[k];\n    if (delta != null)\n      v = increaseWithUnit(v, delta);\n    if (typeof v === "number")\n      v = `${v}px`;\n    return v;\n  }\n  const { window = defaultWindow } = options;\n  function match(query) {\n    if (!window)\n      return false;\n    return window.matchMedia(query).matches;\n  }\n  const greater = (k) => {\n    return useMediaQuery(`(min-width: ${getValue(k)})`, options);\n  };\n  const shortcutMethods = Object.keys(breakpoints).reduce((shortcuts, k) => {\n    Object.defineProperty(shortcuts, k, {\n      get: () => greater(k),\n      enumerable: true,\n      configurable: true\n    });\n    return shortcuts;\n  }, {});\n  return __spreadValues$g({\n    greater,\n    smaller(k) {\n      return useMediaQuery(`(max-width: ${getValue(k, -0.1)})`, options);\n    },\n    between(a, b) {\n      return useMediaQuery(`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`, options);\n    },\n    isGreater(k) {\n      return match(`(min-width: ${getValue(k)})`);\n    },\n    isSmaller(k) {\n      return match(`(max-width: ${getValue(k, -0.1)})`);\n    },\n    isInBetween(a, b) {\n      return match(`(min-width: ${getValue(a)}) and (max-width: ${getValue(b, -0.1)})`);\n    }\n  }, shortcutMethods);\n}\n\nconst useBroadcastChannel = (options) => {\n  const {\n    name,\n    window = defaultWindow\n  } = options;\n  const isSupported = window && "BroadcastChannel" in window;\n  const isClosed = ref(false);\n  const channel = ref();\n  const data = ref();\n  const error = ref(null);\n  const post = (data2) => {\n    if (channel.value)\n      channel.value.postMessage(data2);\n  };\n  const close = () => {\n    if (channel.value)\n      channel.value.close();\n    isClosed.value = true;\n  };\n  if (isSupported) {\n    tryOnMounted(() => {\n      error.value = null;\n      channel.value = new BroadcastChannel(name);\n      channel.value.addEventListener("message", (e) => {\n        data.value = e.data;\n      }, { passive: true });\n      channel.value.addEventListener("messageerror", (e) => {\n        error.value = e;\n      }, { passive: true });\n      channel.value.addEventListener("close", () => {\n        isClosed.value = true;\n      });\n    });\n  }\n  tryOnScopeDispose(() => {\n    close();\n  });\n  return {\n    isSupported,\n    channel,\n    data,\n    post,\n    close,\n    error,\n    isClosed\n  };\n};\n\nfunction useBrowserLocation({ window = defaultWindow } = {}) {\n  const buildState = (trigger) => {\n    const { state: state2, length } = (window == null ? void 0 : window.history) || {};\n    const { hash, host, hostname, href, origin, pathname, port, protocol, search } = (window == null ? void 0 : window.location) || {};\n    return {\n      trigger,\n      state: state2,\n      length,\n      hash,\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n      search\n    };\n  };\n  const state = ref(buildState("load"));\n  if (window) {\n    useEventListener(window, "popstate", () => state.value = buildState("popstate"), { passive: true });\n    useEventListener(window, "hashchange", () => state.value = buildState("hashchange"), { passive: true });\n  }\n  return state;\n}\n\nfunction useCached(refValue, comparator = (a, b) => a === b, watchOptions) {\n  const cachedValue = ref(refValue.value);\n  watch(() => refValue.value, (value) => {\n    if (!comparator(value, cachedValue.value))\n      cachedValue.value = value;\n  }, watchOptions);\n  return cachedValue;\n}\n\nfunction useClamp(value, min, max) {\n  const _value = ref(value);\n  return computed({\n    get() {\n      return _value.value = clamp(_value.value, unref(min), unref(max));\n    },\n    set(value2) {\n      _value.value = clamp(value2, unref(min), unref(max));\n    }\n  });\n}\n\nfunction useClipboard(options = {}) {\n  const {\n    navigator = defaultNavigator,\n    read = false,\n    source,\n    copiedDuring = 1500\n  } = options;\n  const events = ["copy", "cut"];\n  const isSupported = Boolean(navigator && "clipboard" in navigator);\n  const text = ref("");\n  const copied = ref(false);\n  const timeout = useTimeoutFn(() => copied.value = false, copiedDuring);\n  function updateText() {\n    navigator.clipboard.readText().then((value) => {\n      text.value = value;\n    });\n  }\n  if (isSupported && read) {\n    for (const event of events)\n      useEventListener(event, updateText);\n  }\n  async function copy(value = unref(source)) {\n    if (isSupported && value != null) {\n      await navigator.clipboard.writeText(value);\n      text.value = value;\n      copied.value = true;\n      timeout.start();\n    }\n  }\n  return {\n    isSupported,\n    text,\n    copied,\n    copy\n  };\n}\n\nconst _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};\nconst globalKey = "__vueuse_ssr_handlers__";\n_global[globalKey] = _global[globalKey] || {};\nconst handlers = _global[globalKey];\nfunction getSSRHandler(key, fallback) {\n  return handlers[key] || fallback;\n}\nfunction setSSRHandler(key, fn) {\n  handlers[key] = fn;\n}\n\nfunction guessSerializerType(rawInit) {\n  return rawInit == null ? "any" : rawInit instanceof Set ? "set" : rawInit instanceof Map ? "map" : typeof rawInit === "boolean" ? "boolean" : typeof rawInit === "string" ? "string" : typeof rawInit === "object" ? "object" : Array.isArray(rawInit) ? "object" : !Number.isNaN(rawInit) ? "number" : "any";\n}\n\nconst StorageSerializers = {\n  boolean: {\n    read: (v) => v === "true",\n    write: (v) => String(v)\n  },\n  object: {\n    read: (v) => JSON.parse(v),\n    write: (v) => JSON.stringify(v)\n  },\n  number: {\n    read: (v) => Number.parseFloat(v),\n    write: (v) => String(v)\n  },\n  any: {\n    read: (v) => v,\n    write: (v) => String(v)\n  },\n  string: {\n    read: (v) => v,\n    write: (v) => String(v)\n  },\n  map: {\n    read: (v) => new Map(JSON.parse(v)),\n    write: (v) => JSON.stringify(Array.from(v.entries()))\n  },\n  set: {\n    read: (v) => new Set(JSON.parse(v)),\n    write: (v) => JSON.stringify(Array.from(v.entries()))\n  }\n};\nfunction useStorage(key, initialValue, storage, options = {}) {\n  var _a;\n  const {\n    flush = "pre",\n    deep = true,\n    listenToStorageChanges = true,\n    writeDefaults = true,\n    shallow,\n    window = defaultWindow,\n    eventFilter,\n    onError = (e) => {\n      console.error(e);\n    }\n  } = options;\n  const rawInit = unref(initialValue);\n  const type = guessSerializerType(rawInit);\n  const data = (shallow ? shallowRef : ref)(initialValue);\n  const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];\n  if (!storage) {\n    try {\n      storage = getSSRHandler("getDefaultStorage", () => {\n        var _a2;\n        return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;\n      })();\n    } catch (e) {\n      onError(e);\n    }\n  }\n  function read(event) {\n    if (!storage || event && event.key !== key)\n      return;\n    try {\n      const rawValue = event ? event.newValue : storage.getItem(key);\n      if (rawValue == null) {\n        data.value = rawInit;\n        if (writeDefaults && rawInit !== null)\n          storage.setItem(key, serializer.write(rawInit));\n      } else if (typeof rawValue !== "string") {\n        data.value = rawValue;\n      } else {\n        data.value = serializer.read(rawValue);\n      }\n    } catch (e) {\n      onError(e);\n    }\n  }\n  read();\n  if (window && listenToStorageChanges)\n    useEventListener(window, "storage", (e) => setTimeout(() => read(e), 0));\n  if (storage) {\n    watchWithFilter(data, () => {\n      try {\n        if (data.value == null)\n          storage.removeItem(key);\n        else\n          storage.setItem(key, serializer.write(data.value));\n      } catch (e) {\n        onError(e);\n      }\n    }, {\n      flush,\n      deep,\n      eventFilter\n    });\n  }\n  return data;\n}\n\nfunction usePreferredDark(options) {\n  return useMediaQuery("(prefers-color-scheme: dark)", options);\n}\n\nvar __defProp$f = Object.defineProperty;\nvar __getOwnPropSymbols$h = Object.getOwnPropertySymbols;\nvar __hasOwnProp$h = Object.prototype.hasOwnProperty;\nvar __propIsEnum$h = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$f = (obj, key, value) => key in obj ? __defProp$f(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$f = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$h.call(b, prop))\n      __defNormalProp$f(a, prop, b[prop]);\n  if (__getOwnPropSymbols$h)\n    for (var prop of __getOwnPropSymbols$h(b)) {\n      if (__propIsEnum$h.call(b, prop))\n        __defNormalProp$f(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useColorMode(options = {}) {\n  const {\n    selector = "html",\n    attribute = "class",\n    window = defaultWindow,\n    storage,\n    storageKey = "vueuse-color-scheme",\n    listenToStorageChanges = true,\n    storageRef\n  } = options;\n  const modes = __spreadValues$f({\n    auto: "",\n    light: "light",\n    dark: "dark"\n  }, options.modes || {});\n  const preferredDark = usePreferredDark({ window });\n  const preferredMode = computed(() => preferredDark.value ? "dark" : "light");\n  const store = storageRef || (storageKey == null ? ref("auto") : useStorage(storageKey, "auto", storage, { window, listenToStorageChanges }));\n  const state = computed({\n    get() {\n      return store.value === "auto" ? preferredMode.value : store.value;\n    },\n    set(v) {\n      store.value = v;\n    }\n  });\n  const updateHTMLAttrs = getSSRHandler("updateHTMLAttrs", (selector2, attribute2, value) => {\n    const el = window == null ? void 0 : window.document.querySelector(selector2);\n    if (!el)\n      return;\n    if (attribute2 === "class") {\n      const current = value.split(/\\s/g);\n      Object.values(modes).flatMap((i) => (i || "").split(/\\s/g)).filter(Boolean).forEach((v) => {\n        if (current.includes(v))\n          el.classList.add(v);\n        else\n          el.classList.remove(v);\n      });\n    } else {\n      el.setAttribute(attribute2, value);\n    }\n  });\n  function defaultOnChanged(mode) {\n    var _a;\n    updateHTMLAttrs(selector, attribute, (_a = modes[mode]) != null ? _a : mode);\n  }\n  function onChanged(mode) {\n    if (options.onChanged)\n      options.onChanged(mode, defaultOnChanged);\n    else\n      defaultOnChanged(mode);\n  }\n  watch(state, onChanged, { flush: "post", immediate: true });\n  tryOnMounted(() => onChanged(state.value));\n  return state;\n}\n\nfunction useConfirmDialog(revealed = ref(false)) {\n  const confirmHook = createEventHook();\n  const cancelHook = createEventHook();\n  const revealHook = createEventHook();\n  let _resolve = noop;\n  const reveal = (data) => {\n    revealHook.trigger(data);\n    revealed.value = true;\n    return new Promise((resolve) => {\n      _resolve = resolve;\n    });\n  };\n  const confirm = (data) => {\n    revealed.value = false;\n    confirmHook.trigger(data);\n    _resolve({ data, isCanceled: false });\n  };\n  const cancel = (data) => {\n    revealed.value = false;\n    cancelHook.trigger(data);\n    _resolve({ data, isCanceled: true });\n  };\n  return {\n    isRevealed: computed(() => revealed.value),\n    reveal,\n    confirm,\n    cancel,\n    onReveal: revealHook.on,\n    onConfirm: confirmHook.on,\n    onCancel: cancelHook.on\n  };\n}\n\nfunction useCssVar(prop, target, { window = defaultWindow } = {}) {\n  const variable = ref("");\n  const elRef = computed(() => {\n    var _a;\n    return unrefElement(target) || ((_a = window == null ? void 0 : window.document) == null ? void 0 : _a.documentElement);\n  });\n  watch([elRef, () => unref(prop)], ([el, prop2]) => {\n    if (el && window)\n      variable.value = window.getComputedStyle(el).getPropertyValue(prop2);\n  }, { immediate: true });\n  watch(variable, (val) => {\n    var _a;\n    if ((_a = elRef.value) == null ? void 0 : _a.style)\n      elRef.value.style.setProperty(unref(prop), val);\n  });\n  return variable;\n}\n\nfunction useCycleList(list, options) {\n  var _a;\n  const state = shallowRef((_a = options == null ? void 0 : options.initialValue) != null ? _a : list[0]);\n  const index = computed({\n    get() {\n      var _a2;\n      let index2 = (options == null ? void 0 : options.getIndexOf) ? options.getIndexOf(state.value, list) : list.indexOf(state.value);\n      if (index2 < 0)\n        index2 = (_a2 = options == null ? void 0 : options.fallbackIndex) != null ? _a2 : 0;\n      return index2;\n    },\n    set(v) {\n      set(v);\n    }\n  });\n  function set(i) {\n    const length = list.length;\n    const index2 = (i % length + length) % length;\n    const value = list[index2];\n    state.value = value;\n    return value;\n  }\n  function shift(delta = 1) {\n    return set(index.value + delta);\n  }\n  function next(n = 1) {\n    return shift(n);\n  }\n  function prev(n = 1) {\n    return shift(-n);\n  }\n  return {\n    state,\n    index,\n    next,\n    prev\n  };\n}\n\nvar __defProp$e = Object.defineProperty;\nvar __defProps$8 = Object.defineProperties;\nvar __getOwnPropDescs$8 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$g = Object.getOwnPropertySymbols;\nvar __hasOwnProp$g = Object.prototype.hasOwnProperty;\nvar __propIsEnum$g = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$e = (obj, key, value) => key in obj ? __defProp$e(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$e = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$g.call(b, prop))\n      __defNormalProp$e(a, prop, b[prop]);\n  if (__getOwnPropSymbols$g)\n    for (var prop of __getOwnPropSymbols$g(b)) {\n      if (__propIsEnum$g.call(b, prop))\n        __defNormalProp$e(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$8 = (a, b) => __defProps$8(a, __getOwnPropDescs$8(b));\nfunction useDark(options = {}) {\n  const {\n    valueDark = "dark",\n    valueLight = "",\n    window = defaultWindow\n  } = options;\n  const mode = useColorMode(__spreadProps$8(__spreadValues$e({}, options), {\n    onChanged: (mode2, defaultHandler) => {\n      var _a;\n      if (options.onChanged)\n        (_a = options.onChanged) == null ? void 0 : _a.call(options, mode2 === "dark");\n      else\n        defaultHandler(mode2);\n    },\n    modes: {\n      dark: valueDark,\n      light: valueLight\n    }\n  }));\n  const preferredDark = usePreferredDark({ window });\n  const isDark = computed({\n    get() {\n      return mode.value === "dark";\n    },\n    set(v) {\n      if (v === preferredDark.value)\n        mode.value = "auto";\n      else\n        mode.value = v ? "dark" : "light";\n    }\n  });\n  return isDark;\n}\n\nconst fnClone = (v) => JSON.parse(JSON.stringify(v));\nconst fnBypass = (v) => v;\nconst fnSetSource = (source, value) => source.value = value;\nfunction defaultDump(clone) {\n  return clone ? isFunction(clone) ? clone : fnClone : fnBypass;\n}\nfunction defaultParse(clone) {\n  return clone ? isFunction(clone) ? clone : fnClone : fnBypass;\n}\nfunction useManualRefHistory(source, options = {}) {\n  const {\n    clone = false,\n    dump = defaultDump(clone),\n    parse = defaultParse(clone),\n    setSource = fnSetSource\n  } = options;\n  function _createHistoryRecord() {\n    return markRaw({\n      snapshot: dump(source.value),\n      timestamp: timestamp()\n    });\n  }\n  const last = ref(_createHistoryRecord());\n  const undoStack = ref([]);\n  const redoStack = ref([]);\n  const _setSource = (record) => {\n    setSource(source, parse(record.snapshot));\n    last.value = record;\n  };\n  const commit = () => {\n    undoStack.value.unshift(last.value);\n    last.value = _createHistoryRecord();\n    if (options.capacity && undoStack.value.length > options.capacity)\n      undoStack.value.splice(options.capacity, Infinity);\n    if (redoStack.value.length)\n      redoStack.value.splice(0, redoStack.value.length);\n  };\n  const clear = () => {\n    undoStack.value.splice(0, undoStack.value.length);\n    redoStack.value.splice(0, redoStack.value.length);\n  };\n  const undo = () => {\n    const state = undoStack.value.shift();\n    if (state) {\n      redoStack.value.unshift(last.value);\n      _setSource(state);\n    }\n  };\n  const redo = () => {\n    const state = redoStack.value.shift();\n    if (state) {\n      undoStack.value.unshift(last.value);\n      _setSource(state);\n    }\n  };\n  const reset = () => {\n    _setSource(last.value);\n  };\n  const history = computed(() => [last.value, ...undoStack.value]);\n  const canUndo = computed(() => undoStack.value.length > 0);\n  const canRedo = computed(() => redoStack.value.length > 0);\n  return {\n    source,\n    undoStack,\n    redoStack,\n    last,\n    history,\n    canUndo,\n    canRedo,\n    clear,\n    commit,\n    reset,\n    undo,\n    redo\n  };\n}\n\nvar __defProp$d = Object.defineProperty;\nvar __defProps$7 = Object.defineProperties;\nvar __getOwnPropDescs$7 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$f = Object.getOwnPropertySymbols;\nvar __hasOwnProp$f = Object.prototype.hasOwnProperty;\nvar __propIsEnum$f = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$d = (obj, key, value) => key in obj ? __defProp$d(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$d = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$f.call(b, prop))\n      __defNormalProp$d(a, prop, b[prop]);\n  if (__getOwnPropSymbols$f)\n    for (var prop of __getOwnPropSymbols$f(b)) {\n      if (__propIsEnum$f.call(b, prop))\n        __defNormalProp$d(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$7 = (a, b) => __defProps$7(a, __getOwnPropDescs$7(b));\nfunction useRefHistory(source, options = {}) {\n  const {\n    deep = false,\n    flush = "pre",\n    eventFilter\n  } = options;\n  const {\n    eventFilter: composedFilter,\n    pause,\n    resume: resumeTracking,\n    isActive: isTracking\n  } = pausableFilter(eventFilter);\n  const {\n    ignoreUpdates,\n    ignorePrevAsyncUpdates,\n    stop\n  } = ignorableWatch(source, commit, { deep, flush, eventFilter: composedFilter });\n  function setSource(source2, value) {\n    ignorePrevAsyncUpdates();\n    ignoreUpdates(() => {\n      source2.value = value;\n    });\n  }\n  const manualHistory = useManualRefHistory(source, __spreadProps$7(__spreadValues$d({}, options), { clone: options.clone || deep, setSource }));\n  const { clear, commit: manualCommit } = manualHistory;\n  function commit() {\n    ignorePrevAsyncUpdates();\n    manualCommit();\n  }\n  function resume(commitNow) {\n    resumeTracking();\n    if (commitNow)\n      commit();\n  }\n  function batch(fn) {\n    let canceled = false;\n    const cancel = () => canceled = true;\n    ignoreUpdates(() => {\n      fn(cancel);\n    });\n    if (!canceled)\n      commit();\n  }\n  function dispose() {\n    stop();\n    clear();\n  }\n  return __spreadProps$7(__spreadValues$d({}, manualHistory), {\n    isTracking,\n    pause,\n    resume,\n    commit,\n    batch,\n    dispose\n  });\n}\n\nvar __defProp$c = Object.defineProperty;\nvar __defProps$6 = Object.defineProperties;\nvar __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$e = Object.getOwnPropertySymbols;\nvar __hasOwnProp$e = Object.prototype.hasOwnProperty;\nvar __propIsEnum$e = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$c = (obj, key, value) => key in obj ? __defProp$c(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$c = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$e.call(b, prop))\n      __defNormalProp$c(a, prop, b[prop]);\n  if (__getOwnPropSymbols$e)\n    for (var prop of __getOwnPropSymbols$e(b)) {\n      if (__propIsEnum$e.call(b, prop))\n        __defNormalProp$c(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps$6 = (a, b) => __defProps$6(a, __getOwnPropDescs$6(b));\nfunction useDebouncedRefHistory(source, options = {}) {\n  const filter = options.debounce ? debounceFilter(options.debounce) : void 0;\n  const history = useRefHistory(source, __spreadProps$6(__spreadValues$c({}, options), { eventFilter: filter }));\n  return __spreadValues$c({}, history);\n}\n\nfunction useDeviceMotion(options = {}) {\n  const {\n    window = defaultWindow,\n    eventFilter = bypassFilter\n  } = options;\n  const acceleration = ref({ x: null, y: null, z: null });\n  const rotationRate = ref({ alpha: null, beta: null, gamma: null });\n  const interval = ref(0);\n  const accelerationIncludingGravity = ref({\n    x: null,\n    y: null,\n    z: null\n  });\n  if (window) {\n    const onDeviceMotion = createFilterWrapper(eventFilter, (event) => {\n      acceleration.value = event.acceleration;\n      accelerationIncludingGravity.value = event.accelerationIncludingGravity;\n      rotationRate.value = event.rotationRate;\n      interval.value = event.interval;\n    });\n    useEventListener(window, "devicemotion", onDeviceMotion);\n  }\n  return {\n    acceleration,\n    accelerationIncludingGravity,\n    rotationRate,\n    interval\n  };\n}\n\nfunction useDeviceOrientation(options = {}) {\n  const { window = defaultWindow } = options;\n  const isSupported = Boolean(window && "DeviceOrientationEvent" in window);\n  const isAbsolute = ref(false);\n  const alpha = ref(null);\n  const beta = ref(null);\n  const gamma = ref(null);\n  if (window && isSupported) {\n    useEventListener(window, "deviceorientation", (event) => {\n      isAbsolute.value = event.absolute;\n      alpha.value = event.alpha;\n      beta.value = event.beta;\n      gamma.value = event.gamma;\n    });\n  }\n  return {\n    isSupported,\n    isAbsolute,\n    alpha,\n    beta,\n    gamma\n  };\n}\n\nconst DEVICE_PIXEL_RATIO_SCALES = (/* unused pure expression or super */ null && ([\n  1,\n  1.325,\n  1.4,\n  1.5,\n  1.8,\n  2,\n  2.4,\n  2.5,\n  2.75,\n  3,\n  3.5,\n  4\n]));\nfunction useDevicePixelRatio({\n  window = defaultWindow\n} = {}) {\n  if (!window) {\n    return {\n      pixelRatio: ref(1)\n    };\n  }\n  const pixelRatio = ref(window.devicePixelRatio);\n  const handleDevicePixelRatio = () => {\n    pixelRatio.value = window.devicePixelRatio;\n  };\n  useEventListener(window, "resize", handleDevicePixelRatio, { passive: true });\n  DEVICE_PIXEL_RATIO_SCALES.forEach((dppx) => {\n    const mqlMin = useMediaQuery(`screen and (min-resolution: ${dppx}dppx)`);\n    const mqlMax = useMediaQuery(`screen and (max-resolution: ${dppx}dppx)`);\n    watch([mqlMin, mqlMax], handleDevicePixelRatio);\n  });\n  return { pixelRatio };\n}\n\nfunction usePermission(permissionDesc, options = {}) {\n  const {\n    controls = false,\n    navigator = defaultNavigator\n  } = options;\n  const isSupported = Boolean(navigator && "permissions" in navigator);\n  let permissionStatus;\n  const desc = typeof permissionDesc === "string" ? { name: permissionDesc } : permissionDesc;\n  const state = ref();\n  const onChange = () => {\n    if (permissionStatus)\n      state.value = permissionStatus.state;\n  };\n  const query = createSingletonPromise(async () => {\n    if (!isSupported)\n      return;\n    if (!permissionStatus) {\n      try {\n        permissionStatus = await navigator.permissions.query(desc);\n        useEventListener(permissionStatus, "change", onChange);\n        onChange();\n      } catch (e) {\n        state.value = "prompt";\n      }\n    }\n    return permissionStatus;\n  });\n  query();\n  if (controls) {\n    return {\n      state,\n      isSupported,\n      query\n    };\n  } else {\n    return state;\n  }\n}\n\nfunction useDevicesList(options = {}) {\n  const {\n    navigator = defaultNavigator,\n    requestPermissions = false,\n    constraints = { audio: true, video: true },\n    onUpdated\n  } = options;\n  const devices = ref([]);\n  const videoInputs = computed(() => devices.value.filter((i) => i.kind === "videoinput"));\n  const audioInputs = computed(() => devices.value.filter((i) => i.kind === "audioinput"));\n  const audioOutputs = computed(() => devices.value.filter((i) => i.kind === "audiooutput"));\n  let isSupported = false;\n  const permissionGranted = ref(false);\n  async function update() {\n    if (!isSupported)\n      return;\n    devices.value = await navigator.mediaDevices.enumerateDevices();\n    onUpdated == null ? void 0 : onUpdated(devices.value);\n  }\n  async function ensurePermissions() {\n    if (!isSupported)\n      return false;\n    if (permissionGranted.value)\n      return true;\n    const { state, query } = usePermission("camera", { controls: true });\n    await query();\n    if (state.value !== "granted") {\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      stream.getTracks().forEach((t) => t.stop());\n      update();\n      permissionGranted.value = true;\n    } else {\n      permissionGranted.value = true;\n    }\n    return permissionGranted.value;\n  }\n  if (navigator) {\n    isSupported = Boolean(navigator.mediaDevices && navigator.mediaDevices.enumerateDevices);\n    if (isSupported) {\n      if (requestPermissions)\n        ensurePermissions();\n      useEventListener(navigator.mediaDevices, "devicechange", update);\n      update();\n    }\n  }\n  return {\n    devices,\n    ensurePermissions,\n    permissionGranted,\n    videoInputs,\n    audioInputs,\n    audioOutputs,\n    isSupported\n  };\n}\n\nfunction useDisplayMedia(options = {}) {\n  var _a, _b;\n  const enabled = ref((_a = options.enabled) != null ? _a : false);\n  const video = options.video;\n  const audio = options.audio;\n  const { navigator = defaultNavigator } = options;\n  const isSupported = Boolean((_b = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _b.getDisplayMedia);\n  const constraint = { audio, video };\n  const stream = shallowRef();\n  async function _start() {\n    if (!isSupported || stream.value)\n      return;\n    stream.value = await navigator.mediaDevices.getDisplayMedia(constraint);\n    return stream.value;\n  }\n  async function _stop() {\n    var _a2;\n    (_a2 = stream.value) == null ? void 0 : _a2.getTracks().forEach((t) => t.stop());\n    stream.value = void 0;\n  }\n  function stop() {\n    _stop();\n    enabled.value = false;\n  }\n  async function start() {\n    await _start();\n    if (stream.value)\n      enabled.value = true;\n    return stream.value;\n  }\n  watch(enabled, (v) => {\n    if (v)\n      _start();\n    else\n      _stop();\n  }, { immediate: true });\n  return {\n    isSupported,\n    stream,\n    start,\n    stop,\n    enabled\n  };\n}\n\nfunction useDocumentVisibility({ document = defaultDocument } = {}) {\n  if (!document)\n    return ref("visible");\n  const visibility = ref(document.visibilityState);\n  useEventListener(document, "visibilitychange", () => {\n    visibility.value = document.visibilityState;\n  });\n  return visibility;\n}\n\nvar __defProp$b = Object.defineProperty;\nvar core_defProps$5 = Object.defineProperties;\nvar core_getOwnPropDescs$5 = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols$d = Object.getOwnPropertySymbols;\nvar __hasOwnProp$d = Object.prototype.hasOwnProperty;\nvar __propIsEnum$d = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$b = (obj, key, value) => key in obj ? __defProp$b(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$b = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$d.call(b, prop))\n      __defNormalProp$b(a, prop, b[prop]);\n  if (__getOwnPropSymbols$d)\n    for (var prop of __getOwnPropSymbols$d(b)) {\n      if (__propIsEnum$d.call(b, prop))\n        __defNormalProp$b(a, prop, b[prop]);\n    }\n  return a;\n};\nvar core_spreadProps$5 = (a, b) => core_defProps$5(a, core_getOwnPropDescs$5(b));\nfunction useDraggable(target, options = {}) {\n  var _a, _b;\n  const draggingElement = (_a = options.draggingElement) != null ? _a : defaultWindow;\n  const position = ref((_b = options.initialValue) != null ? _b : { x: 0, y: 0 });\n  const pressedDelta = ref();\n  const filterEvent = (e) => {\n    if (options.pointerTypes)\n      return options.pointerTypes.includes(e.pointerType);\n    return true;\n  };\n  const preventDefault = (e) => {\n    if (unref(options.preventDefault))\n      e.preventDefault();\n  };\n  const start = (e) => {\n    var _a2;\n    if (!filterEvent(e))\n      return;\n    if (unref(options.exact) && e.target !== unref(target))\n      return;\n    const rect = unref(target).getBoundingClientRect();\n    const pos = {\n      x: e.pageX - rect.left,\n      y: e.pageY - rect.top\n    };\n    if (((_a2 = options.onStart) == null ? void 0 : _a2.call(options, pos, e)) === false)\n      return;\n    pressedDelta.value = pos;\n    preventDefault(e);\n  };\n  const move = (e) => {\n    var _a2;\n    if (!filterEvent(e))\n      return;\n    if (!pressedDelta.value)\n      return;\n    position.value = {\n      x: e.pageX - pressedDelta.value.x,\n      y: e.pageY - pressedDelta.value.y\n    };\n    (_a2 = options.onMove) == null ? void 0 : _a2.call(options, position.value, e);\n    preventDefault(e);\n  };\n  const end = (e) => {\n    var _a2;\n    if (!filterEvent(e))\n      return;\n    if (!pressedDelta.value)\n      return;\n    pressedDelta.value = void 0;\n    (_a2 = options.onEnd) == null ? void 0 : _a2.call(options, position.value, e);\n    preventDefault(e);\n  };\n  if (isClient) {\n    useEventListener(target, "pointerdown", start, true);\n    useEventListener(draggingElement, "pointermove", move, true);\n    useEventListener(draggingElement, "pointerup", end, true);\n  }\n  return core_spreadProps$5(__spreadValues$b({}, toRefs(position)), {\n    position,\n    isDragging: computed(() => !!pressedDelta.value),\n    style: computed(() => `left:${position.value.x}px;top:${position.value.y}px;`)\n  });\n}\n\nvar __getOwnPropSymbols$c = Object.getOwnPropertySymbols;\nvar __hasOwnProp$c = Object.prototype.hasOwnProperty;\nvar __propIsEnum$c = Object.prototype.propertyIsEnumerable;\nvar core_objRest$2 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp$c.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols$c)\n    for (var prop of __getOwnPropSymbols$c(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum$c.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction useResizeObserver(target, callback, options = {}) {\n  const _a = options, { window = defaultWindow } = _a, observerOptions = core_objRest$2(_a, ["window"]);\n  let observer;\n  const isSupported = window && "ResizeObserver" in window;\n  const cleanup = () => {\n    if (observer) {\n      observer.disconnect();\n      observer = void 0;\n    }\n  };\n  const stopWatch = runtime_core_esm_bundler_watch(() => unrefElement(target), (el) => {\n    cleanup();\n    if (isSupported && window && el) {\n      observer = new window.ResizeObserver(callback);\n      observer.observe(el, observerOptions);\n    }\n  }, { immediate: true, flush: "post" });\n  const stop = () => {\n    cleanup();\n    stopWatch();\n  };\n  shared_tryOnScopeDispose(stop);\n  return {\n    isSupported,\n    stop\n  };\n}\n\nfunction useElementBounding(target) {\n  const height = ref(0);\n  const bottom = ref(0);\n  const left = ref(0);\n  const right = ref(0);\n  const top = ref(0);\n  const width = ref(0);\n  const x = ref(0);\n  const y = ref(0);\n  function update() {\n    const el = unrefElement(target);\n    if (!el) {\n      height.value = 0;\n      bottom.value = 0;\n      left.value = 0;\n      right.value = 0;\n      top.value = 0;\n      width.value = 0;\n      x.value = 0;\n      y.value = 0;\n      return;\n    }\n    const rect = el.getBoundingClientRect();\n    height.value = rect.height;\n    bottom.value = rect.bottom;\n    left.value = rect.left;\n    right.value = rect.right;\n    top.value = rect.top;\n    width.value = rect.width;\n    x.value = rect.x;\n    y.value = rect.y;\n  }\n  useEventListener("scroll", update, true);\n  useResizeObserver(target, update);\n  watch(() => unrefElement(target), (ele) => !ele && update());\n  return {\n    height,\n    bottom,\n    left,\n    right,\n    top,\n    width,\n    x,\n    y,\n    update\n  };\n}\n\nfunction useRafFn(fn, options = {}) {\n  const {\n    immediate = true,\n    window = defaultWindow\n  } = options;\n  const isActive = ref(false);\n  function loop() {\n    if (!isActive.value || !window)\n      return;\n    fn();\n    window.requestAnimationFrame(loop);\n  }\n  function resume() {\n    if (!isActive.value && window) {\n      isActive.value = true;\n      loop();\n    }\n  }\n  function pause() {\n    isActive.value = false;\n  }\n  if (immediate)\n    resume();\n  tryOnScopeDispose(pause);\n  return {\n    isActive,\n    pause,\n    resume\n  };\n}\n\nvar __defProp$a = Object.defineProperty;\nvar __getOwnPropSymbols$b = Object.getOwnPropertySymbols;\nvar __hasOwnProp$b = Object.prototype.hasOwnProperty;\nvar __propIsEnum$b = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$a = (obj, key, value) => key in obj ? __defProp$a(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$a = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp$b.call(b, prop))\n      __defNormalProp$a(a, prop, b[prop]);\n  if (__getOwnPropSymbols$b)\n    for (var prop of __getOwnPropSymbols$b(b)) {\n      if (__propIsEnum$b.call(b, prop))\n        __defNormalProp$a(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useElementByPoint(options) {\n  const element = ref(null);\n  const { x, y } = options;\n  const controls = useRafFn(() => {\n    element.value = document.elementFromPoint(unref(x), unref(y));\n  });\n  return __spreadValues$a({\n    element\n  }, controls);\n}\n\nfunction useElementHover(el) {\n  const isHovered = ref(false);\n  useEventListener(el, "mouseenter", () => isHovered.value = true);\n  useEventListener(el, "mouseleave", () => isHovered.value = false);\n  return isHovered;\n}\n\nfunction useElementSize(target, initialSize = { width: 0, height: 0 }, options = {}) {\n  const width = ref(initialSize.width);\n  const height = ref(initialSize.height);\n  useResizeObserver(target, ([entry]) => {\n    width.value = entry.contentRect.width;\n    height.value = entry.contentRect.height;\n  }, options);\n  watch(() => unrefElement(target), (ele) => {\n    width.value = ele ? initialSize.width : 0;\n    height.value = ele ? initialSize.height : 0;\n  });\n  return {\n    width,\n    height\n  };\n}\n\nfunction useElementVisibility(element, { window = defaultWindow, scrollTarget } = {}) {\n  const elementIsVisible = ref(false);\n  const testBounding = () => {\n    if (!window)\n      return;\n    const document = window.document;\n    if (!element.value) {\n      elementIsVisible.value = false;\n    } else {\n      const rect = element.value.getBoundingClientRect();\n      elementIsVisible.value = rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.left <= (window.innerWidth || document.documentElement.clientWidth) && rect.bottom >= 0 && rect.right >= 0;\n    }\n  };\n  tryOnMounted(testBounding);\n  if (window)\n    tryOnMounted(() => useEventListener((scrollTarget == null ? void 0 : scrollTarget.value) || window, "scroll", testBounding, { capture: false, passive: true }));\n  return elementIsVisible;\n}\n\nconst events = /* @__PURE__ */ new Map();\n\nfunction useEventBus(key) {\n  const scope = getCurrentScope();\n  function on(listener) {\n    const listeners = events.get(key) || [];\n    listeners.push(listener);\n    events.set(key, listeners);\n    const _off = () => off(listener);\n    scope == null ? void 0 : scope.cleanups.push(_off);\n    return _off;\n  }\n  function once(listener) {\n    function _listener(...args) {\n      off(_listener);\n      listener(...args);\n    }\n    return on(_listener);\n  }\n  function off(listener) {\n    const listeners = events.get(key);\n    if (!listeners)\n      return;\n    const index = listeners.indexOf(listener);\n    if (index > -1)\n      listeners.splice(index, 1);\n    if (!listeners.length)\n      events.delete(key);\n  }\n  function reset() {\n    events.delete(key);\n  }\n  function emit(event, payload) {\n    var _a;\n    (_a = events.get(key)) == null ? void 0 : _a.forEach((v) => v(event, payload));\n  }\n  return { on, once, off, emit, reset };\n}\n\nfunction useEventSource(url, events = [], options = {}) {\n  const event = ref(null);\n  const data = ref(null);\n  const status = ref("CONNECTING");\n  const eventSource = ref(null);\n  const error = ref(null);\n  const {\n    withCredentials = false\n  } = options;\n  const close = () => {\n    if (eventSource.value) {\n      eventSource.value.close();\n      eventSource.value = null;\n      status.value = "CLOSED";\n    }\n  };\n  const es = new EventSource(url, { withCredentials });\n  eventSource.value = es;\n  es.onopen = () => {\n    status.value = "OPEN";\n    error.value = null;\n  };\n  es.onerror = (e) => {\n    status.value = "CLOSED";\n    error.value = e;\n  };\n  es.onmessage = (e) => {\n    event.value = null;\n    data.value = e.data;\n  };\n  for (const event_name of events) {\n    useEventListener(es, event_name, (e) => {\n      event.value = event_name;\n      data.value = e.data || null;\n    });\n  }\n  tryOnScopeDispose(() => {\n    close();\n  });\n  return {\n    eventSource,\n    event,\n    data,\n    status,\n    error,\n    close\n  };\n}\n\nfunction useEyeDropper(options = {}) {\n  const { initialValue = "" } = options;\n  const isSupported = Boolean(typeof window !== "undefined" && "EyeDropper" in window);\n  const sRGBHex = ref(initialValue);\n  async function open(openOptions) {\n    if (!isSupported)\n      return;\n    const eyeDropper = new window.EyeDropper();\n    const result = await eyeDropper.open(openOptions);\n    sRGBHex.value = result.sRGBHex;\n    return result;\n  }\n  return { isSupported, sRGBHex, open };\n}\n\nfunction useFavicon(newIcon = null, options = {}) {\n  const {\n    baseUrl = "",\n    rel = "icon",\n    document = defaultDocument\n  } = options;\n  const favicon = isRef(newIcon) ? newIcon : ref(newIcon);\n  const applyIcon = (icon) => {\n    document == null ? void 0 : document.head.querySelectorAll(`link[rel*="${rel}"]`).forEach((el) => el.href = `${baseUrl}${icon}`);\n  };\n  watch(favicon, (i, o) => {\n    if (isString(i) && i !== o)\n      applyIcon(i);\n  }, { immediate: true });\n  return favicon;\n}\n\nvar __defProp$9 = Object.defineProperty;\nvar core_defProps$4 = Object.defineProperties;\nvar core_getOwnPropDescs$4 = Object.getOwnPropertyDescriptors;\nvar core_getOwnPropSymbols$a = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$a = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$a = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues$9 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$a.call(b, prop))\n      __defNormalProp$9(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$a)\n    for (var prop of core_getOwnPropSymbols$a(b)) {\n      if (core_propIsEnum$a.call(b, prop))\n        __defNormalProp$9(a, prop, b[prop]);\n    }\n  return a;\n};\nvar core_spreadProps$4 = (a, b) => core_defProps$4(a, core_getOwnPropDescs$4(b));\nconst payloadMapping = {\n  json: "application/json",\n  text: "text/plain",\n  formData: "multipart/form-data"\n};\nfunction isFetchOptions(obj) {\n  return containsProp(obj, "immediate", "refetch", "initialData", "timeout", "beforeFetch", "afterFetch", "onFetchError");\n}\nfunction headersToObject(headers) {\n  if (headers instanceof Headers)\n    return Object.fromEntries([...headers.entries()]);\n  return headers;\n}\nfunction createFetch(config = {}) {\n  const _options = config.options || {};\n  const _fetchOptions = config.fetchOptions || {};\n  function useFactoryFetch(url, ...args) {\n    const computedUrl = computed(() => config.baseUrl ? joinPaths(unref(config.baseUrl), unref(url)) : unref(url));\n    let options = _options;\n    let fetchOptions = _fetchOptions;\n    if (args.length > 0) {\n      if (isFetchOptions(args[0])) {\n        options = __spreadValues$9(__spreadValues$9({}, options), args[0]);\n      } else {\n        fetchOptions = core_spreadProps$4(__spreadValues$9(__spreadValues$9({}, fetchOptions), args[0]), {\n          headers: __spreadValues$9(__spreadValues$9({}, headersToObject(fetchOptions.headers) || {}), headersToObject(args[0].headers) || {})\n        });\n      }\n    }\n    if (args.length > 1 && isFetchOptions(args[1]))\n      options = __spreadValues$9(__spreadValues$9({}, options), args[1]);\n    return useFetch(computedUrl, fetchOptions, options);\n  }\n  return useFactoryFetch;\n}\nfunction useFetch(url, ...args) {\n  var _a;\n  const supportsAbort = typeof AbortController === "function";\n  let fetchOptions = {};\n  let options = { immediate: true, refetch: false, timeout: 0 };\n  const config = {\n    method: "get",\n    type: "text",\n    payload: void 0\n  };\n  if (args.length > 0) {\n    if (isFetchOptions(args[0]))\n      options = __spreadValues$9(__spreadValues$9({}, options), args[0]);\n    else\n      fetchOptions = args[0];\n  }\n  if (args.length > 1) {\n    if (isFetchOptions(args[1]))\n      options = __spreadValues$9(__spreadValues$9({}, options), args[1]);\n  }\n  const {\n    fetch = (_a = defaultWindow) == null ? void 0 : _a.fetch,\n    initialData,\n    timeout\n  } = options;\n  const responseEvent = createEventHook();\n  const errorEvent = createEventHook();\n  const finallyEvent = createEventHook();\n  const isFinished = ref(false);\n  const isFetching = ref(false);\n  const aborted = ref(false);\n  const statusCode = ref(null);\n  const response = shallowRef(null);\n  const error = ref(null);\n  const data = shallowRef(initialData);\n  const canAbort = computed(() => supportsAbort && isFetching.value);\n  let controller;\n  let timer;\n  const abort = () => {\n    if (supportsAbort && controller)\n      controller.abort();\n  };\n  const loading = (isLoading) => {\n    isFetching.value = isLoading;\n    isFinished.value = !isLoading;\n  };\n  if (timeout)\n    timer = useTimeoutFn(abort, timeout, { immediate: false });\n  const execute = async (throwOnFailed = false) => {\n    var _a2;\n    loading(true);\n    error.value = null;\n    statusCode.value = null;\n    aborted.value = false;\n    controller = void 0;\n    if (supportsAbort) {\n      controller = new AbortController();\n      controller.signal.onabort = () => aborted.value = true;\n      fetchOptions = core_spreadProps$4(__spreadValues$9({}, fetchOptions), {\n        signal: controller.signal\n      });\n    }\n    const defaultFetchOptions = {\n      method: config.method,\n      headers: {}\n    };\n    if (config.payload) {\n      const headers = headersToObject(defaultFetchOptions.headers);\n      if (config.payloadType)\n        headers["Content-Type"] = (_a2 = payloadMapping[config.payloadType]) != null ? _a2 : config.payloadType;\n      defaultFetchOptions.body = config.payloadType === "json" ? JSON.stringify(unref(config.payload)) : unref(config.payload);\n    }\n    let isCanceled = false;\n    const context = { url: unref(url), options: fetchOptions, cancel: () => {\n      isCanceled = true;\n    } };\n    if (options.beforeFetch)\n      Object.assign(context, await options.beforeFetch(context));\n    if (isCanceled || !fetch) {\n      loading(false);\n      return Promise.resolve(null);\n    }\n    let responseData = null;\n    if (timer)\n      timer.start();\n    return new Promise((resolve, reject) => {\n      var _a3;\n      fetch(context.url, core_spreadProps$4(__spreadValues$9(__spreadValues$9({}, defaultFetchOptions), context.options), {\n        headers: __spreadValues$9(__spreadValues$9({}, headersToObject(defaultFetchOptions.headers)), headersToObject((_a3 = context.options) == null ? void 0 : _a3.headers))\n      })).then(async (fetchResponse) => {\n        response.value = fetchResponse;\n        statusCode.value = fetchResponse.status;\n        responseData = await fetchResponse[config.type]();\n        if (options.afterFetch && statusCode.value >= 200 && statusCode.value < 300)\n          ({ data: responseData } = await options.afterFetch({ data: responseData, response: fetchResponse }));\n        data.value = responseData;\n        if (!fetchResponse.ok)\n          throw new Error(fetchResponse.statusText);\n        responseEvent.trigger(fetchResponse);\n        return resolve(fetchResponse);\n      }).catch(async (fetchError) => {\n        let errorData = fetchError.message || fetchError.name;\n        if (options.onFetchError)\n          ({ data: responseData, error: errorData } = await options.onFetchError({ data: responseData, error: fetchError }));\n        data.value = responseData;\n        error.value = errorData;\n        errorEvent.trigger(fetchError);\n        if (throwOnFailed)\n          return reject(fetchError);\n        return resolve(null);\n      }).finally(() => {\n        loading(false);\n        if (timer)\n          timer.stop();\n        finallyEvent.trigger(null);\n      });\n    });\n  };\n  watch(() => [\n    unref(url),\n    unref(options.refetch)\n  ], () => unref(options.refetch) && execute(), { deep: true });\n  const shell = {\n    isFinished,\n    statusCode,\n    response,\n    error,\n    data,\n    isFetching,\n    canAbort,\n    aborted,\n    abort,\n    execute,\n    onFetchResponse: responseEvent.on,\n    onFetchError: errorEvent.on,\n    onFetchFinally: finallyEvent.on,\n    get: setMethod("get"),\n    put: setMethod("put"),\n    post: setMethod("post"),\n    delete: setMethod("delete"),\n    patch: setMethod("patch"),\n    head: setMethod("head"),\n    options: setMethod("options"),\n    json: setType("json"),\n    text: setType("text"),\n    blob: setType("blob"),\n    arrayBuffer: setType("arrayBuffer"),\n    formData: setType("formData")\n  };\n  function setMethod(method) {\n    return (payload, payloadType) => {\n      if (!isFetching.value) {\n        config.method = method;\n        config.payload = payload;\n        config.payloadType = payloadType;\n        if (isRef(config.payload)) {\n          watch(() => [\n            unref(config.payload),\n            unref(options.refetch)\n          ], () => unref(options.refetch) && execute(), { deep: true });\n        }\n        if (!payloadType && unref(payload) && Object.getPrototypeOf(unref(payload)) === Object.prototype)\n          config.payloadType = "json";\n        return shell;\n      }\n      return void 0;\n    };\n  }\n  function waitUntilFinished() {\n    return new Promise((resolve, reject) => {\n      until(isFinished).toBe(true).then(() => resolve(shell)).catch((error2) => reject(error2));\n    });\n  }\n  function setType(type) {\n    return () => {\n      if (!isFetching.value) {\n        config.type = type;\n        return core_spreadProps$4(__spreadValues$9({}, shell), {\n          then(onFulfilled, onRejected) {\n            return waitUntilFinished().then(onFulfilled, onRejected);\n          }\n        });\n      }\n      return void 0;\n    };\n  }\n  if (options.immediate)\n    setTimeout(execute, 0);\n  return core_spreadProps$4(__spreadValues$9({}, shell), {\n    then(onFulfilled, onRejected) {\n      return waitUntilFinished().then(onFulfilled, onRejected);\n    }\n  });\n}\nfunction joinPaths(start, end) {\n  if (!start.endsWith("/") && !end.startsWith("/"))\n    return `${start}/${end}`;\n  return `${start}${end}`;\n}\n\nfunction useFocus(options = {}) {\n  const {\n    initialValue = false\n  } = options;\n  const activeElement = useActiveElement(options);\n  const target = computed(() => unrefElement(options.target));\n  const focused = computed({\n    get() {\n      return activeElement.value === target.value;\n    },\n    set(value) {\n      var _a, _b;\n      if (!value && focused.value)\n        (_a = target.value) == null ? void 0 : _a.blur();\n      if (value && !focused.value)\n        (_b = target.value) == null ? void 0 : _b.focus();\n    }\n  });\n  watch(target, () => {\n    focused.value = initialValue;\n  }, { immediate: true, flush: "post" });\n  return { focused };\n}\n\nfunction useFocusWithin(target, options = {}) {\n  const activeElement = useActiveElement(options);\n  const targetElement = computed(() => unrefElement(target));\n  const focused = computed(() => targetElement.value && activeElement.value ? targetElement.value.contains(activeElement.value) : false);\n  return { focused };\n}\n\nfunction useFps(options) {\n  var _a;\n  const fps = ref(0);\n  if (typeof performance === "undefined")\n    return fps;\n  const every = (_a = options == null ? void 0 : options.every) != null ? _a : 10;\n  let last = performance.now();\n  let ticks = 0;\n  useRafFn(() => {\n    ticks += 1;\n    if (ticks >= every) {\n      const now = performance.now();\n      const diff = now - last;\n      fps.value = Math.round(1e3 / (diff / ticks));\n      last = now;\n      ticks = 0;\n    }\n  });\n  return fps;\n}\n\nconst functionsMap = (/* unused pure expression or super */ null && ([\n  [\n    "requestFullscreen",\n    "exitFullscreen",\n    "fullscreenElement",\n    "fullscreenEnabled",\n    "fullscreenchange",\n    "fullscreenerror"\n  ],\n  [\n    "webkitRequestFullscreen",\n    "webkitExitFullscreen",\n    "webkitFullscreenElement",\n    "webkitFullscreenEnabled",\n    "webkitfullscreenchange",\n    "webkitfullscreenerror"\n  ],\n  [\n    "webkitRequestFullScreen",\n    "webkitCancelFullScreen",\n    "webkitCurrentFullScreenElement",\n    "webkitCancelFullScreen",\n    "webkitfullscreenchange",\n    "webkitfullscreenerror"\n  ],\n  [\n    "mozRequestFullScreen",\n    "mozCancelFullScreen",\n    "mozFullScreenElement",\n    "mozFullScreenEnabled",\n    "mozfullscreenchange",\n    "mozfullscreenerror"\n  ],\n  [\n    "msRequestFullscreen",\n    "msExitFullscreen",\n    "msFullscreenElement",\n    "msFullscreenEnabled",\n    "MSFullscreenChange",\n    "MSFullscreenError"\n  ]\n]));\nfunction useFullscreen(target, options = {}) {\n  const { document = defaultDocument, autoExit = false } = options;\n  const targetRef = target || (document == null ? void 0 : document.querySelector("html"));\n  const isFullscreen = ref(false);\n  let isSupported = false;\n  let map = functionsMap[0];\n  if (!document) {\n    isSupported = false;\n  } else {\n    for (const m of functionsMap) {\n      if (m[1] in document) {\n        map = m;\n        isSupported = true;\n        break;\n      }\n    }\n  }\n  const [REQUEST, EXIT, ELEMENT, , EVENT] = map;\n  async function exit() {\n    if (!isSupported)\n      return;\n    if (document == null ? void 0 : document[ELEMENT])\n      await document[EXIT]();\n    isFullscreen.value = false;\n  }\n  async function enter() {\n    if (!isSupported)\n      return;\n    await exit();\n    const target2 = unrefElement(targetRef);\n    if (target2) {\n      await target2[REQUEST]();\n      isFullscreen.value = true;\n    }\n  }\n  async function toggle() {\n    if (isFullscreen.value)\n      await exit();\n    else\n      await enter();\n  }\n  if (document) {\n    useEventListener(document, EVENT, () => {\n      isFullscreen.value = !!(document == null ? void 0 : document[ELEMENT]);\n    }, false);\n  }\n  if (autoExit)\n    tryOnScopeDispose(exit);\n  return {\n    isSupported,\n    isFullscreen,\n    enter,\n    exit,\n    toggle\n  };\n}\n\nfunction useGeolocation(options = {}) {\n  const {\n    enableHighAccuracy = true,\n    maximumAge = 3e4,\n    timeout = 27e3,\n    navigator = defaultNavigator\n  } = options;\n  const isSupported = navigator && "geolocation" in navigator;\n  const locatedAt = ref(null);\n  const error = ref(null);\n  const coords = ref({\n    accuracy: 0,\n    latitude: Infinity,\n    longitude: Infinity,\n    altitude: null,\n    altitudeAccuracy: null,\n    heading: null,\n    speed: null\n  });\n  function updatePosition(position) {\n    locatedAt.value = position.timestamp;\n    coords.value = position.coords;\n    error.value = null;\n  }\n  let watcher;\n  if (isSupported) {\n    watcher = navigator.geolocation.watchPosition(updatePosition, (err) => error.value = err, {\n      enableHighAccuracy,\n      maximumAge,\n      timeout\n    });\n  }\n  tryOnScopeDispose(() => {\n    if (watcher && navigator)\n      navigator.geolocation.clearWatch(watcher);\n  });\n  return {\n    isSupported,\n    coords,\n    locatedAt,\n    error\n  };\n}\n\nconst defaultEvents$1 = (/* unused pure expression or super */ null && (["mousemove", "mousedown", "resize", "keydown", "touchstart", "wheel"]));\nconst oneMinute = 6e4;\nfunction useIdle(timeout = oneMinute, options = {}) {\n  const {\n    initialState = false,\n    listenForVisibilityChange = true,\n    events = defaultEvents$1,\n    window = defaultWindow,\n    eventFilter = throttleFilter(50)\n  } = options;\n  const idle = ref(initialState);\n  const lastActive = ref(timestamp());\n  let timer;\n  const onEvent = createFilterWrapper(eventFilter, () => {\n    idle.value = false;\n    lastActive.value = timestamp();\n    clearTimeout(timer);\n    timer = setTimeout(() => idle.value = true, timeout);\n  });\n  if (window) {\n    const document = window.document;\n    for (const event of events)\n      useEventListener(window, event, onEvent, { passive: true });\n    if (listenForVisibilityChange) {\n      useEventListener(document, "visibilitychange", () => {\n        if (!document.hidden)\n          onEvent();\n      });\n    }\n  }\n  timer = setTimeout(() => idle.value = true, timeout);\n  return { idle, lastActive };\n}\n\nfunction useScroll(element, options = {}) {\n  const {\n    throttle = 0,\n    idle = 200,\n    onStop = noop,\n    onScroll = noop,\n    offset = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    },\n    eventListenerOptions = {\n      capture: false,\n      passive: true\n    }\n  } = options;\n  const x = ref(0);\n  const y = ref(0);\n  const isScrolling = ref(false);\n  const arrivedState = reactive({\n    left: true,\n    right: false,\n    top: true,\n    bottom: false\n  });\n  const directions = reactive({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false\n  });\n  if (element) {\n    const onScrollEnd = useDebounceFn((e) => {\n      isScrolling.value = false;\n      directions.left = false;\n      directions.right = false;\n      directions.top = false;\n      directions.bottom = false;\n      onStop(e);\n    }, throttle + idle);\n    const onScrollHandler = (e) => {\n      const eventTarget = e.target === document ? e.target.documentElement : e.target;\n      const scrollLeft = eventTarget.scrollLeft;\n      directions.left = scrollLeft < x.value;\n      directions.right = scrollLeft > x.value;\n      arrivedState.left = scrollLeft <= 0 + (offset.left || 0);\n      arrivedState.right = scrollLeft + eventTarget.clientWidth >= eventTarget.scrollWidth - (offset.right || 0);\n      x.value = scrollLeft;\n      const scrollTop = eventTarget.scrollTop;\n      directions.top = scrollTop < y.value;\n      directions.bottom = scrollTop > y.value;\n      arrivedState.top = scrollTop <= 0 + (offset.top || 0);\n      arrivedState.bottom = scrollTop + eventTarget.clientHeight >= eventTarget.scrollHeight - (offset.bottom || 0);\n      y.value = scrollTop;\n      isScrolling.value = true;\n      onScrollEnd(e);\n      onScroll(e);\n    };\n    useEventListener(element, "scroll", throttle ? useThrottleFn(onScrollHandler, throttle) : onScrollHandler, eventListenerOptions);\n  }\n  return {\n    x,\n    y,\n    isScrolling,\n    arrivedState,\n    directions\n  };\n}\n\nvar core_defProp$8 = Object.defineProperty;\nvar core_defProps$3 = Object.defineProperties;\nvar core_getOwnPropDescs$3 = Object.getOwnPropertyDescriptors;\nvar core_getOwnPropSymbols$9 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$9 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$9 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$8 = (obj, key, value) => key in obj ? core_defProp$8(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$8 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$9.call(b, prop))\n      core_defNormalProp$8(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$9)\n    for (var prop of core_getOwnPropSymbols$9(b)) {\n      if (core_propIsEnum$9.call(b, prop))\n        core_defNormalProp$8(a, prop, b[prop]);\n    }\n  return a;\n};\nvar core_spreadProps$3 = (a, b) => core_defProps$3(a, core_getOwnPropDescs$3(b));\nfunction useInfiniteScroll(element, onLoadMore, options = {}) {\n  var _a;\n  const state = reactive(useScroll(element, core_spreadProps$3(core_spreadValues$8({}, options), {\n    offset: core_spreadValues$8({\n      bottom: (_a = options.distance) != null ? _a : 0\n    }, options.offset)\n  })));\n  watch(() => state.arrivedState.bottom, (v) => {\n    if (v)\n      onLoadMore(state);\n  });\n}\n\nfunction useIntersectionObserver(target, callback, options = {}) {\n  const {\n    root,\n    rootMargin = "0px",\n    threshold = 0.1,\n    window = defaultWindow\n  } = options;\n  const isSupported = window && "IntersectionObserver" in window;\n  let cleanup = noop;\n  const stopWatch = isSupported ? watch(() => ({\n    el: unrefElement(target),\n    root: unrefElement(root)\n  }), ({ el, root: root2 }) => {\n    cleanup();\n    if (!el)\n      return;\n    const observer = new window.IntersectionObserver(callback, {\n      root: root2,\n      rootMargin,\n      threshold\n    });\n    observer.observe(el);\n    cleanup = () => {\n      observer.disconnect();\n      cleanup = noop;\n    };\n  }, { immediate: true, flush: "post" }) : noop;\n  const stop = () => {\n    cleanup();\n    stopWatch();\n  };\n  tryOnScopeDispose(stop);\n  return {\n    isSupported,\n    stop\n  };\n}\n\nconst defaultEvents = (/* unused pure expression or super */ null && (["mousedown", "mouseup", "keydown", "keyup"]));\nfunction useKeyModifier(modifier, options = {}) {\n  const {\n    events = defaultEvents,\n    document = defaultDocument,\n    initial = null\n  } = options;\n  const state = ref(initial);\n  if (document) {\n    events.forEach((listenerEvent) => {\n      useEventListener(document, listenerEvent, (evt) => {\n        state.value = evt.getModifierState(modifier);\n      });\n    });\n  }\n  return state;\n}\n\nfunction useLocalStorage(key, initialValue, options = {}) {\n  const { window = defaultWindow } = options;\n  return useStorage(key, initialValue, window == null ? void 0 : window.localStorage, options);\n}\n\nconst DefaultMagicKeysAliasMap = {\n  ctrl: "control",\n  command: "meta",\n  cmd: "meta",\n  option: "alt",\n  up: "arrowup",\n  down: "arrowdown",\n  left: "arrowleft",\n  right: "arrowright"\n};\n\nfunction useMagicKeys(options = {}) {\n  const {\n    reactive: useReactive = false,\n    target = defaultWindow,\n    aliasMap = DefaultMagicKeysAliasMap,\n    passive = true,\n    onEventFired = noop\n  } = options;\n  const current = reactive(/* @__PURE__ */ new Set());\n  const obj = { toJSON() {\n    return {};\n  }, current };\n  const refs = useReactive ? reactive(obj) : obj;\n  function updateRefs(e, value) {\n    var _a, _b;\n    const key = (_a = e.key) == null ? void 0 : _a.toLowerCase();\n    const code = (_b = e.code) == null ? void 0 : _b.toLowerCase();\n    const values = [code, key].filter(Boolean);\n    if (code) {\n      if (value)\n        current.add(e.code);\n      else\n        current.delete(e.code);\n    }\n    for (const key2 of values) {\n      if (key2 in refs) {\n        if (useReactive)\n          refs[key2] = value;\n        else\n          refs[key2].value = value;\n      }\n    }\n  }\n  if (target) {\n    useEventListener(target, "keydown", (e) => {\n      updateRefs(e, true);\n      return onEventFired(e);\n    }, { passive });\n    useEventListener(target, "keyup", (e) => {\n      updateRefs(e, false);\n      return onEventFired(e);\n    }, { passive });\n  }\n  const proxy = new Proxy(refs, {\n    get(target2, prop, rec) {\n      if (typeof prop !== "string")\n        return Reflect.get(target2, prop, rec);\n      prop = prop.toLowerCase();\n      if (prop in aliasMap)\n        prop = aliasMap[prop];\n      if (!(prop in refs)) {\n        if (/[+_-]/.test(prop)) {\n          const keys = prop.split(/[+_-]/g).map((i) => i.trim());\n          refs[prop] = computed(() => keys.every((key) => unref(proxy[key])));\n        } else {\n          refs[prop] = ref(false);\n        }\n      }\n      const r = Reflect.get(target2, prop, rec);\n      return useReactive ? unref(r) : r;\n    }\n  });\n  return proxy;\n}\n\nvar core_defProp$7 = Object.defineProperty;\nvar core_getOwnPropSymbols$8 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$8 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$8 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$7 = (obj, key, value) => key in obj ? core_defProp$7(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$7 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$8.call(b, prop))\n      core_defNormalProp$7(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$8)\n    for (var prop of core_getOwnPropSymbols$8(b)) {\n      if (core_propIsEnum$8.call(b, prop))\n        core_defNormalProp$7(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction usingElRef(source, cb) {\n  if (unref(source))\n    cb(unref(source));\n}\nfunction timeRangeToArray(timeRanges) {\n  let ranges = [];\n  for (let i = 0; i < timeRanges.length; ++i)\n    ranges = [...ranges, [timeRanges.start(i), timeRanges.end(i)]];\n  return ranges;\n}\nfunction tracksToArray(tracks) {\n  return Array.from(tracks).map(({ label, kind, language, mode, activeCues, cues, inBandMetadataTrackDispatchType }, id) => ({ id, label, kind, language, mode, activeCues, cues, inBandMetadataTrackDispatchType }));\n}\nconst defaultOptions = {\n  src: "",\n  tracks: []\n};\nfunction useMediaControls(target, options = {}) {\n  options = core_spreadValues$7(core_spreadValues$7({}, defaultOptions), options);\n  const {\n    document = defaultDocument\n  } = options;\n  const currentTime = ref(0);\n  const duration = ref(0);\n  const seeking = ref(false);\n  const volume = ref(1);\n  const waiting = ref(false);\n  const ended = ref(false);\n  const playing = ref(false);\n  const rate = ref(1);\n  const stalled = ref(false);\n  const buffered = ref([]);\n  const tracks = ref([]);\n  const selectedTrack = ref(-1);\n  const isPictureInPicture = ref(false);\n  const muted = ref(false);\n  const supportsPictureInPicture = document && "pictureInPictureEnabled" in document;\n  const sourceErrorEvent = createEventHook();\n  const disableTrack = (track) => {\n    usingElRef(target, (el) => {\n      if (track) {\n        const id = isNumber(track) ? track : track.id;\n        el.textTracks[id].mode = "disabled";\n      } else {\n        for (let i = 0; i < el.textTracks.length; ++i)\n          el.textTracks[i].mode = "disabled";\n      }\n      selectedTrack.value = -1;\n    });\n  };\n  const enableTrack = (track, disableTracks = true) => {\n    usingElRef(target, (el) => {\n      const id = isNumber(track) ? track : track.id;\n      if (disableTracks)\n        disableTrack();\n      el.textTracks[id].mode = "showing";\n      selectedTrack.value = id;\n    });\n  };\n  const togglePictureInPicture = () => {\n    return new Promise((resolve, reject) => {\n      usingElRef(target, async (el) => {\n        if (supportsPictureInPicture) {\n          if (!isPictureInPicture.value) {\n            el.requestPictureInPicture().then(resolve).catch(reject);\n          } else {\n            document.exitPictureInPicture().then(resolve).catch(reject);\n          }\n        }\n      });\n    });\n  };\n  watchEffect(() => {\n    if (!document)\n      return;\n    const el = unref(target);\n    if (!el)\n      return;\n    const src = unref(options.src);\n    let sources = [];\n    if (!src)\n      return;\n    if (isString(src))\n      sources = [{ src }];\n    else if (Array.isArray(src))\n      sources = src;\n    else if (isObject(src))\n      sources = [src];\n    el.querySelectorAll("source").forEach((e) => {\n      e.removeEventListener("error", sourceErrorEvent.trigger);\n      e.remove();\n    });\n    sources.forEach(({ src: src2, type }) => {\n      const source = document.createElement("source");\n      source.setAttribute("src", src2);\n      source.setAttribute("type", type || "");\n      source.addEventListener("error", sourceErrorEvent.trigger);\n      el.appendChild(source);\n    });\n    el.load();\n  });\n  tryOnScopeDispose(() => {\n    const el = unref(target);\n    if (!el)\n      return;\n    el.querySelectorAll("source").forEach((e) => e.removeEventListener("error", sourceErrorEvent.trigger));\n  });\n  watch(volume, (vol) => {\n    const el = unref(target);\n    if (!el)\n      return;\n    el.volume = vol;\n  });\n  watch(muted, (mute) => {\n    const el = unref(target);\n    if (!el)\n      return;\n    el.muted = mute;\n  });\n  watch(rate, (rate2) => {\n    const el = unref(target);\n    if (!el)\n      return;\n    el.playbackRate = rate2;\n  });\n  watchEffect(() => {\n    if (!document)\n      return;\n    const textTracks = unref(options.tracks);\n    const el = unref(target);\n    if (!textTracks || !textTracks.length || !el)\n      return;\n    el.querySelectorAll("track").forEach((e) => e.remove());\n    textTracks.forEach(({ default: isDefault, kind, label, src, srcLang }, i) => {\n      const track = document.createElement("track");\n      track.default = isDefault || false;\n      track.kind = kind;\n      track.label = label;\n      track.src = src;\n      track.srclang = srcLang;\n      if (track.default)\n        selectedTrack.value = i;\n      el.appendChild(track);\n    });\n  });\n  const { ignoreUpdates: ignoreCurrentTimeUpdates } = ignorableWatch(currentTime, (time) => {\n    const el = unref(target);\n    if (!el)\n      return;\n    el.currentTime = time;\n  });\n  const { ignoreUpdates: ignorePlayingUpdates } = ignorableWatch(playing, (isPlaying) => {\n    const el = unref(target);\n    if (!el)\n      return;\n    isPlaying ? el.play() : el.pause();\n  });\n  useEventListener(target, "timeupdate", () => ignoreCurrentTimeUpdates(() => currentTime.value = unref(target).currentTime));\n  useEventListener(target, "durationchange", () => duration.value = unref(target).duration);\n  useEventListener(target, "progress", () => buffered.value = timeRangeToArray(unref(target).buffered));\n  useEventListener(target, "seeking", () => seeking.value = true);\n  useEventListener(target, "seeked", () => seeking.value = false);\n  useEventListener(target, "waiting", () => waiting.value = true);\n  useEventListener(target, "playing", () => waiting.value = false);\n  useEventListener(target, "ratechange", () => rate.value = unref(target).playbackRate);\n  useEventListener(target, "stalled", () => stalled.value = true);\n  useEventListener(target, "ended", () => ended.value = true);\n  useEventListener(target, "pause", () => ignorePlayingUpdates(() => playing.value = false));\n  useEventListener(target, "play", () => ignorePlayingUpdates(() => playing.value = true));\n  useEventListener(target, "enterpictureinpicture", () => isPictureInPicture.value = true);\n  useEventListener(target, "leavepictureinpicture", () => isPictureInPicture.value = false);\n  useEventListener(target, "volumechange", () => {\n    const el = unref(target);\n    if (!el)\n      return;\n    volume.value = el.volume;\n    muted.value = el.muted;\n  });\n  const listeners = [];\n  const stop = watch([target], () => {\n    const el = unref(target);\n    if (!el)\n      return;\n    stop();\n    listeners[0] = useEventListener(el.textTracks, "addtrack", () => tracks.value = tracksToArray(el.textTracks));\n    listeners[1] = useEventListener(el.textTracks, "removetrack", () => tracks.value = tracksToArray(el.textTracks));\n    listeners[2] = useEventListener(el.textTracks, "change", () => tracks.value = tracksToArray(el.textTracks));\n  });\n  tryOnScopeDispose(() => listeners.forEach((listener) => listener()));\n  return {\n    currentTime,\n    duration,\n    waiting,\n    seeking,\n    ended,\n    stalled,\n    buffered,\n    playing,\n    rate,\n    volume,\n    muted,\n    tracks,\n    selectedTrack,\n    enableTrack,\n    disableTrack,\n    supportsPictureInPicture,\n    togglePictureInPicture,\n    isPictureInPicture,\n    onSourceError: sourceErrorEvent.on\n  };\n}\n\nconst getMapVue2Compat = () => {\n  const data = reactive({});\n  return {\n    get: (key) => data[key],\n    set: (key, value) => set(data, key, value),\n    has: (key) => Object.prototype.hasOwnProperty.call(data, key),\n    delete: (key) => del(data, key),\n    clear: () => {\n      Object.keys(data).forEach((key) => {\n        del(data, key);\n      });\n    }\n  };\n};\nfunction useMemoize(resolver, options) {\n  const initCache = () => {\n    if (options == null ? void 0 : options.cache)\n      return reactive(options.cache);\n    if (isVue2)\n      return getMapVue2Compat();\n    return reactive(/* @__PURE__ */ new Map());\n  };\n  const cache = initCache();\n  const generateKey = (...args) => (options == null ? void 0 : options.getKey) ? options.getKey(...args) : JSON.stringify(args);\n  const _loadData = (key, ...args) => {\n    cache.set(key, resolver(...args));\n    return cache.get(key);\n  };\n  const loadData = (...args) => _loadData(generateKey(...args), ...args);\n  const deleteData = (...args) => {\n    cache.delete(generateKey(...args));\n  };\n  const clearData = () => {\n    cache.clear();\n  };\n  const memoized = (...args) => {\n    const key = generateKey(...args);\n    if (cache.has(key))\n      return cache.get(key);\n    return _loadData(key, ...args);\n  };\n  memoized.load = loadData;\n  memoized.delete = deleteData;\n  memoized.clear = clearData;\n  memoized.generateKey = generateKey;\n  memoized.cache = cache;\n  return memoized;\n}\n\nfunction useMemory(options = {}) {\n  const memory = ref();\n  const isSupported = typeof performance !== "undefined" && "memory" in performance;\n  if (isSupported) {\n    const { interval = 1e3 } = options;\n    useIntervalFn(() => {\n      memory.value = performance.memory;\n    }, interval, { immediate: options.immediate, immediateCallback: options.immediateCallback });\n  }\n  return { isSupported, memory };\n}\n\nfunction useMounted() {\n  const isMounted = ref(false);\n  onMounted(() => {\n    isMounted.value = true;\n  });\n  return isMounted;\n}\n\nfunction useMouse(options = {}) {\n  const {\n    type = "page",\n    touch = true,\n    resetOnTouchEnds = false,\n    initialValue = { x: 0, y: 0 },\n    window = defaultWindow,\n    eventFilter\n  } = options;\n  const x = ref(initialValue.x);\n  const y = ref(initialValue.y);\n  const sourceType = ref(null);\n  const mouseHandler = (event) => {\n    if (type === "page") {\n      x.value = event.pageX;\n      y.value = event.pageY;\n    } else if (type === "client") {\n      x.value = event.clientX;\n      y.value = event.clientY;\n    }\n    sourceType.value = "mouse";\n  };\n  const reset = () => {\n    x.value = initialValue.x;\n    y.value = initialValue.y;\n  };\n  const touchHandler = (event) => {\n    if (event.touches.length > 0) {\n      const touch2 = event.touches[0];\n      if (type === "page") {\n        x.value = touch2.pageX;\n        y.value = touch2.pageY;\n      } else if (type === "client") {\n        x.value = touch2.clientX;\n        y.value = touch2.clientY;\n      }\n      sourceType.value = "touch";\n    }\n  };\n  const mouseHandlerWrapper = (event) => {\n    return eventFilter === void 0 ? mouseHandler(event) : eventFilter(() => mouseHandler(event), {});\n  };\n  const touchHandlerWrapper = (event) => {\n    return eventFilter === void 0 ? touchHandler(event) : eventFilter(() => touchHandler(event), {});\n  };\n  if (window) {\n    useEventListener(window, "mousemove", mouseHandlerWrapper, { passive: true });\n    useEventListener(window, "dragover", mouseHandlerWrapper, { passive: true });\n    if (touch) {\n      useEventListener(window, "touchstart", touchHandlerWrapper, { passive: true });\n      useEventListener(window, "touchmove", touchHandlerWrapper, { passive: true });\n      if (resetOnTouchEnds)\n        useEventListener(window, "touchend", reset, { passive: true });\n    }\n  }\n  return {\n    x,\n    y,\n    sourceType\n  };\n}\n\nfunction useMouseInElement(target, options = {}) {\n  const {\n    handleOutside = true,\n    window = defaultWindow\n  } = options;\n  const { x, y, sourceType } = useMouse(options);\n  const targetRef = ref(target != null ? target : window == null ? void 0 : window.document.body);\n  const elementX = ref(0);\n  const elementY = ref(0);\n  const elementPositionX = ref(0);\n  const elementPositionY = ref(0);\n  const elementHeight = ref(0);\n  const elementWidth = ref(0);\n  const isOutside = ref(false);\n  let stop = () => {\n  };\n  if (window) {\n    stop = watch([targetRef, x, y], () => {\n      const el = unrefElement(targetRef);\n      if (!el)\n        return;\n      const {\n        left,\n        top,\n        width,\n        height\n      } = el.getBoundingClientRect();\n      elementPositionX.value = left + window.pageXOffset;\n      elementPositionY.value = top + window.pageYOffset;\n      elementHeight.value = height;\n      elementWidth.value = width;\n      const elX = x.value - elementPositionX.value;\n      const elY = y.value - elementPositionY.value;\n      isOutside.value = elX < 0 || elY < 0 || elX > elementWidth.value || elY > elementHeight.value;\n      if (handleOutside || !isOutside.value) {\n        elementX.value = elX;\n        elementY.value = elY;\n      }\n    }, { immediate: true });\n  }\n  return {\n    x,\n    y,\n    sourceType,\n    elementX,\n    elementY,\n    elementPositionX,\n    elementPositionY,\n    elementHeight,\n    elementWidth,\n    isOutside,\n    stop\n  };\n}\n\nfunction useMousePressed(options = {}) {\n  const {\n    touch = true,\n    drag = true,\n    initialValue = false,\n    window = defaultWindow\n  } = options;\n  const pressed = ref(initialValue);\n  const sourceType = ref(null);\n  if (!window) {\n    return {\n      pressed,\n      sourceType\n    };\n  }\n  const onPressed = (srcType) => () => {\n    pressed.value = true;\n    sourceType.value = srcType;\n  };\n  const onReleased = () => {\n    pressed.value = false;\n    sourceType.value = null;\n  };\n  const target = computed(() => unrefElement(options.target) || window);\n  useEventListener(target, "mousedown", onPressed("mouse"), { passive: true });\n  useEventListener(window, "mouseleave", onReleased, { passive: true });\n  useEventListener(window, "mouseup", onReleased, { passive: true });\n  if (drag) {\n    useEventListener(target, "dragstart", onPressed("mouse"), { passive: true });\n    useEventListener(window, "drop", onReleased, { passive: true });\n    useEventListener(window, "dragend", onReleased, { passive: true });\n  }\n  if (touch) {\n    useEventListener(target, "touchstart", onPressed("touch"), { passive: true });\n    useEventListener(window, "touchend", onReleased, { passive: true });\n    useEventListener(window, "touchcancel", onReleased, { passive: true });\n  }\n  return {\n    pressed,\n    sourceType\n  };\n}\n\nvar core_getOwnPropSymbols$7 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$7 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$7 = Object.prototype.propertyIsEnumerable;\nvar core_objRest$1 = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (core_hasOwnProp$7.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && core_getOwnPropSymbols$7)\n    for (var prop of core_getOwnPropSymbols$7(source)) {\n      if (exclude.indexOf(prop) < 0 && core_propIsEnum$7.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nfunction useMutationObserver(target, callback, options = {}) {\n  const _a = options, { window = defaultWindow } = _a, mutationOptions = core_objRest$1(_a, ["window"]);\n  let observer;\n  const isSupported = window && "IntersectionObserver" in window;\n  const cleanup = () => {\n    if (observer) {\n      observer.disconnect();\n      observer = void 0;\n    }\n  };\n  const stopWatch = watch(() => unrefElement(target), (el) => {\n    cleanup();\n    if (isSupported && window && el) {\n      observer = new window.MutationObserver(callback);\n      observer.observe(el, mutationOptions);\n    }\n  }, { immediate: true });\n  const stop = () => {\n    cleanup();\n    stopWatch();\n  };\n  tryOnScopeDispose(stop);\n  return {\n    isSupported,\n    stop\n  };\n}\n\nconst useNavigatorLanguage = (options = {}) => {\n  const { window = defaultWindow } = options;\n  const navigator = window == null ? void 0 : window.navigator;\n  const isSupported = Boolean(navigator && "language" in navigator);\n  const language = ref(navigator == null ? void 0 : navigator.language);\n  useEventListener(window, "languagechange", () => {\n    if (navigator)\n      language.value = navigator.language;\n  });\n  return {\n    isSupported,\n    language\n  };\n};\n\nfunction useNetwork(options = {}) {\n  const { window = defaultWindow } = options;\n  const navigator = window == null ? void 0 : window.navigator;\n  const isSupported = Boolean(navigator && "connection" in navigator);\n  const isOnline = ref(true);\n  const saveData = ref(false);\n  const offlineAt = ref(void 0);\n  const downlink = ref(void 0);\n  const downlinkMax = ref(void 0);\n  const rtt = ref(void 0);\n  const effectiveType = ref(void 0);\n  const type = ref("unknown");\n  const connection = isSupported && navigator.connection;\n  function updateNetworkInformation() {\n    if (!navigator)\n      return;\n    isOnline.value = navigator.onLine;\n    offlineAt.value = isOnline.value ? void 0 : Date.now();\n    if (connection) {\n      downlink.value = connection.downlink;\n      downlinkMax.value = connection.downlinkMax;\n      effectiveType.value = connection.effectiveType;\n      rtt.value = connection.rtt;\n      saveData.value = connection.saveData;\n      type.value = connection.type;\n    }\n  }\n  if (window) {\n    useEventListener(window, "offline", () => {\n      isOnline.value = false;\n      offlineAt.value = Date.now();\n    });\n    useEventListener(window, "online", () => {\n      isOnline.value = true;\n    });\n  }\n  if (connection)\n    useEventListener(connection, "change", updateNetworkInformation, false);\n  updateNetworkInformation();\n  return {\n    isSupported,\n    isOnline,\n    saveData,\n    offlineAt,\n    downlink,\n    downlinkMax,\n    effectiveType,\n    rtt,\n    type\n  };\n}\n\nvar core_defProp$6 = Object.defineProperty;\nvar core_getOwnPropSymbols$6 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$6 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$6 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$6 = (obj, key, value) => key in obj ? core_defProp$6(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$6 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$6.call(b, prop))\n      core_defNormalProp$6(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$6)\n    for (var prop of core_getOwnPropSymbols$6(b)) {\n      if (core_propIsEnum$6.call(b, prop))\n        core_defNormalProp$6(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useNow(options = {}) {\n  const {\n    controls: exposeControls = false,\n    interval = "requestAnimationFrame"\n  } = options;\n  const now = ref(new Date());\n  const update = () => now.value = new Date();\n  const controls = interval === "requestAnimationFrame" ? useRafFn(update, { immediate: true }) : useIntervalFn(update, interval, { immediate: true });\n  if (exposeControls) {\n    return core_spreadValues$6({\n      now\n    }, controls);\n  } else {\n    return now;\n  }\n}\n\nfunction useOffsetPagination(options) {\n  const {\n    total = Infinity,\n    pageSize = 10,\n    page = 1,\n    onPageChange = noop$1,\n    onPageSizeChange = noop$1,\n    onPageCountChange = noop$1\n  } = options;\n  const currentPageSize = useClamp$1(pageSize, 1, Infinity);\n  const pageCount = computed(() => Math.ceil(unref(total) / unref(currentPageSize)));\n  const currentPage = useClamp$1(page, 1, pageCount);\n  const isFirstPage = computed(() => currentPage.value === 1);\n  const isLastPage = computed(() => currentPage.value === pageCount.value);\n  if (isRef(page))\n    biSyncRef(page, currentPage);\n  if (isRef(pageSize))\n    biSyncRef(pageSize, currentPageSize);\n  function prev() {\n    currentPage.value--;\n  }\n  function next() {\n    currentPage.value++;\n  }\n  const returnValue = {\n    currentPage,\n    currentPageSize,\n    pageCount,\n    isFirstPage,\n    isLastPage,\n    prev,\n    next\n  };\n  watch(currentPage, () => {\n    onPageChange(reactive(returnValue));\n  });\n  watch(currentPageSize, () => {\n    onPageSizeChange(reactive(returnValue));\n  });\n  watch(pageCount, () => {\n    onPageCountChange(reactive(returnValue));\n  });\n  return returnValue;\n}\n\nfunction useOnline(options = {}) {\n  const { isOnline } = useNetwork(options);\n  return isOnline;\n}\n\nfunction usePageLeave(options = {}) {\n  const { window = defaultWindow } = options;\n  const isLeft = ref(false);\n  const handler = (event) => {\n    if (!window)\n      return;\n    event = event || window.event;\n    const from = event.relatedTarget || event.toElement;\n    isLeft.value = !from;\n  };\n  if (window) {\n    useEventListener(window, "mouseout", handler, { passive: true });\n    useEventListener(window.document, "mouseleave", handler, { passive: true });\n    useEventListener(window.document, "mouseenter", handler, { passive: true });\n  }\n  return isLeft;\n}\n\nfunction useParallax(target, options = {}) {\n  const {\n    deviceOrientationTiltAdjust = (i) => i,\n    deviceOrientationRollAdjust = (i) => i,\n    mouseTiltAdjust = (i) => i,\n    mouseRollAdjust = (i) => i,\n    window = defaultWindow\n  } = options;\n  const orientation = reactive(useDeviceOrientation({ window }));\n  const {\n    elementX: x,\n    elementY: y,\n    elementWidth: width,\n    elementHeight: height\n  } = useMouseInElement(target, { handleOutside: false, window });\n  const source = computed(() => {\n    if (orientation.isSupported && (orientation.alpha != null && orientation.alpha !== 0 || orientation.gamma != null && orientation.gamma !== 0))\n      return "deviceOrientation";\n    return "mouse";\n  });\n  const roll = computed(() => {\n    if (source.value === "deviceOrientation") {\n      const value = -orientation.beta / 90;\n      return deviceOrientationRollAdjust(value);\n    } else {\n      const value = -(y.value - height.value / 2) / height.value;\n      return mouseRollAdjust(value);\n    }\n  });\n  const tilt = computed(() => {\n    if (source.value === "deviceOrientation") {\n      const value = orientation.gamma / 90;\n      return deviceOrientationTiltAdjust(value);\n    } else {\n      const value = (x.value - width.value / 2) / width.value;\n      return mouseTiltAdjust(value);\n    }\n  });\n  return { roll, tilt, source };\n}\n\nvar core_defProp$5 = Object.defineProperty;\nvar core_defProps$2 = Object.defineProperties;\nvar core_getOwnPropDescs$2 = Object.getOwnPropertyDescriptors;\nvar core_getOwnPropSymbols$5 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$5 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$5 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$5 = (obj, key, value) => key in obj ? core_defProp$5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$5 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$5.call(b, prop))\n      core_defNormalProp$5(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$5)\n    for (var prop of core_getOwnPropSymbols$5(b)) {\n      if (core_propIsEnum$5.call(b, prop))\n        core_defNormalProp$5(a, prop, b[prop]);\n    }\n  return a;\n};\nvar core_spreadProps$2 = (a, b) => core_defProps$2(a, core_getOwnPropDescs$2(b));\nconst defaultState = {\n  x: 0,\n  y: 0,\n  pointerId: 0,\n  pressure: 0,\n  tiltX: 0,\n  tiltY: 0,\n  width: 0,\n  height: 0,\n  twist: 0,\n  pointerType: null\n};\nconst keys = /* @__PURE__ */ (/* unused pure expression or super */ null && (Object.keys(defaultState)));\nfunction usePointer(options = {}) {\n  const {\n    target = defaultWindow\n  } = options;\n  const isInside = ref(false);\n  const state = ref(options.initialValue || {});\n  Object.assign(state.value, defaultState, state.value);\n  const handler = (event) => {\n    isInside.value = true;\n    if (options.pointerTypes && !options.pointerTypes.includes(event.pointerType))\n      return;\n    state.value = objectPick(event, keys, false);\n  };\n  if (target) {\n    useEventListener(target, "pointerdown", handler, { passive: true });\n    useEventListener(target, "pointermove", handler, { passive: true });\n    useEventListener(target, "pointerleave", () => isInside.value = false, { passive: true });\n  }\n  return core_spreadProps$2(core_spreadValues$5({}, toRefs(state)), {\n    isInside\n  });\n}\n\nvar SwipeDirection = /* @__PURE__ */ ((SwipeDirection2) => {\n  SwipeDirection2["UP"] = "UP";\n  SwipeDirection2["RIGHT"] = "RIGHT";\n  SwipeDirection2["DOWN"] = "DOWN";\n  SwipeDirection2["LEFT"] = "LEFT";\n  SwipeDirection2["NONE"] = "NONE";\n  return SwipeDirection2;\n})(SwipeDirection || {});\nfunction useSwipe(target, options = {}) {\n  const {\n    threshold = 50,\n    onSwipe,\n    onSwipeEnd,\n    onSwipeStart,\n    passive = true,\n    window = defaultWindow\n  } = options;\n  const coordsStart = reactive({ x: 0, y: 0 });\n  const coordsEnd = reactive({ x: 0, y: 0 });\n  const diffX = computed(() => coordsStart.x - coordsEnd.x);\n  const diffY = computed(() => coordsStart.y - coordsEnd.y);\n  const { max, abs } = Math;\n  const isThresholdExceeded = computed(() => max(abs(diffX.value), abs(diffY.value)) >= threshold);\n  const isSwiping = ref(false);\n  const direction = computed(() => {\n    if (!isThresholdExceeded.value)\n      return "NONE" /* NONE */;\n    if (abs(diffX.value) > abs(diffY.value)) {\n      return diffX.value > 0 ? "LEFT" /* LEFT */ : "RIGHT" /* RIGHT */;\n    } else {\n      return diffY.value > 0 ? "UP" /* UP */ : "DOWN" /* DOWN */;\n    }\n  });\n  const getTouchEventCoords = (e) => [e.touches[0].clientX, e.touches[0].clientY];\n  const updateCoordsStart = (x, y) => {\n    coordsStart.x = x;\n    coordsStart.y = y;\n  };\n  const updateCoordsEnd = (x, y) => {\n    coordsEnd.x = x;\n    coordsEnd.y = y;\n  };\n  let listenerOptions;\n  const isPassiveEventSupported = checkPassiveEventSupport(window == null ? void 0 : window.document);\n  if (!passive)\n    listenerOptions = isPassiveEventSupported ? { passive: false, capture: true } : { capture: true };\n  else\n    listenerOptions = isPassiveEventSupported ? { passive: true } : { capture: false };\n  const onTouchEnd = (e) => {\n    if (isSwiping.value)\n      onSwipeEnd == null ? void 0 : onSwipeEnd(e, direction.value);\n    isSwiping.value = false;\n  };\n  const stops = [\n    useEventListener(target, "touchstart", (e) => {\n      if (listenerOptions.capture && !listenerOptions.passive)\n        e.preventDefault();\n      const [x, y] = getTouchEventCoords(e);\n      updateCoordsStart(x, y);\n      updateCoordsEnd(x, y);\n      onSwipeStart == null ? void 0 : onSwipeStart(e);\n    }, listenerOptions),\n    useEventListener(target, "touchmove", (e) => {\n      const [x, y] = getTouchEventCoords(e);\n      updateCoordsEnd(x, y);\n      if (!isSwiping.value && isThresholdExceeded.value)\n        isSwiping.value = true;\n      if (isSwiping.value)\n        onSwipe == null ? void 0 : onSwipe(e);\n    }, listenerOptions),\n    useEventListener(target, "touchend", onTouchEnd, listenerOptions),\n    useEventListener(target, "touchcancel", onTouchEnd, listenerOptions)\n  ];\n  const stop = () => stops.forEach((s) => s());\n  return {\n    isPassiveEventSupported,\n    isSwiping,\n    direction,\n    coordsStart,\n    coordsEnd,\n    lengthX: diffX,\n    lengthY: diffY,\n    stop\n  };\n}\nfunction checkPassiveEventSupport(document) {\n  if (!document)\n    return false;\n  let supportsPassive = false;\n  const optionsBlock = {\n    get passive() {\n      supportsPassive = true;\n      return false;\n    }\n  };\n  document.addEventListener("x", noop, optionsBlock);\n  document.removeEventListener("x", noop);\n  return supportsPassive;\n}\n\nfunction usePointerSwipe(target, options = {}) {\n  const targetRef = ref(target);\n  const {\n    threshold = 50,\n    onSwipe,\n    onSwipeEnd,\n    onSwipeStart\n  } = options;\n  const posStart = reactive({ x: 0, y: 0 });\n  const updatePosStart = (x, y) => {\n    posStart.x = x;\n    posStart.y = y;\n  };\n  const posEnd = reactive({ x: 0, y: 0 });\n  const updatePosEnd = (x, y) => {\n    posEnd.x = x;\n    posEnd.y = y;\n  };\n  const distanceX = computed(() => posStart.x - posEnd.x);\n  const distanceY = computed(() => posStart.y - posEnd.y);\n  const { max, abs } = Math;\n  const isThresholdExceeded = computed(() => max(abs(distanceX.value), abs(distanceY.value)) >= threshold);\n  const isSwiping = ref(false);\n  const isPointerDown = ref(false);\n  const direction = computed(() => {\n    if (!isThresholdExceeded.value)\n      return SwipeDirection.NONE;\n    if (abs(distanceX.value) > abs(distanceY.value)) {\n      return distanceX.value > 0 ? SwipeDirection.LEFT : SwipeDirection.RIGHT;\n    } else {\n      return distanceY.value > 0 ? SwipeDirection.UP : SwipeDirection.DOWN;\n    }\n  });\n  const filterEvent = (e) => {\n    if (options.pointerTypes)\n      return options.pointerTypes.includes(e.pointerType);\n    return true;\n  };\n  const stops = [\n    useEventListener(target, "pointerdown", (e) => {\n      var _a, _b;\n      if (!filterEvent(e))\n        return;\n      isPointerDown.value = true;\n      (_b = (_a = targetRef.value) == null ? void 0 : _a.style) == null ? void 0 : _b.setProperty("touch-action", "none");\n      const eventTarget = e.target;\n      eventTarget == null ? void 0 : eventTarget.setPointerCapture(e.pointerId);\n      const { clientX: x, clientY: y } = e;\n      updatePosStart(x, y);\n      updatePosEnd(x, y);\n      onSwipeStart == null ? void 0 : onSwipeStart(e);\n    }),\n    useEventListener(target, "pointermove", (e) => {\n      if (!filterEvent(e))\n        return;\n      if (!isPointerDown.value)\n        return;\n      const { clientX: x, clientY: y } = e;\n      updatePosEnd(x, y);\n      if (!isSwiping.value && isThresholdExceeded.value)\n        isSwiping.value = true;\n      if (isSwiping.value)\n        onSwipe == null ? void 0 : onSwipe(e);\n    }),\n    useEventListener(target, "pointerup", (e) => {\n      var _a, _b;\n      if (!filterEvent(e))\n        return;\n      if (isSwiping.value)\n        onSwipeEnd == null ? void 0 : onSwipeEnd(e, direction.value);\n      isPointerDown.value = false;\n      isSwiping.value = false;\n      (_b = (_a = targetRef.value) == null ? void 0 : _a.style) == null ? void 0 : _b.setProperty("touch-action", "initial");\n    })\n  ];\n  const stop = () => stops.forEach((s) => s());\n  return {\n    isSwiping: readonly(isSwiping),\n    direction: readonly(direction),\n    posStart: readonly(posStart),\n    posEnd: readonly(posEnd),\n    distanceX,\n    distanceY,\n    stop\n  };\n}\n\nfunction usePreferredColorScheme(options) {\n  const isLight = useMediaQuery("(prefers-color-scheme: light)", options);\n  const isDark = useMediaQuery("(prefers-color-scheme: dark)", options);\n  return computed(() => {\n    if (isDark.value)\n      return "dark";\n    if (isLight.value)\n      return "light";\n    return "no-preference";\n  });\n}\n\nfunction usePreferredLanguages(options = {}) {\n  const { window = defaultWindow } = options;\n  if (!window)\n    return ref(["en"]);\n  const navigator = window.navigator;\n  const value = ref(navigator.languages);\n  useEventListener(window, "languagechange", () => {\n    value.value = navigator.languages;\n  });\n  return value;\n}\n\nconst topVarName = "--vueuse-safe-area-top";\nconst rightVarName = "--vueuse-safe-area-right";\nconst bottomVarName = "--vueuse-safe-area-bottom";\nconst leftVarName = "--vueuse-safe-area-left";\nfunction useScreenSafeArea() {\n  const top = ref("");\n  const right = ref("");\n  const bottom = ref("");\n  const left = ref("");\n  if (isClient) {\n    const topCssVar = useCssVar(topVarName);\n    const rightCssVar = useCssVar(rightVarName);\n    const bottomCssVar = useCssVar(bottomVarName);\n    const leftCssVar = useCssVar(leftVarName);\n    topCssVar.value = "env(safe-area-inset-top, 0px)";\n    rightCssVar.value = "env(safe-area-inset-right, 0px)";\n    bottomCssVar.value = "env(safe-area-inset-bottom, 0px)";\n    leftCssVar.value = "env(safe-area-inset-left, 0px)";\n    update();\n    useEventListener("resize", useDebounceFn(update));\n  }\n  function update() {\n    top.value = core_getValue(topVarName);\n    right.value = core_getValue(rightVarName);\n    bottom.value = core_getValue(bottomVarName);\n    left.value = core_getValue(leftVarName);\n  }\n  return {\n    top,\n    right,\n    bottom,\n    left,\n    update\n  };\n}\nfunction core_getValue(position) {\n  return getComputedStyle(document.documentElement).getPropertyValue(position);\n}\n\nfunction useScriptTag(src, onLoaded = noop, options = {}) {\n  const {\n    immediate = true,\n    manual = false,\n    type = "text/javascript",\n    async = true,\n    crossOrigin,\n    referrerPolicy,\n    noModule,\n    defer,\n    document = defaultDocument,\n    attrs = {}\n  } = options;\n  const scriptTag = ref(null);\n  let _promise = null;\n  const loadScript = (waitForScriptLoad) => new Promise((resolve, reject) => {\n    const resolveWithElement = (el2) => {\n      scriptTag.value = el2;\n      resolve(el2);\n      return el2;\n    };\n    if (!document) {\n      resolve(false);\n      return;\n    }\n    let shouldAppend = false;\n    let el = document.querySelector(`script[src="${src}"]`);\n    if (!el) {\n      el = document.createElement("script");\n      el.type = type;\n      el.async = async;\n      el.src = unref(src);\n      if (defer)\n        el.defer = defer;\n      if (crossOrigin)\n        el.crossOrigin = crossOrigin;\n      if (noModule)\n        el.noModule = noModule;\n      if (referrerPolicy)\n        el.referrerPolicy = referrerPolicy;\n      for (const attr in attrs)\n        el[attr] = attrs[attr];\n      shouldAppend = true;\n    } else if (el.hasAttribute("data-loaded")) {\n      resolveWithElement(el);\n    }\n    el.addEventListener("error", (event) => reject(event));\n    el.addEventListener("abort", (event) => reject(event));\n    el.addEventListener("load", () => {\n      el.setAttribute("data-loaded", "true");\n      onLoaded(el);\n      resolveWithElement(el);\n    });\n    if (shouldAppend)\n      el = document.head.appendChild(el);\n    if (!waitForScriptLoad)\n      resolveWithElement(el);\n  });\n  const load = (waitForScriptLoad = true) => {\n    if (!_promise)\n      _promise = loadScript(waitForScriptLoad);\n    return _promise;\n  };\n  const unload = () => {\n    if (!document)\n      return;\n    _promise = null;\n    if (scriptTag.value)\n      scriptTag.value = null;\n    const el = document.querySelector(`script[src="${src}"]`);\n    if (el)\n      document.head.removeChild(el);\n  };\n  if (immediate && !manual)\n    tryOnMounted(load);\n  if (!manual)\n    tryOnUnmounted(unload);\n  return { scriptTag, load, unload };\n}\n\nvar core_a, _b;\nfunction preventDefault(rawEvent) {\n  const e = rawEvent || window.event;\n  if (e.touches.length > 1)\n    return true;\n  if (e.preventDefault)\n    e.preventDefault();\n  return false;\n}\nconst isIOS = shared_isClient && (window == null ? void 0 : window.navigator) && ((core_a = window == null ? void 0 : window.navigator) == null ? void 0 : core_a.platform) && /iP(ad|hone|od)/.test((_b = window == null ? void 0 : window.navigator) == null ? void 0 : _b.platform);\nfunction useScrollLock(element, initialState = false) {\n  const isLocked = ref(initialState);\n  let touchMoveListener = null;\n  let initialOverflow;\n  const lock = () => {\n    const ele = unref(element);\n    if (!ele || isLocked.value)\n      return;\n    initialOverflow = ele.style.overflow;\n    if (isIOS) {\n      touchMoveListener = useEventListener(document, "touchmove", preventDefault, { passive: false });\n    }\n    ele.style.overflow = "hidden";\n    isLocked.value = true;\n  };\n  const unlock = () => {\n    const ele = unref(element);\n    if (!ele || !isLocked.value)\n      return;\n    isIOS && (touchMoveListener == null ? void 0 : touchMoveListener());\n    ele.style.overflow = initialOverflow;\n    isLocked.value = false;\n  };\n  return computed({\n    get() {\n      return isLocked.value;\n    },\n    set(v) {\n      if (v)\n        lock();\n      else\n        unlock();\n    }\n  });\n}\n\nfunction useSessionStorage(key, initialValue, options = {}) {\n  const { window = defaultWindow } = options;\n  return useStorage(key, initialValue, window == null ? void 0 : window.sessionStorage, options);\n}\n\nvar core_defProp$4 = Object.defineProperty;\nvar core_getOwnPropSymbols$4 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$4 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$4 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$4 = (obj, key, value) => key in obj ? core_defProp$4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$4 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$4.call(b, prop))\n      core_defNormalProp$4(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$4)\n    for (var prop of core_getOwnPropSymbols$4(b)) {\n      if (core_propIsEnum$4.call(b, prop))\n        core_defNormalProp$4(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useShare(shareOptions = {}, options = {}) {\n  const { navigator = defaultNavigator } = options;\n  const _navigator = navigator;\n  const isSupported = _navigator && "canShare" in _navigator;\n  const share = async (overrideOptions = {}) => {\n    if (isSupported) {\n      const data = core_spreadValues$4(core_spreadValues$4({}, unref(shareOptions)), unref(overrideOptions));\n      let granted = true;\n      if (data.files && _navigator.canShare)\n        granted = _navigator.canShare({ files: data.files });\n      if (granted)\n        return _navigator.share(data);\n    }\n  };\n  return {\n    isSupported,\n    share\n  };\n}\n\nfunction useSpeechRecognition(options = {}) {\n  const {\n    interimResults = true,\n    continuous = true,\n    window = defaultWindow\n  } = options;\n  const lang = ref(options.lang || "en-US");\n  const isListening = ref(false);\n  const isFinal = ref(false);\n  const result = ref("");\n  const error = shallowRef(void 0);\n  const toggle = (value = !isListening.value) => {\n    isListening.value = value;\n  };\n  const start = () => {\n    isListening.value = true;\n  };\n  const stop = () => {\n    isListening.value = false;\n  };\n  const SpeechRecognition = window && (window.SpeechRecognition || window.webkitSpeechRecognition);\n  const isSupported = Boolean(SpeechRecognition);\n  let recognition;\n  if (isSupported) {\n    recognition = new SpeechRecognition();\n    recognition.continuous = continuous;\n    recognition.interimResults = interimResults;\n    recognition.lang = unref(lang);\n    recognition.onstart = () => {\n      isFinal.value = false;\n    };\n    watch(lang, (lang2) => {\n      if (recognition && !isListening.value)\n        recognition.lang = lang2;\n    });\n    recognition.onresult = (event) => {\n      const transcript = Array.from(event.results).map((result2) => {\n        isFinal.value = result2.isFinal;\n        return result2[0];\n      }).map((result2) => result2.transcript).join("");\n      result.value = transcript;\n      error.value = void 0;\n    };\n    recognition.onerror = (event) => {\n      error.value = event;\n    };\n    recognition.onend = () => {\n      isListening.value = false;\n      recognition.lang = unref(lang);\n    };\n    watch(isListening, () => {\n      if (isListening.value)\n        recognition.start();\n      else\n        recognition.stop();\n    });\n  }\n  tryOnScopeDispose(() => {\n    isListening.value = false;\n  });\n  return {\n    isSupported,\n    isListening,\n    isFinal,\n    recognition,\n    result,\n    error,\n    toggle,\n    start,\n    stop\n  };\n}\n\nfunction useSpeechSynthesis(text, options = {}) {\n  var _a, _b;\n  const {\n    pitch = 1,\n    rate = 1,\n    volume = 1,\n    window = defaultWindow\n  } = options;\n  const synth = window && window.speechSynthesis;\n  const isSupported = Boolean(synth);\n  const isPlaying = ref(false);\n  const status = ref("init");\n  const voiceInfo = {\n    lang: ((_a = options.voice) == null ? void 0 : _a.lang) || "default",\n    name: ((_b = options.voice) == null ? void 0 : _b.name) || ""\n  };\n  const spokenText = ref(text || "");\n  const lang = ref(options.lang || "en-US");\n  const error = shallowRef(void 0);\n  const toggle = (value = !isPlaying.value) => {\n    isPlaying.value = value;\n  };\n  const bindEventsForUtterance = (utterance2) => {\n    utterance2.lang = unref(lang);\n    options.voice && (utterance2.voice = options.voice);\n    utterance2.pitch = pitch;\n    utterance2.rate = rate;\n    utterance2.volume = volume;\n    utterance2.onstart = () => {\n      isPlaying.value = true;\n      status.value = "play";\n    };\n    utterance2.onpause = () => {\n      isPlaying.value = false;\n      status.value = "pause";\n    };\n    utterance2.onresume = () => {\n      isPlaying.value = true;\n      status.value = "play";\n    };\n    utterance2.onend = () => {\n      isPlaying.value = false;\n      status.value = "end";\n    };\n    utterance2.onerror = (event) => {\n      error.value = event;\n    };\n    utterance2.onend = () => {\n      isPlaying.value = false;\n      utterance2.lang = unref(lang);\n    };\n  };\n  const utterance = computed(() => {\n    isPlaying.value = false;\n    status.value = "init";\n    const newUtterance = new SpeechSynthesisUtterance(spokenText.value);\n    bindEventsForUtterance(newUtterance);\n    return newUtterance;\n  });\n  const speak = () => {\n    synth.cancel();\n    utterance && synth.speak(utterance.value);\n  };\n  if (isSupported) {\n    bindEventsForUtterance(utterance.value);\n    watch(lang, (lang2) => {\n      if (utterance.value && !isPlaying.value)\n        utterance.value.lang = lang2;\n    });\n    watch(isPlaying, () => {\n      if (isPlaying.value)\n        synth.resume();\n      else\n        synth.pause();\n    });\n  }\n  tryOnScopeDispose(() => {\n    isPlaying.value = false;\n  });\n  return {\n    isSupported,\n    isPlaying,\n    status,\n    voiceInfo,\n    utterance,\n    error,\n    toggle,\n    speak\n  };\n}\n\nfunction useStorageAsync(key, initialValue, storage, options = {}) {\n  var _a;\n  const {\n    flush = "pre",\n    deep = true,\n    listenToStorageChanges = true,\n    writeDefaults = true,\n    shallow,\n    window = defaultWindow,\n    eventFilter,\n    onError = (e) => {\n      console.error(e);\n    }\n  } = options;\n  const rawInit = unref(initialValue);\n  const type = guessSerializerType(rawInit);\n  const data = (shallow ? shallowRef : ref)(initialValue);\n  const serializer = (_a = options.serializer) != null ? _a : StorageSerializers[type];\n  if (!storage) {\n    try {\n      storage = getSSRHandler("getDefaultStorage", () => {\n        var _a2;\n        return (_a2 = defaultWindow) == null ? void 0 : _a2.localStorage;\n      })();\n    } catch (e) {\n      onError(e);\n    }\n  }\n  async function read(event) {\n    if (!storage || event && event.key !== key)\n      return;\n    try {\n      const rawValue = event ? event.newValue : await storage.getItem(key);\n      if (rawValue == null) {\n        data.value = rawInit;\n        if (writeDefaults && rawInit !== null)\n          await storage.setItem(key, await serializer.write(rawInit));\n      } else {\n        data.value = await serializer.read(rawValue);\n      }\n    } catch (e) {\n      onError(e);\n    }\n  }\n  read();\n  if (window && listenToStorageChanges)\n    useEventListener(window, "storage", (e) => setTimeout(() => read(e), 0));\n  if (storage) {\n    watchWithFilter(data, async () => {\n      try {\n        if (data.value == null)\n          await storage.removeItem(key);\n        else\n          await storage.setItem(key, await serializer.write(data.value));\n      } catch (e) {\n        onError(e);\n      }\n    }, {\n      flush,\n      deep,\n      eventFilter\n    });\n  }\n  return data;\n}\n\nlet _id = 0;\nfunction useStyleTag(css, options = {}) {\n  const isLoaded = ref(false);\n  const {\n    document = defaultDocument,\n    immediate = true,\n    manual = false,\n    id = `vueuse_styletag_${++_id}`\n  } = options;\n  const cssRef = ref(css);\n  let stop = () => {\n  };\n  const load = () => {\n    if (!document)\n      return;\n    const el = document.getElementById(id) || document.createElement("style");\n    el.type = "text/css";\n    el.id = id;\n    if (options.media)\n      el.media = options.media;\n    document.head.appendChild(el);\n    if (isLoaded.value)\n      return;\n    stop = watch(cssRef, (value) => {\n      el.innerText = value;\n    }, { immediate: true });\n    isLoaded.value = true;\n  };\n  const unload = () => {\n    if (!document || !isLoaded.value)\n      return;\n    stop();\n    document.head.removeChild(document.getElementById(id));\n    isLoaded.value = false;\n  };\n  if (immediate && !manual)\n    load();\n  if (!manual)\n    tryOnScopeDispose(unload);\n  return {\n    id,\n    css: cssRef,\n    unload,\n    load,\n    isLoaded: readonly(isLoaded)\n  };\n}\n\nfunction useTemplateRefsList() {\n  const refs = ref([]);\n  refs.value.set = (el) => {\n    if (el)\n      refs.value.push(el);\n  };\n  onBeforeUpdate(() => {\n    refs.value.length = 0;\n  });\n  return refs;\n}\n\nvar core_defProp$3 = Object.defineProperty;\nvar core_defProps$1 = Object.defineProperties;\nvar core_getOwnPropDescs$1 = Object.getOwnPropertyDescriptors;\nvar core_getOwnPropSymbols$3 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$3 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$3 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$3 = (obj, key, value) => key in obj ? core_defProp$3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$3 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$3.call(b, prop))\n      core_defNormalProp$3(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$3)\n    for (var prop of core_getOwnPropSymbols$3(b)) {\n      if (core_propIsEnum$3.call(b, prop))\n        core_defNormalProp$3(a, prop, b[prop]);\n    }\n  return a;\n};\nvar core_spreadProps$1 = (a, b) => core_defProps$1(a, core_getOwnPropDescs$1(b));\nconst initialRect = {\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0,\n  height: 0,\n  width: 0\n};\nconst initialState = core_spreadValues$3({\n  text: ""\n}, initialRect);\nfunction getRectFromSelection(selection) {\n  if (!selection || selection.rangeCount < 1)\n    return initialRect;\n  const range = selection.getRangeAt(0);\n  const { height, width, top, left, right, bottom } = range.getBoundingClientRect();\n  return {\n    height,\n    width,\n    top,\n    left,\n    right,\n    bottom\n  };\n}\nfunction useTextSelection(element) {\n  var _a;\n  const state = ref(initialState);\n  if (!((_a = defaultWindow) == null ? void 0 : _a.getSelection))\n    return state;\n  const onMouseup = () => {\n    var _a2;\n    const text = (_a2 = window.getSelection()) == null ? void 0 : _a2.toString();\n    if (text) {\n      const rect = getRectFromSelection(window.getSelection());\n      state.value = core_spreadProps$1(core_spreadValues$3(core_spreadValues$3({}, state.value), rect), {\n        text\n      });\n    }\n  };\n  const onMousedown = () => {\n    var _a2;\n    state.value.text && (state.value = initialState);\n    (_a2 = window.getSelection()) == null ? void 0 : _a2.removeAllRanges();\n  };\n  useEventListener(element != null ? element : document, "mouseup", onMouseup);\n  useEventListener(document, "mousedown", onMousedown);\n  return state;\n}\n\nvar core_defProp$2 = Object.defineProperty;\nvar core_defProps = Object.defineProperties;\nvar core_getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar core_getOwnPropSymbols$2 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$2 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$2 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$2 = (obj, key, value) => key in obj ? core_defProp$2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$2 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$2.call(b, prop))\n      core_defNormalProp$2(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$2)\n    for (var prop of core_getOwnPropSymbols$2(b)) {\n      if (core_propIsEnum$2.call(b, prop))\n        core_defNormalProp$2(a, prop, b[prop]);\n    }\n  return a;\n};\nvar core_spreadProps = (a, b) => core_defProps(a, core_getOwnPropDescs(b));\nfunction useThrottledRefHistory(source, options = {}) {\n  const { throttle = 200, trailing = true } = options;\n  const filter = throttleFilter(throttle, trailing);\n  const history = useRefHistory(source, core_spreadProps(core_spreadValues$2({}, options), { eventFilter: filter }));\n  return core_spreadValues$2({}, history);\n}\n\nvar core_defProp$1 = Object.defineProperty;\nvar core_getOwnPropSymbols$1 = Object.getOwnPropertySymbols;\nvar core_hasOwnProp$1 = Object.prototype.hasOwnProperty;\nvar core_propIsEnum$1 = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp$1 = (obj, key, value) => key in obj ? core_defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues$1 = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp$1.call(b, prop))\n      core_defNormalProp$1(a, prop, b[prop]);\n  if (core_getOwnPropSymbols$1)\n    for (var prop of core_getOwnPropSymbols$1(b)) {\n      if (core_propIsEnum$1.call(b, prop))\n        core_defNormalProp$1(a, prop, b[prop]);\n    }\n  return a;\n};\nvar core_objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (core_hasOwnProp$1.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && core_getOwnPropSymbols$1)\n    for (var prop of core_getOwnPropSymbols$1(source)) {\n      if (exclude.indexOf(prop) < 0 && core_propIsEnum$1.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nconst UNITS = [\n  { max: 6e4, value: 1e3, name: "second" },\n  { max: 276e4, value: 6e4, name: "minute" },\n  { max: 72e6, value: 36e5, name: "hour" },\n  { max: 5184e5, value: 864e5, name: "day" },\n  { max: 24192e5, value: 6048e5, name: "week" },\n  { max: 28512e6, value: 2592e6, name: "month" },\n  { max: Infinity, value: 31536e6, name: "year" }\n];\nconst DEFAULT_MESSAGES = {\n  justNow: "just now",\n  past: (n) => n.match(/\\d/) ? `${n} ago` : n,\n  future: (n) => n.match(/\\d/) ? `in ${n}` : n,\n  month: (n, past) => n === 1 ? past ? "last month" : "next month" : `${n} month${n > 1 ? "s" : ""}`,\n  year: (n, past) => n === 1 ? past ? "last year" : "next year" : `${n} year${n > 1 ? "s" : ""}`,\n  day: (n, past) => n === 1 ? past ? "yesterday" : "tomorrow" : `${n} day${n > 1 ? "s" : ""}`,\n  week: (n, past) => n === 1 ? past ? "last week" : "next week" : `${n} week${n > 1 ? "s" : ""}`,\n  hour: (n) => `${n} hour${n > 1 ? "s" : ""}`,\n  minute: (n) => `${n} minute${n > 1 ? "s" : ""}`,\n  second: (n) => `${n} second${n > 1 ? "s" : ""}`\n};\nconst DEFAULT_FORMATTER = (date) => date.toISOString().slice(0, 10);\nfunction useTimeAgo(time, options = {}) {\n  const {\n    controls: exposeControls = false,\n    max,\n    updateInterval = 3e4,\n    messages = DEFAULT_MESSAGES,\n    fullDateFormatter = DEFAULT_FORMATTER\n  } = options;\n  const { abs, round } = Math;\n  const _a = useNow({ interval: updateInterval, controls: true }), { now } = _a, controls = core_objRest(_a, ["now"]);\n  function getTimeago(from, now2) {\n    var _a2;\n    const diff = +now2 - +from;\n    const absDiff = abs(diff);\n    if (absDiff < 6e4)\n      return messages.justNow;\n    if (typeof max === "number" && absDiff > max)\n      return fullDateFormatter(new Date(from));\n    if (typeof max === "string") {\n      const unitMax = (_a2 = UNITS.find((i) => i.name === max)) == null ? void 0 : _a2.max;\n      if (unitMax && absDiff > unitMax)\n        return fullDateFormatter(new Date(from));\n    }\n    for (const unit of UNITS) {\n      if (absDiff < unit.max)\n        return format(diff, unit);\n    }\n  }\n  function applyFormat(name, val, isPast) {\n    const formatter = messages[name];\n    if (typeof formatter === "function")\n      return formatter(val, isPast);\n    return formatter.replace("{0}", val.toString());\n  }\n  function format(diff, unit) {\n    const val = round(abs(diff) / unit.value);\n    const past = diff > 0;\n    const str = applyFormat(unit.name, val, past);\n    return applyFormat(past ? "past" : "future", str, past);\n  }\n  const timeAgo = computed(() => getTimeago(new Date(unref(time)), unref(now.value)));\n  if (exposeControls) {\n    return core_spreadValues$1({\n      timeAgo\n    }, controls);\n  } else {\n    return timeAgo;\n  }\n}\n\nvar core_defProp = Object.defineProperty;\nvar core_getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar core_hasOwnProp = Object.prototype.hasOwnProperty;\nvar core_propIsEnum = Object.prototype.propertyIsEnumerable;\nvar core_defNormalProp = (obj, key, value) => key in obj ? core_defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar core_spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (core_hasOwnProp.call(b, prop))\n      core_defNormalProp(a, prop, b[prop]);\n  if (core_getOwnPropSymbols)\n    for (var prop of core_getOwnPropSymbols(b)) {\n      if (core_propIsEnum.call(b, prop))\n        core_defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nfunction useTimestamp(options = {}) {\n  const {\n    controls: exposeControls = false,\n    offset = 0,\n    immediate = true,\n    interval = "requestAnimationFrame"\n  } = options;\n  const ts = ref(timestamp() + offset);\n  const update = () => ts.value = timestamp() + offset;\n  const controls = interval === "requestAnimationFrame" ? useRafFn(update, { immediate }) : useIntervalFn(update, interval, { immediate });\n  if (exposeControls) {\n    return core_spreadValues({\n      timestamp: ts\n    }, controls);\n  } else {\n    return ts;\n  }\n}\n\nfunction useTitle(newTitle = null, options = {}) {\n  var _a, _b;\n  const {\n    document = defaultDocument,\n    observe = false,\n    titleTemplate = "%s"\n  } = options;\n  const title = ref((_a = newTitle != null ? newTitle : document == null ? void 0 : document.title) != null ? _a : null);\n  watch(title, (t, o) => {\n    if (isString(t) && t !== o && document)\n      document.title = titleTemplate.replace("%s", t);\n  }, { immediate: true });\n  if (observe && document) {\n    useMutationObserver((_b = document.head) == null ? void 0 : _b.querySelector("title"), () => {\n      if (document && document.title !== title.value)\n        title.value = titleTemplate.replace("%s", document.title);\n    }, { childList: true });\n  }\n  return title;\n}\n\nconst TransitionPresets = {\n  linear: shared_identity,\n  easeInSine: [0.12, 0, 0.39, 0],\n  easeOutSine: [0.61, 1, 0.88, 1],\n  easeInOutSine: [0.37, 0, 0.63, 1],\n  easeInQuad: [0.11, 0, 0.5, 0],\n  easeOutQuad: [0.5, 1, 0.89, 1],\n  easeInOutQuad: [0.45, 0, 0.55, 1],\n  easeInCubic: [0.32, 0, 0.67, 0],\n  easeOutCubic: [0.33, 1, 0.68, 1],\n  easeInOutCubic: [0.65, 0, 0.35, 1],\n  easeInQuart: [0.5, 0, 0.75, 0],\n  easeOutQuart: [0.25, 1, 0.5, 1],\n  easeInOutQuart: [0.76, 0, 0.24, 1],\n  easeInQuint: [0.64, 0, 0.78, 0],\n  easeOutQuint: [0.22, 1, 0.36, 1],\n  easeInOutQuint: [0.83, 0, 0.17, 1],\n  easeInExpo: [0.7, 0, 0.84, 0],\n  easeOutExpo: [0.16, 1, 0.3, 1],\n  easeInOutExpo: [0.87, 0, 0.13, 1],\n  easeInCirc: [0.55, 0, 1, 0.45],\n  easeOutCirc: [0, 0.55, 0.45, 1],\n  easeInOutCirc: [0.85, 0, 0.15, 1],\n  easeInBack: [0.36, 0, 0.66, -0.56],\n  easeOutBack: [0.34, 1.56, 0.64, 1],\n  easeInOutBack: [0.68, -0.6, 0.32, 1.6]\n};\nfunction createEasingFunction([p0, p1, p2, p3]) {\n  const a = (a1, a2) => 1 - 3 * a2 + 3 * a1;\n  const b = (a1, a2) => 3 * a2 - 6 * a1;\n  const c = (a1) => 3 * a1;\n  const calcBezier = (t, a1, a2) => ((a(a1, a2) * t + b(a1, a2)) * t + c(a1)) * t;\n  const getSlope = (t, a1, a2) => 3 * a(a1, a2) * t * t + 2 * b(a1, a2) * t + c(a1);\n  const getTforX = (x) => {\n    let aGuessT = x;\n    for (let i = 0; i < 4; ++i) {\n      const currentSlope = getSlope(aGuessT, p0, p2);\n      if (currentSlope === 0)\n        return aGuessT;\n      const currentX = calcBezier(aGuessT, p0, p2) - x;\n      aGuessT -= currentX / currentSlope;\n    }\n    return aGuessT;\n  };\n  return (x) => p0 === p1 && p2 === p3 ? x : calcBezier(getTforX(x), p1, p3);\n}\nfunction useTransition(source, options = {}) {\n  const {\n    delay = 0,\n    disabled = false,\n    duration = 1e3,\n    onFinished = noop,\n    onStarted = noop,\n    transition = identity\n  } = options;\n  const currentTransition = computed(() => {\n    const t = unref(transition);\n    return isFunction(t) ? t : createEasingFunction(t);\n  });\n  const sourceValue = computed(() => {\n    const s = unref(source);\n    return isNumber(s) ? s : s.map(unref);\n  });\n  const sourceVector = computed(() => isNumber(sourceValue.value) ? [sourceValue.value] : sourceValue.value);\n  const outputVector = ref(sourceVector.value.slice(0));\n  let currentDuration;\n  let diffVector;\n  let endAt;\n  let startAt;\n  let startVector;\n  const { resume, pause } = useRafFn(() => {\n    const now = Date.now();\n    const progress = clamp(1 - (endAt - now) / currentDuration, 0, 1);\n    outputVector.value = startVector.map((val, i) => {\n      var _a;\n      return val + ((_a = diffVector[i]) != null ? _a : 0) * currentTransition.value(progress);\n    });\n    if (progress >= 1) {\n      pause();\n      onFinished();\n    }\n  }, { immediate: false });\n  const start = () => {\n    pause();\n    currentDuration = unref(duration);\n    diffVector = outputVector.value.map((n, i) => {\n      var _a, _b;\n      return ((_a = sourceVector.value[i]) != null ? _a : 0) - ((_b = outputVector.value[i]) != null ? _b : 0);\n    });\n    startVector = outputVector.value.slice(0);\n    startAt = Date.now();\n    endAt = startAt + currentDuration;\n    resume();\n    onStarted();\n  };\n  const timeout = useTimeoutFn(start, delay, { immediate: false });\n  watch(sourceVector, () => {\n    if (unref(disabled)) {\n      outputVector.value = sourceVector.value.slice(0);\n    } else {\n      if (unref(delay) <= 0)\n        start();\n      else\n        timeout.start();\n    }\n  }, { deep: true });\n  return computed(() => {\n    const targetVector = unref(disabled) ? sourceVector : outputVector;\n    return isNumber(sourceValue.value) ? targetVector.value[0] : targetVector.value;\n  });\n}\n\nfunction useUrlSearchParams(mode = "history", options = {}) {\n  const {\n    initialValue = {},\n    removeNullishValues = true,\n    removeFalsyValues = false,\n    window = defaultWindow\n  } = options;\n  if (!window)\n    return reactive(initialValue);\n  const state = reactive(initialValue);\n  function getRawParams() {\n    if (mode === "history") {\n      return window.location.search || "";\n    } else if (mode === "hash") {\n      const hash = window.location.hash || "";\n      const index = hash.indexOf("?");\n      return index > 0 ? hash.slice(index) : "";\n    } else {\n      return (window.location.hash || "").replace(/^#/, "");\n    }\n  }\n  function constructQuery(params) {\n    const stringified = params.toString();\n    if (mode === "history")\n      return `${stringified ? `?${stringified}` : ""}${location.hash || ""}`;\n    if (mode === "hash-params")\n      return `${location.search || ""}${stringified ? `#${stringified}` : ""}`;\n    const hash = window.location.hash || "#";\n    const index = hash.indexOf("?");\n    if (index > 0)\n      return `${hash.slice(0, index)}${stringified ? `?${stringified}` : ""}`;\n    return `${hash}${stringified ? `?${stringified}` : ""}`;\n  }\n  function read() {\n    return new URLSearchParams(getRawParams());\n  }\n  function updateState(params) {\n    const unusedKeys = new Set(Object.keys(state));\n    for (const key of params.keys()) {\n      const paramsForKey = params.getAll(key);\n      state[key] = paramsForKey.length > 1 ? paramsForKey : params.get(key) || "";\n      unusedKeys.delete(key);\n    }\n    Array.from(unusedKeys).forEach((key) => delete state[key]);\n  }\n  const { pause, resume } = pausableWatch(state, () => {\n    const params = new URLSearchParams("");\n    Object.keys(state).forEach((key) => {\n      const mapEntry = state[key];\n      if (Array.isArray(mapEntry))\n        mapEntry.forEach((value) => params.append(key, value));\n      else if (removeNullishValues && mapEntry == null)\n        params.delete(key);\n      else if (removeFalsyValues && !mapEntry)\n        params.delete(key);\n      else\n        params.set(key, mapEntry);\n    });\n    write(params);\n  }, { deep: true });\n  function write(params, shouldUpdate) {\n    pause();\n    if (shouldUpdate)\n      updateState(params);\n    window.history.replaceState({}, "", window.location.pathname + constructQuery(params));\n    resume();\n  }\n  function onChanged() {\n    write(read(), true);\n  }\n  useEventListener(window, "popstate", onChanged, false);\n  if (mode !== "history")\n    useEventListener(window, "hashchange", onChanged, false);\n  updateState(read());\n  return state;\n}\n\nfunction useUserMedia(options = {}) {\n  var _a, _b, _c;\n  const enabled = ref((_a = options.enabled) != null ? _a : false);\n  const autoSwitch = ref((_b = options.autoSwitch) != null ? _b : true);\n  const videoDeviceId = ref(options.videoDeviceId);\n  const audioDeviceId = ref(options.audioDeviceId);\n  const { navigator = defaultNavigator } = options;\n  const isSupported = Boolean((_c = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _c.getUserMedia);\n  const stream = shallowRef();\n  function getDeviceOptions(device) {\n    if (device.value === "none" || device.value === false)\n      return false;\n    if (device.value == null)\n      return true;\n    return {\n      deviceId: device.value\n    };\n  }\n  async function _start() {\n    if (!isSupported || stream.value)\n      return;\n    stream.value = await navigator.mediaDevices.getUserMedia({\n      video: getDeviceOptions(videoDeviceId),\n      audio: getDeviceOptions(audioDeviceId)\n    });\n    return stream.value;\n  }\n  async function _stop() {\n    var _a2;\n    (_a2 = stream.value) == null ? void 0 : _a2.getTracks().forEach((t) => t.stop());\n    stream.value = void 0;\n  }\n  function stop() {\n    _stop();\n    enabled.value = false;\n  }\n  async function start() {\n    await _start();\n    if (stream.value)\n      enabled.value = true;\n    return stream.value;\n  }\n  async function restart() {\n    _stop();\n    return await start();\n  }\n  watch(enabled, (v) => {\n    if (v)\n      _start();\n    else\n      _stop();\n  }, { immediate: true });\n  watch([videoDeviceId, audioDeviceId], () => {\n    if (autoSwitch.value && stream.value)\n      restart();\n  }, { immediate: true });\n  return {\n    isSupported,\n    stream,\n    start,\n    stop,\n    restart,\n    videoDeviceId,\n    audioDeviceId,\n    enabled,\n    autoSwitch\n  };\n}\n\nfunction useVModel(props, key, emit, options = {}) {\n  var _a, _b, _c;\n  const {\n    passive = false,\n    eventName,\n    deep = false\n  } = options;\n  const vm = getCurrentInstance();\n  const _emit = emit || (vm == null ? void 0 : vm.emit) || ((_a = vm == null ? void 0 : vm.$emit) == null ? void 0 : _a.bind(vm));\n  let event = eventName;\n  if (!key) {\n    if (isVue2) {\n      const modelOptions = (_c = (_b = vm == null ? void 0 : vm.proxy) == null ? void 0 : _b.$options) == null ? void 0 : _c.model;\n      key = (modelOptions == null ? void 0 : modelOptions.value) || "value";\n      if (!eventName)\n        event = (modelOptions == null ? void 0 : modelOptions.event) || "input";\n    } else {\n      key = "modelValue";\n    }\n  }\n  event = eventName || event || `update:${key}`;\n  if (passive) {\n    const proxy = ref(props[key]);\n    watch(() => props[key], (v) => proxy.value = v);\n    watch(proxy, (v) => {\n      if (v !== props[key] || deep)\n        _emit(event, v);\n    }, {\n      deep\n    });\n    return proxy;\n  } else {\n    return computed({\n      get() {\n        return props[key];\n      },\n      set(value) {\n        _emit(event, value);\n      }\n    });\n  }\n}\n\nfunction useVModels(props, emit, options = {}) {\n  const ret = {};\n  for (const key in props)\n    ret[key] = useVModel(props, key, emit, options);\n  return ret;\n}\n\nfunction useVibrate(options) {\n  const {\n    pattern = [],\n    interval = 0,\n    navigator = defaultNavigator\n  } = options || {};\n  const isSupported = typeof navigator !== "undefined" && "vibrate" in navigator;\n  const patternRef = ref(pattern);\n  let intervalControls;\n  const vibrate = (pattern2 = patternRef.value) => {\n    if (isSupported)\n      navigator.vibrate(pattern2);\n  };\n  const stop = () => {\n    if (isSupported)\n      navigator.vibrate(0);\n    intervalControls == null ? void 0 : intervalControls.pause();\n  };\n  if (interval > 0) {\n    intervalControls = useIntervalFn(vibrate, interval, {\n      immediate: false,\n      immediateCallback: false\n    });\n  }\n  return {\n    isSupported,\n    pattern,\n    intervalControls,\n    vibrate,\n    stop\n  };\n}\n\nfunction useVirtualList(list, options) {\n  const containerRef = ref();\n  const size = useElementSize(containerRef);\n  const currentList = ref([]);\n  const source = shallowRef(list);\n  const state = ref({ start: 0, end: 10 });\n  const { itemHeight, overscan = 5 } = options;\n  const getViewCapacity = (containerHeight) => {\n    if (typeof itemHeight === "number")\n      return Math.ceil(containerHeight / itemHeight);\n    const { start = 0 } = state.value;\n    let sum = 0;\n    let capacity = 0;\n    for (let i = start; i < source.value.length; i++) {\n      const height = itemHeight(i);\n      sum += height;\n      if (sum >= containerHeight) {\n        capacity = i;\n        break;\n      }\n    }\n    return capacity - start;\n  };\n  const getOffset = (scrollTop) => {\n    if (typeof itemHeight === "number")\n      return Math.floor(scrollTop / itemHeight) + 1;\n    let sum = 0;\n    let offset = 0;\n    for (let i = 0; i < source.value.length; i++) {\n      const height = itemHeight(i);\n      sum += height;\n      if (sum >= scrollTop) {\n        offset = i;\n        break;\n      }\n    }\n    return offset + 1;\n  };\n  const calculateRange = () => {\n    const element = containerRef.value;\n    if (element) {\n      const offset = getOffset(element.scrollTop);\n      const viewCapacity = getViewCapacity(element.clientHeight);\n      const from = offset - overscan;\n      const to = offset + viewCapacity + overscan;\n      state.value = {\n        start: from < 0 ? 0 : from,\n        end: to > source.value.length ? source.value.length : to\n      };\n      currentList.value = source.value.slice(state.value.start, state.value.end).map((ele, index) => ({\n        data: ele,\n        index: index + state.value.start\n      }));\n    }\n  };\n  watch([size.width, size.height, list], () => {\n    calculateRange();\n  });\n  const totalHeight = computed(() => {\n    if (typeof itemHeight === "number")\n      return source.value.length * itemHeight;\n    return source.value.reduce((sum, _, index) => sum + itemHeight(index), 0);\n  });\n  const getDistanceTop = (index) => {\n    if (typeof itemHeight === "number") {\n      const height2 = index * itemHeight;\n      return height2;\n    }\n    const height = source.value.slice(0, index).reduce((sum, _, i) => sum + itemHeight(i), 0);\n    return height;\n  };\n  const scrollTo = (index) => {\n    if (containerRef.value) {\n      containerRef.value.scrollTop = getDistanceTop(index);\n      calculateRange();\n    }\n  };\n  const offsetTop = computed(() => getDistanceTop(state.value.start));\n  const wrapperProps = computed(() => {\n    return {\n      style: {\n        width: "100%",\n        height: `${totalHeight.value - offsetTop.value}px`,\n        marginTop: `${offsetTop.value}px`\n      }\n    };\n  });\n  const containerStyle = { overflowY: "auto" };\n  return {\n    list: currentList,\n    scrollTo,\n    containerProps: {\n      ref: containerRef,\n      onScroll: () => {\n        calculateRange();\n      },\n      style: containerStyle\n    },\n    wrapperProps\n  };\n}\n\nconst useWakeLock = (options = {}) => {\n  const {\n    navigator = defaultNavigator,\n    document = defaultDocument\n  } = options;\n  let wakeLock;\n  const isSupported = navigator && "wakeLock" in navigator;\n  const isActive = ref(false);\n  async function onVisibilityChange() {\n    if (!isSupported || !wakeLock)\n      return;\n    if (document && document.visibilityState === "visible")\n      wakeLock = await navigator.wakeLock.request("screen");\n    isActive.value = !wakeLock.released;\n  }\n  if (document)\n    useEventListener(document, "visibilitychange", onVisibilityChange, { passive: true });\n  async function request(type) {\n    if (!isSupported)\n      return;\n    wakeLock = await navigator.wakeLock.request(type);\n    isActive.value = !wakeLock.released;\n  }\n  async function release() {\n    if (!isSupported || !wakeLock)\n      return;\n    await wakeLock.release();\n    isActive.value = !wakeLock.released;\n    wakeLock = null;\n  }\n  return {\n    isSupported,\n    isActive,\n    request,\n    release\n  };\n};\n\nconst useWebNotification = (defaultOptions = {}) => {\n  const {\n    window = defaultWindow\n  } = defaultOptions;\n  const isSupported = !!window && "Notification" in window;\n  const notification = ref(null);\n  const requestPermission = async () => {\n    if (!isSupported)\n      return;\n    if ("permission" in Notification && Notification.permission !== "denied")\n      await Notification.requestPermission();\n  };\n  const onClick = createEventHook();\n  const onShow = createEventHook();\n  const onError = createEventHook();\n  const onClose = createEventHook();\n  const show = async (overrides) => {\n    if (!isSupported)\n      return;\n    await requestPermission();\n    const options = Object.assign({}, defaultOptions, overrides);\n    notification.value = new Notification(options.title || "", options);\n    notification.value.onclick = (event) => onClick.trigger(event);\n    notification.value.onshow = (event) => onShow.trigger(event);\n    notification.value.onerror = (event) => onError.trigger(event);\n    notification.value.onclose = (event) => onClose.trigger(event);\n    return notification.value;\n  };\n  const close = () => {\n    if (notification.value)\n      notification.value.close();\n    notification.value = null;\n  };\n  tryOnMounted(async () => {\n    if (isSupported)\n      await requestPermission();\n  });\n  tryOnScopeDispose(close);\n  if (isSupported && window) {\n    const document = window.document;\n    useEventListener(document, "visibilitychange", (e) => {\n      e.preventDefault();\n      if (document.visibilityState === "visible") {\n        close();\n      }\n    });\n  }\n  return {\n    isSupported,\n    notification,\n    show,\n    close,\n    onClick,\n    onShow,\n    onError,\n    onClose\n  };\n};\n\nfunction resolveNestedOptions(options) {\n  if (options === true)\n    return {};\n  return options;\n}\nfunction useWebSocket(url, options = {}) {\n  const {\n    onConnected,\n    onDisconnected,\n    onError,\n    onMessage,\n    immediate = true,\n    autoClose = true,\n    protocols = []\n  } = options;\n  const data = ref(null);\n  const status = ref("CONNECTING");\n  const wsRef = ref();\n  let heartbeatPause;\n  let heartbeatResume;\n  let explicitlyClosed = false;\n  let retried = 0;\n  let bufferedData = [];\n  const close = (code = 1e3, reason) => {\n    if (!wsRef.value)\n      return;\n    explicitlyClosed = true;\n    heartbeatPause == null ? void 0 : heartbeatPause();\n    wsRef.value.close(code, reason);\n  };\n  const _sendBuffer = () => {\n    if (bufferedData.length && wsRef.value && status.value === "OPEN") {\n      for (const buffer of bufferedData)\n        wsRef.value.send(buffer);\n      bufferedData = [];\n    }\n  };\n  const send = (data2, useBuffer = true) => {\n    if (!wsRef.value || status.value !== "OPEN") {\n      if (useBuffer)\n        bufferedData.push(data2);\n      return false;\n    }\n    _sendBuffer();\n    wsRef.value.send(data2);\n    return true;\n  };\n  const _init = () => {\n    const ws = new WebSocket(url, protocols);\n    wsRef.value = ws;\n    status.value = "CONNECTING";\n    explicitlyClosed = false;\n    ws.onopen = () => {\n      status.value = "OPEN";\n      onConnected == null ? void 0 : onConnected(ws);\n      heartbeatResume == null ? void 0 : heartbeatResume();\n      _sendBuffer();\n    };\n    ws.onclose = (ev) => {\n      status.value = "CLOSED";\n      wsRef.value = void 0;\n      onDisconnected == null ? void 0 : onDisconnected(ws, ev);\n      if (!explicitlyClosed && options.autoReconnect) {\n        const {\n          retries = -1,\n          delay = 1e3,\n          onFailed\n        } = resolveNestedOptions(options.autoReconnect);\n        retried += 1;\n        if (retries < 0 || retried < retries)\n          setTimeout(_init, delay);\n        else\n          onFailed == null ? void 0 : onFailed();\n      }\n    };\n    ws.onerror = (e) => {\n      onError == null ? void 0 : onError(ws, e);\n    };\n    ws.onmessage = (e) => {\n      data.value = e.data;\n      onMessage == null ? void 0 : onMessage(ws, e);\n    };\n  };\n  if (options.heartbeat) {\n    const {\n      message = "ping",\n      interval = 1e3\n    } = resolveNestedOptions(options.heartbeat);\n    const { pause, resume } = useIntervalFn(() => send(message, false), interval, { immediate: false });\n    heartbeatPause = pause;\n    heartbeatResume = resume;\n  }\n  if (immediate)\n    _init();\n  if (autoClose) {\n    useEventListener(window, "beforeunload", () => close());\n    tryOnScopeDispose(close);\n  }\n  const open = () => {\n    close();\n    retried = 0;\n    _init();\n  };\n  return {\n    data,\n    status,\n    close,\n    send,\n    open,\n    ws: wsRef\n  };\n}\n\nfunction useWebWorker(url, workerOptions, options = {}) {\n  const {\n    window = defaultWindow\n  } = options;\n  const data = ref(null);\n  const worker = shallowRef();\n  const post = function post2(val) {\n    if (!worker.value)\n      return;\n    worker.value.postMessage(val);\n  };\n  const terminate = function terminate2() {\n    if (!worker.value)\n      return;\n    worker.value.terminate();\n  };\n  if (window) {\n    worker.value = new window.Worker(url, workerOptions);\n    worker.value.onmessage = (e) => {\n      data.value = e.data;\n    };\n    tryOnScopeDispose(() => {\n      if (worker.value)\n        worker.value.terminate();\n    });\n  }\n  return {\n    data,\n    post,\n    terminate,\n    worker\n  };\n}\n\nconst jobRunner = (userFunc) => (e) => {\n  const userFuncArgs = e.data[0];\n  return Promise.resolve(userFunc.apply(void 0, userFuncArgs)).then((result) => {\n    postMessage(["SUCCESS", result]);\n  }).catch((error) => {\n    postMessage(["ERROR", error]);\n  });\n};\n\nconst depsParser = (deps) => {\n  if (deps.length === 0)\n    return "";\n  const depsString = deps.map((dep) => `\'${dep}\'`).toString();\n  return `importScripts(${depsString})`;\n};\n\nconst createWorkerBlobUrl = (fn, deps) => {\n  const blobCode = `${depsParser(deps)}; onmessage=(${jobRunner})(${fn})`;\n  const blob = new Blob([blobCode], { type: "text/javascript" });\n  const url = URL.createObjectURL(blob);\n  return url;\n};\n\nconst useWebWorkerFn = (fn, options = {}) => {\n  const {\n    dependencies = [],\n    timeout,\n    window = defaultWindow\n  } = options;\n  const worker = ref();\n  const workerStatus = ref("PENDING");\n  const promise = ref({});\n  const timeoutId = ref();\n  const workerTerminate = (status = "PENDING") => {\n    if (worker.value && worker.value._url && window) {\n      worker.value.terminate();\n      URL.revokeObjectURL(worker.value._url);\n      promise.value = {};\n      worker.value = void 0;\n      window.clearTimeout(timeoutId.value);\n      workerStatus.value = status;\n    }\n  };\n  workerTerminate();\n  tryOnScopeDispose(workerTerminate);\n  const generateWorker = () => {\n    const blobUrl = createWorkerBlobUrl(fn, dependencies);\n    const newWorker = new Worker(blobUrl);\n    newWorker._url = blobUrl;\n    newWorker.onmessage = (e) => {\n      const { resolve = () => {\n      }, reject = () => {\n      } } = promise.value;\n      const [status, result] = e.data;\n      switch (status) {\n        case "SUCCESS":\n          resolve(result);\n          workerTerminate(status);\n          break;\n        default:\n          reject(result);\n          workerTerminate("ERROR");\n          break;\n      }\n    };\n    newWorker.onerror = (e) => {\n      const { reject = () => {\n      } } = promise.value;\n      reject(e);\n      workerTerminate("ERROR");\n    };\n    if (timeout) {\n      timeoutId.value = setTimeout(() => workerTerminate("TIMEOUT_EXPIRED"), timeout);\n    }\n    return newWorker;\n  };\n  const callWorker = (...fnArgs) => new Promise((resolve, reject) => {\n    promise.value = {\n      resolve,\n      reject\n    };\n    worker.value && worker.value.postMessage([[...fnArgs]]);\n    workerStatus.value = "RUNNING";\n  });\n  const workerFn = (...fnArgs) => {\n    if (workerStatus.value === "RUNNING") {\n      console.error("[useWebWorkerFn] You can only run one instance of the worker at a time.");\n      return Promise.reject();\n    }\n    worker.value = generateWorker();\n    return callWorker(...fnArgs);\n  };\n  return {\n    workerFn,\n    workerStatus,\n    workerTerminate\n  };\n};\n\nfunction useWindowFocus({ window = defaultWindow } = {}) {\n  if (!window)\n    return ref(false);\n  const focused = ref(window.document.hasFocus());\n  useEventListener(window, "blur", () => {\n    focused.value = false;\n  });\n  useEventListener(window, "focus", () => {\n    focused.value = true;\n  });\n  return focused;\n}\n\nfunction useWindowScroll({ window = defaultWindow } = {}) {\n  if (!window) {\n    return {\n      x: ref(0),\n      y: ref(0)\n    };\n  }\n  const x = ref(window.pageXOffset);\n  const y = ref(window.pageYOffset);\n  useEventListener("scroll", () => {\n    x.value = window.pageXOffset;\n    y.value = window.pageYOffset;\n  }, {\n    capture: false,\n    passive: true\n  });\n  return { x, y };\n}\n\nfunction useWindowSize({ window = defaultWindow, initialWidth = Infinity, initialHeight = Infinity } = {}) {\n  const width = ref(initialWidth);\n  const height = ref(initialHeight);\n  const update = () => {\n    if (window) {\n      width.value = window.innerWidth;\n      height.value = window.innerHeight;\n    }\n  };\n  update();\n  tryOnMounted(update);\n  useEventListener("resize", update, { passive: true });\n  return { width, height };\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/fromPairs.js\n/**\n * The inverse of `_.toPairs`; this method returns an object composed\n * from key-value `pairs`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} pairs The key-value pairs.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.fromPairs([[\'a\', 1], [\'b\', 2]]);\n * // => { \'a\': 1, \'b\': 2 }\n */\nfunction fromPairs(pairs) {\n  var index = -1,\n      length = pairs == null ? 0 : pairs.length,\n      result = {};\n\n  while (++index < length) {\n    var pair = pairs[index];\n    result[pair[0]] = pair[1];\n  }\n  return result;\n}\n\n/* harmony default export */ var lodash_es_fromPairs = (fromPairs);\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/props.mjs\n\n\n\n\n\n\nconst wrapperKey = Symbol();\nconst propKey = "__elPropsReservedKey";\nfunction buildProp(option, key) {\n  if (!shared_esm_bundler_isObject(option) || !!option[propKey])\n    return option;\n  const { values, required, default: defaultValue, type, validator } = option;\n  const _validator = values || validator ? (val) => {\n    let valid = false;\n    let allowedValues = [];\n    if (values) {\n      allowedValues = Array.from(values);\n      if (shared_esm_bundler_hasOwn(option, "default")) {\n        allowedValues.push(defaultValue);\n      }\n      valid || (valid = allowedValues.includes(val));\n    }\n    if (validator)\n      valid || (valid = validator(val));\n    if (!valid && allowedValues.length > 0) {\n      const allowValuesText = [...new Set(allowedValues)].map((value) => JSON.stringify(value)).join(", ");\n      runtime_core_esm_bundler_warn(`Invalid prop: validation failed${key ? ` for prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);\n    }\n    return valid;\n  } : void 0;\n  const prop = {\n    type: shared_esm_bundler_isObject(type) && Object.getOwnPropertySymbols(type).includes(wrapperKey) ? type[wrapperKey] : type,\n    required: !!required,\n    validator: _validator,\n    [propKey]: true\n  };\n  if (shared_esm_bundler_hasOwn(option, "default"))\n    prop.default = defaultValue;\n  return prop;\n}\nconst props_buildProps = (props) => lodash_es_fromPairs(Object.entries(props).map(([key, option]) => [\n  key,\n  buildProp(option, key)\n]));\nconst definePropType = (val) => ({ [wrapperKey]: val });\n\n\n//# sourceMappingURL=props.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/icon/src/icon.mjs\n\n\n\nconst iconProps = props_buildProps({\n  size: {\n    type: definePropType([Number, String])\n  },\n  color: {\n    type: String\n  }\n});\n\n\n//# sourceMappingURL=icon.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/config-provider.mjs\nconst config_provider_configProviderContextKey = Symbol();\n\n\n//# sourceMappingURL=config-provider.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-global-config/index.mjs\n\n\n\n\n\n\n\nconst globalConfig = reactivity_esm_bundler_ref();\nfunction useGlobalConfig(key, defaultValue = void 0) {\n  const config = runtime_core_esm_bundler_getCurrentInstance() ? runtime_core_esm_bundler_inject(config_provider_configProviderContextKey, globalConfig) : globalConfig;\n  if (key) {\n    return runtime_core_esm_bundler_computed(() => {\n      var _a, _b;\n      return (_b = (_a = config.value) == null ? void 0 : _a[key]) != null ? _b : defaultValue;\n    });\n  } else {\n    return config;\n  }\n}\nconst provideGlobalConfig = (config, app, global = false) => {\n  var _a;\n  const inSetup = !!getCurrentInstance();\n  const oldConfig = inSetup ? useGlobalConfig() : void 0;\n  const provideFn = (_a = app == null ? void 0 : app.provide) != null ? _a : inSetup ? provide : void 0;\n  if (!provideFn) {\n    debugWarn("provideGlobalConfig", "provideGlobalConfig() can only be used inside setup().");\n    return;\n  }\n  const context = computed(() => {\n    const cfg = unref(config);\n    if (!(oldConfig == null ? void 0 : oldConfig.value))\n      return cfg;\n    return mergeConfig(oldConfig.value, cfg);\n  });\n  provideFn(configProviderContextKey, context);\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value;\n  }\n  return context;\n};\nconst mergeConfig = (a, b) => {\n  var _a;\n  const keys = [.../* @__PURE__ */ new Set([...keysOf(a), ...keysOf(b)])];\n  const obj = {};\n  for (const key of keys) {\n    obj[key] = (_a = b[key]) != null ? _a : a[key];\n  }\n  return obj;\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-namespace/index.mjs\n\n\n\nconst defaultNamespace = "el";\nconst statePrefix = "is-";\nconst _bem = (namespace, block, blockSuffix, element, modifier) => {\n  let cls = `${namespace}-${block}`;\n  if (blockSuffix) {\n    cls += `-${blockSuffix}`;\n  }\n  if (element) {\n    cls += `__${element}`;\n  }\n  if (modifier) {\n    cls += `--${modifier}`;\n  }\n  return cls;\n};\nconst useNamespace = (block) => {\n  const globalConfig = useGlobalConfig("namespace");\n  const namespace = runtime_core_esm_bundler_computed(() => globalConfig.value || defaultNamespace);\n  const b = (blockSuffix = "") => _bem(reactivity_esm_bundler_unref(namespace), block, blockSuffix, "", "");\n  const e = (element) => element ? _bem(reactivity_esm_bundler_unref(namespace), block, "", element, "") : "";\n  const m = (modifier) => modifier ? _bem(reactivity_esm_bundler_unref(namespace), block, "", "", modifier) : "";\n  const be = (blockSuffix, element) => blockSuffix && element ? _bem(reactivity_esm_bundler_unref(namespace), block, blockSuffix, element, "") : "";\n  const em = (element, modifier) => element && modifier ? _bem(reactivity_esm_bundler_unref(namespace), block, "", element, modifier) : "";\n  const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(reactivity_esm_bundler_unref(namespace), block, blockSuffix, "", modifier) : "";\n  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(reactivity_esm_bundler_unref(namespace), block, blockSuffix, element, modifier) : "";\n  const is = (name, ...args) => {\n    const state = args.length >= 1 ? args[0] : true;\n    return name && state ? `${statePrefix}${name}` : "";\n  };\n  return {\n    namespace,\n    b,\n    e,\n    m,\n    be,\n    em,\n    bm,\n    bem,\n    is\n  };\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/types.mjs\n\n\n\n\n\nconst isUndefined = (val) => val === void 0;\nconst isEmpty = (val) => !val && val !== 0 || isArray(val) && val.length === 0 || isObject(val) && !Object.keys(val).length;\nconst isElement = (e) => e instanceof Element;\n\n\n//# sourceMappingURL=types.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/error.mjs\nclass ElementPlusError extends Error {\n  constructor(m) {\n    super(m);\n    this.name = "ElementPlusError";\n  }\n}\nfunction throwError(scope, m) {\n  throw new ElementPlusError(`[${scope}] ${m}`);\n}\nfunction error_debugWarn(scope, message) {\n  if (false) {}\n}\n\n\n//# sourceMappingURL=error.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/style.mjs\n\n\n\n\n\nconst SCOPE = "utils/vue/style";\nfunction addUnit(value, defaultUnit = "px") {\n  if (!value)\n    return "";\n  if (shared_esm_bundler_isString(value)) {\n    return value;\n  } else if (shared_isNumber(value)) {\n    return `${value}${defaultUnit}`;\n  }\n  error_debugWarn(SCOPE, "binding value must be a string or number");\n}\n\n\n//# sourceMappingURL=style.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/icon/src/icon2.mjs\n\n\n\n\n\n\n\n\nconst __default__ = {\n  name: "ElIcon",\n  inheritAttrs: false\n};\nconst _sfc_main = /* @__PURE__ */ defineComponent({\n  ...__default__,\n  props: iconProps,\n  setup(__props) {\n    const props = __props;\n    const ns = useNamespace("icon");\n    const style = runtime_core_esm_bundler_computed(() => {\n      if (!props.size && !props.color)\n        return {};\n      return {\n        fontSize: isUndefined(props.size) ? void 0 : addUnit(props.size),\n        "--color": props.color\n      };\n    });\n    return (_ctx, _cache) => {\n      return runtime_core_esm_bundler_openBlock(), createElementBlock("i", mergeProps({\n        class: reactivity_esm_bundler_unref(ns).b(),\n        style: reactivity_esm_bundler_unref(style)\n      }, _ctx.$attrs), [\n        renderSlot(_ctx.$slots, "default")\n      ], 16);\n    };\n  }\n});\n\n\n//# sourceMappingURL=icon2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/install.mjs\n\n\nconst withInstall = (main, extra) => {\n  ;\n  main.install = (app) => {\n    for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {\n      app.component(comp.name, comp);\n    }\n  };\n  if (extra) {\n    for (const [key, comp] of Object.entries(extra)) {\n      ;\n      main[key] = comp;\n    }\n  }\n  return main;\n};\nconst withInstallFunction = (fn, name) => {\n  ;\n  fn.install = (app) => {\n    ;\n    fn._context = app._context;\n    app.config.globalProperties[name] = fn;\n  };\n  return fn;\n};\nconst withNoopInstall = (component) => {\n  ;\n  component.install = shared_esm_bundler_NOOP;\n  return component;\n};\n\n\n//# sourceMappingURL=install.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/icon/index.mjs\n\n\n\n\n\nconst ElIcon = withInstall(_sfc_main);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/src/notification.mjs\n\n\n\nconst notificationTypes = [\n  "success",\n  "info",\n  "warning",\n  "error"\n];\nconst notificationProps = props_buildProps({\n  customClass: {\n    type: String,\n    default: ""\n  },\n  dangerouslyUseHTMLString: {\n    type: Boolean,\n    default: false\n  },\n  duration: {\n    type: Number,\n    default: 4500\n  },\n  icon: {\n    type: definePropType([String, Object]),\n    default: ""\n  },\n  id: {\n    type: String,\n    default: ""\n  },\n  message: {\n    type: definePropType([String, Object]),\n    default: ""\n  },\n  offset: {\n    type: Number,\n    default: 0\n  },\n  onClick: {\n    type: definePropType(Function),\n    default: () => void 0\n  },\n  onClose: {\n    type: definePropType(Function),\n    required: true\n  },\n  position: {\n    type: String,\n    values: ["top-right", "top-left", "bottom-right", "bottom-left"],\n    default: "top-right"\n  },\n  showClose: {\n    type: Boolean,\n    default: true\n  },\n  title: {\n    type: String,\n    default: ""\n  },\n  type: {\n    type: String,\n    values: [...notificationTypes, ""],\n    default: ""\n  },\n  zIndex: {\n    type: Number,\n    default: 0\n  }\n});\nconst notificationEmits = {\n  destroy: () => true\n};\n\n\n//# sourceMappingURL=notification.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/_virtual/plugin-vue_export-helper.mjs\nvar _export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};\n\n\n//# sourceMappingURL=plugin-vue_export-helper.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/_virtual/plugin-vue_export-helper.mjs\nvar plugin_vue_export_helper_export_sfc = (sfc, props) => {\n  const target = sfc.__vccOpts || sfc;\n  for (const [key, val] of props) {\n    target[key] = val;\n  }\n  return target;\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/close.mjs\n\n\n\nconst close_sfc_main = defineComponent({\n  name: "Close"\n});\nconst _hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst _hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M764.288 214.592L512 466.88 259.712 214.592a31.936 31.936 0 00-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1045.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0045.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 10-45.12-45.184z"\n}, null, -1);\nconst _hoisted_3 = [\n  _hoisted_2\n];\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", _hoisted_1, _hoisted_3);\n}\nvar close_close = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(close_sfc_main, [["render", _sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/success-filled.mjs\n\n\n\nconst success_filled_sfc_main = defineComponent({\n  name: "SuccessFilled"\n});\nconst success_filled_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst success_filled_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 64a448 448 0 110 896 448 448 0 010-896zm-55.808 536.384l-99.52-99.584a38.4 38.4 0 10-54.336 54.336l126.72 126.72a38.272 38.272 0 0054.336 0l262.4-262.464a38.4 38.4 0 10-54.272-54.336L456.192 600.384z"\n}, null, -1);\nconst success_filled_hoisted_3 = [\n  success_filled_hoisted_2\n];\nfunction success_filled_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", success_filled_hoisted_1, success_filled_hoisted_3);\n}\nvar successFilled = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(success_filled_sfc_main, [["render", success_filled_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/info-filled.mjs\n\n\n\nconst info_filled_sfc_main = defineComponent({\n  name: "InfoFilled"\n});\nconst info_filled_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst info_filled_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 64a448 448 0 110 896.064A448 448 0 01512 64zm67.2 275.072c33.28 0 60.288-23.104 60.288-57.344s-27.072-57.344-60.288-57.344c-33.28 0-60.16 23.104-60.16 57.344s26.88 57.344 60.16 57.344zM590.912 699.2c0-6.848 2.368-24.64 1.024-34.752l-52.608 60.544c-10.88 11.456-24.512 19.392-30.912 17.28a12.992 12.992 0 01-8.256-14.72l87.68-276.992c7.168-35.136-12.544-67.2-54.336-71.296-44.096 0-108.992 44.736-148.48 101.504 0 6.784-1.28 23.68.064 33.792l52.544-60.608c10.88-11.328 23.552-19.328 29.952-17.152a12.8 12.8 0 017.808 16.128L388.48 728.576c-10.048 32.256 8.96 63.872 55.04 71.04 67.84 0 107.904-43.648 147.456-100.416z"\n}, null, -1);\nconst info_filled_hoisted_3 = [\n  info_filled_hoisted_2\n];\nfunction info_filled_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", info_filled_hoisted_1, info_filled_hoisted_3);\n}\nvar infoFilled = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(info_filled_sfc_main, [["render", info_filled_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/warning-filled.mjs\n\n\n\nconst warning_filled_sfc_main = defineComponent({\n  name: "WarningFilled"\n});\nconst warning_filled_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst warning_filled_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 64a448 448 0 110 896 448 448 0 010-896zm0 192a58.432 58.432 0 00-58.24 63.744l23.36 256.384a35.072 35.072 0 0069.76 0l23.296-256.384A58.432 58.432 0 00512 256zm0 512a51.2 51.2 0 100-102.4 51.2 51.2 0 000 102.4z"\n}, null, -1);\nconst warning_filled_hoisted_3 = [\n  warning_filled_hoisted_2\n];\nfunction warning_filled_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", warning_filled_hoisted_1, warning_filled_hoisted_3);\n}\nvar warningFilled = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(warning_filled_sfc_main, [["render", warning_filled_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/circle-close-filled.mjs\n\n\n\nconst circle_close_filled_sfc_main = defineComponent({\n  name: "CircleCloseFilled"\n});\nconst circle_close_filled_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst circle_close_filled_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 64a448 448 0 110 896 448 448 0 010-896zm0 393.664L407.936 353.6a38.4 38.4 0 10-54.336 54.336L457.664 512 353.6 616.064a38.4 38.4 0 1054.336 54.336L512 566.336 616.064 670.4a38.4 38.4 0 1054.336-54.336L566.336 512 670.4 407.936a38.4 38.4 0 10-54.336-54.336L512 457.664z"\n}, null, -1);\nconst circle_close_filled_hoisted_3 = [\n  circle_close_filled_hoisted_2\n];\nfunction circle_close_filled_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", circle_close_filled_hoisted_1, circle_close_filled_hoisted_3);\n}\nvar circleCloseFilled = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(circle_close_filled_sfc_main, [["render", circle_close_filled_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/loading.mjs\n\n\n\nconst loading_sfc_main = defineComponent({\n  name: "Loading"\n});\nconst loading_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst loading_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 64a32 32 0 0132 32v192a32 32 0 01-64 0V96a32 32 0 0132-32zm0 640a32 32 0 0132 32v192a32 32 0 11-64 0V736a32 32 0 0132-32zm448-192a32 32 0 01-32 32H736a32 32 0 110-64h192a32 32 0 0132 32zm-640 0a32 32 0 01-32 32H96a32 32 0 010-64h192a32 32 0 0132 32zM195.2 195.2a32 32 0 0145.248 0L376.32 331.008a32 32 0 01-45.248 45.248L195.2 240.448a32 32 0 010-45.248zm452.544 452.544a32 32 0 0145.248 0L828.8 783.552a32 32 0 01-45.248 45.248L647.744 692.992a32 32 0 010-45.248zM828.8 195.264a32 32 0 010 45.184L692.992 376.32a32 32 0 01-45.248-45.248l135.808-135.808a32 32 0 0145.248 0zm-452.544 452.48a32 32 0 010 45.248L240.448 828.8a32 32 0 01-45.248-45.248l135.808-135.808a32 32 0 0145.248 0z"\n}, null, -1);\nconst loading_hoisted_3 = [\n  loading_hoisted_2\n];\nfunction loading_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", loading_hoisted_1, loading_hoisted_3);\n}\nvar loading = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(loading_sfc_main, [["render", loading_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/circle-check.mjs\n\n\n\nconst circle_check_sfc_main = defineComponent({\n  name: "CircleCheck"\n});\nconst circle_check_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst circle_check_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 896a384 384 0 100-768 384 384 0 000 768zm0 64a448 448 0 110-896 448 448 0 010 896z"\n}, null, -1);\nconst circle_check_hoisted_3 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M745.344 361.344a32 32 0 0145.312 45.312l-288 288a32 32 0 01-45.312 0l-160-160a32 32 0 1145.312-45.312L480 626.752l265.344-265.408z"\n}, null, -1);\nconst _hoisted_4 = [\n  circle_check_hoisted_2,\n  circle_check_hoisted_3\n];\nfunction circle_check_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", circle_check_hoisted_1, _hoisted_4);\n}\nvar circleCheck = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(circle_check_sfc_main, [["render", circle_check_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/circle-close.mjs\n\n\n\nconst circle_close_sfc_main = defineComponent({\n  name: "CircleClose"\n});\nconst circle_close_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst circle_close_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M466.752 512l-90.496-90.496a32 32 0 0145.248-45.248L512 466.752l90.496-90.496a32 32 0 1145.248 45.248L557.248 512l90.496 90.496a32 32 0 11-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 01-45.248-45.248L466.752 512z"\n}, null, -1);\nconst circle_close_hoisted_3 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 896a384 384 0 100-768 384 384 0 000 768zm0 64a448 448 0 110-896 448 448 0 010 896z"\n}, null, -1);\nconst circle_close_hoisted_4 = [\n  circle_close_hoisted_2,\n  circle_close_hoisted_3\n];\nfunction circle_close_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", circle_close_hoisted_1, circle_close_hoisted_4);\n}\nvar circleClose = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(circle_close_sfc_main, [["render", circle_close_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/icon.mjs\n\n\n\nconst iconPropType = definePropType([\n  String,\n  Object,\n  Function\n]);\nconst CloseComponents = {\n  Close: close_close\n};\nconst TypeComponents = {\n  Close: close_close,\n  SuccessFilled: successFilled,\n  InfoFilled: infoFilled,\n  WarningFilled: warningFilled,\n  CircleCloseFilled: circleCloseFilled\n};\nconst TypeComponentsMap = {\n  success: successFilled,\n  warning: warningFilled,\n  error: circleCloseFilled,\n  info: infoFilled\n};\nconst ValidateComponentsMap = {\n  validating: loading,\n  success: circleCheck,\n  error: circleClose\n};\n\n\n//# sourceMappingURL=icon.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/constants/aria.mjs\nconst EVENT_CODE = {\n  tab: "Tab",\n  enter: "Enter",\n  space: "Space",\n  left: "ArrowLeft",\n  up: "ArrowUp",\n  right: "ArrowRight",\n  down: "ArrowDown",\n  esc: "Escape",\n  delete: "Delete",\n  backspace: "Backspace",\n  numpadEnter: "NumpadEnter",\n  pageUp: "PageUp",\n  pageDown: "PageDown",\n  home: "Home",\n  end: "End"\n};\n\n\n//# sourceMappingURL=aria.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/src/notification2.mjs\n\n\n\n\n\n\n\n\n\n\n\n\nconst notification2_sfc_main = defineComponent({\n  name: "ElNotification",\n  components: {\n    ElIcon: ElIcon,\n    ...TypeComponents\n  },\n  props: notificationProps,\n  emits: notificationEmits,\n  setup(props) {\n    const ns = useNamespace("notification");\n    const visible = reactivity_esm_bundler_ref(false);\n    let timer = void 0;\n    const typeClass = runtime_core_esm_bundler_computed(() => {\n      const type = props.type;\n      return type && TypeComponentsMap[props.type] ? ns.m(type) : "";\n    });\n    const iconComponent = runtime_core_esm_bundler_computed(() => {\n      return TypeComponentsMap[props.type] || props.icon || "";\n    });\n    const horizontalClass = runtime_core_esm_bundler_computed(() => props.position.endsWith("right") ? "right" : "left");\n    const verticalProperty = runtime_core_esm_bundler_computed(() => props.position.startsWith("top") ? "top" : "bottom");\n    const positionStyle = runtime_core_esm_bundler_computed(() => {\n      return {\n        [verticalProperty.value]: `${props.offset}px`,\n        zIndex: props.zIndex\n      };\n    });\n    function startTimer() {\n      if (props.duration > 0) {\n        ;\n        ({ stop: timer } = shared_useTimeoutFn(() => {\n          if (visible.value)\n            close();\n        }, props.duration));\n      }\n    }\n    function clearTimer() {\n      timer == null ? void 0 : timer();\n    }\n    function close() {\n      visible.value = false;\n    }\n    function onKeydown({ code }) {\n      if (code === EVENT_CODE["delete"] || code === EVENT_CODE.backspace) {\n        clearTimer();\n      } else if (code === EVENT_CODE.esc) {\n        if (visible.value) {\n          close();\n        }\n      } else {\n        startTimer();\n      }\n    }\n    runtime_core_esm_bundler_onMounted(() => {\n      startTimer();\n      visible.value = true;\n    });\n    useEventListener(document, "keydown", onKeydown);\n    return {\n      ns,\n      horizontalClass,\n      typeClass,\n      iconComponent,\n      positionStyle,\n      visible,\n      close,\n      clearTimer,\n      startTimer\n    };\n  }\n});\nconst notification2_hoisted_1 = ["id"];\nconst notification2_hoisted_2 = ["textContent"];\nconst notification2_hoisted_3 = { key: 0 };\nconst notification2_hoisted_4 = ["innerHTML"];\nfunction notification2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent("el-icon");\n  const _component_close = resolveComponent("close");\n  return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(Transition, {\n    name: _ctx.ns.b("fade"),\n    onBeforeLeave: _ctx.onClose,\n    onAfterLeave: _cache[3] || (_cache[3] = ($event) => _ctx.$emit("destroy"))\n  }, {\n    default: withCtx(() => [\n      withDirectives(createBaseVNode("div", {\n        id: _ctx.id,\n        class: normalizeClass([_ctx.ns.b(), _ctx.customClass, _ctx.horizontalClass]),\n        style: normalizeStyle(_ctx.positionStyle),\n        role: "alert",\n        onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.clearTimer && _ctx.clearTimer(...args)),\n        onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.startTimer && _ctx.startTimer(...args)),\n        onClick: _cache[2] || (_cache[2] = (...args) => _ctx.onClick && _ctx.onClick(...args))\n      }, [\n        _ctx.iconComponent ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n          key: 0,\n          class: normalizeClass([_ctx.ns.e("icon"), _ctx.typeClass])\n        }, {\n          default: withCtx(() => [\n            (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.iconComponent)))\n          ]),\n          _: 1\n        }, 8, ["class"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n        createBaseVNode("div", {\n          class: normalizeClass(_ctx.ns.e("group"))\n        }, [\n          createBaseVNode("h2", {\n            class: normalizeClass(_ctx.ns.e("title")),\n            textContent: toDisplayString(_ctx.title)\n          }, null, 10, notification2_hoisted_2),\n          withDirectives(createBaseVNode("div", {\n            class: normalizeClass(_ctx.ns.e("content")),\n            style: normalizeStyle(!!_ctx.title ? void 0 : { margin: 0 })\n          }, [\n            renderSlot(_ctx.$slots, "default", {}, () => [\n              !_ctx.dangerouslyUseHTMLString ? (runtime_core_esm_bundler_openBlock(), createElementBlock("p", notification2_hoisted_3, toDisplayString(_ctx.message), 1)) : (runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, { key: 1 }, [\n                runtime_core_esm_bundler_createCommentVNode(" Caution here, message could\'ve been compromized, nerver use user\'s input as message "),\n                runtime_core_esm_bundler_createCommentVNode(" eslint-disable-next-line "),\n                createBaseVNode("p", { innerHTML: _ctx.message }, null, 8, notification2_hoisted_4)\n              ], 2112))\n            ])\n          ], 6), [\n            [vShow, _ctx.message]\n          ]),\n          _ctx.showClose ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n            key: 0,\n            class: normalizeClass(_ctx.ns.e("closeBtn")),\n            onClick: withModifiers(_ctx.close, ["stop"])\n          }, {\n            default: withCtx(() => [\n              createVNode(_component_close)\n            ]),\n            _: 1\n          }, 8, ["class", "onClick"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n        ], 2)\n      ], 46, notification2_hoisted_1), [\n        [vShow, _ctx.visible]\n      ])\n    ]),\n    _: 3\n  }, 8, ["name", "onBeforeLeave"]);\n}\nvar NotificationConstructor = /* @__PURE__ */ _export_sfc(notification2_sfc_main, [["render", notification2_sfc_render]]);\n\n\n//# sourceMappingURL=notification2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-z-index/index.mjs\n\n\n\nconst zIndex = reactivity_esm_bundler_ref(0);\nconst useZIndex = () => {\n  const initialZIndex = useGlobalConfig("zIndex", 2e3);\n  const currentZIndex = runtime_core_esm_bundler_computed(() => initialZIndex.value + zIndex.value);\n  const nextZIndex = () => {\n    zIndex.value++;\n    return currentZIndex.value;\n  };\n  return {\n    initialZIndex,\n    currentZIndex,\n    nextZIndex\n  };\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/src/notify.mjs\n\n\n\n\n\n\n\n\n\n\n\nconst notifications = {\n  "top-left": [],\n  "top-right": [],\n  "bottom-left": [],\n  "bottom-right": []\n};\nconst GAP_SIZE = 16;\nlet seed = 1;\nconst notify = function(options = {}) {\n  if (!shared_isClient)\n    return { close: () => void 0 };\n  if (typeof options === "string" || runtime_core_esm_bundler_isVNode(options)) {\n    options = { message: options };\n  }\n  const position = options.position || "top-right";\n  let verticalOffset = options.offset || 0;\n  notifications[position].forEach(({ vm: vm2 }) => {\n    var _a;\n    verticalOffset += (((_a = vm2.el) == null ? void 0 : _a.offsetHeight) || 0) + GAP_SIZE;\n  });\n  verticalOffset += GAP_SIZE;\n  const { nextZIndex } = useZIndex();\n  const id = `notification_${seed++}`;\n  const userOnClose = options.onClose;\n  const props = {\n    zIndex: nextZIndex(),\n    offset: verticalOffset,\n    ...options,\n    id,\n    onClose: () => {\n      notify_close(id, position, userOnClose);\n    }\n  };\n  let appendTo = document.body;\n  if (isElement(options.appendTo)) {\n    appendTo = options.appendTo;\n  } else if (shared_esm_bundler_isString(options.appendTo)) {\n    appendTo = document.querySelector(options.appendTo);\n  }\n  if (!isElement(appendTo)) {\n    error_debugWarn("ElNotification", "the appendTo option is not an HTMLElement. Falling back to document.body.");\n    appendTo = document.body;\n  }\n  const container = document.createElement("div");\n  const vm = createVNode(NotificationConstructor, props, runtime_core_esm_bundler_isVNode(props.message) ? {\n    default: () => props.message\n  } : null);\n  vm.props.onDestroy = () => {\n    render(null, container);\n  };\n  render(vm, container);\n  notifications[position].push({ vm });\n  appendTo.appendChild(container.firstElementChild);\n  return {\n    close: () => {\n      ;\n      vm.component.proxy.visible = false;\n    }\n  };\n};\nnotificationTypes.forEach((type) => {\n  notify[type] = (options = {}) => {\n    if (typeof options === "string" || runtime_core_esm_bundler_isVNode(options)) {\n      options = {\n        message: options\n      };\n    }\n    return notify({\n      ...options,\n      type\n    });\n  };\n});\nfunction notify_close(id, position, userOnClose) {\n  const orientedNotifications = notifications[position];\n  const idx = orientedNotifications.findIndex(({ vm: vm2 }) => {\n    var _a;\n    return ((_a = vm2.component) == null ? void 0 : _a.props.id) === id;\n  });\n  if (idx === -1)\n    return;\n  const { vm } = orientedNotifications[idx];\n  if (!vm)\n    return;\n  userOnClose == null ? void 0 : userOnClose(vm);\n  const removedHeight = vm.el.offsetHeight;\n  const verticalPos = position.split("-")[0];\n  orientedNotifications.splice(idx, 1);\n  const len = orientedNotifications.length;\n  if (len < 1)\n    return;\n  for (let i = idx; i < len; i++) {\n    const { el, component } = orientedNotifications[i].vm;\n    const pos = parseInt(el.style[verticalPos], 10) - removedHeight - GAP_SIZE;\n    component.props.offset = pos;\n  }\n}\nfunction closeAll() {\n  for (const orientedNotifications of Object.values(notifications)) {\n    orientedNotifications.forEach(({ vm }) => {\n      ;\n      vm.component.proxy.visible = false;\n    });\n  }\n}\nnotify.closeAll = closeAll;\n\n\n//# sourceMappingURL=notify.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/index.mjs\n\n\n\n\n\nconst ElNotification = withInstallFunction(notify, "$notify");\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/base.css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/base/style/css.mjs\n\n//# sourceMappingURL=css.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/el-notification.css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/notification/style/css.mjs\n\n\n//# sourceMappingURL=css.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/base.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/base/style/index.mjs\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/button.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/input.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/tag.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tag/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/option.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/option/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/option-group.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/option-group/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/scrollbar.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/popper.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/select.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/style/index.mjs\n\n\n\n\n\n\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@ctrl/tinycolor/dist/module/util.js\n/**\n * Take input from [0, n] and return it as [0, 1]\n * @hidden\n */\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) {\n        n = \'100%\';\n    }\n    var isPercent = isPercentage(n);\n    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));\n    // Automatically convert percentage into number\n    if (isPercent) {\n        n = parseInt(String(n * max), 10) / 100;\n    }\n    // Handle floating point rounding errors\n    if (Math.abs(n - max) < 0.000001) {\n        return 1;\n    }\n    // Convert into [0, 1] range if it isn\'t already\n    if (max === 360) {\n        // If n is a hue given in degrees,\n        // wrap around out-of-range values into [0, 360] range\n        // then convert into [0, 1].\n        n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));\n    }\n    else {\n        // If n not a hue given in degrees\n        // Convert into [0, 1] range if it isn\'t already.\n        n = (n % max) / parseFloat(String(max));\n    }\n    return n;\n}\n/**\n * Force a number between 0 and 1\n * @hidden\n */\nfunction clamp01(val) {\n    return Math.min(1, Math.max(0, val));\n}\n/**\n * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\n * @hidden\n */\nfunction isOnePointZero(n) {\n    return typeof n === \'string\' && n.indexOf(\'.\') !== -1 && parseFloat(n) === 1;\n}\n/**\n * Check to see if string passed in is a percentage\n * @hidden\n */\nfunction isPercentage(n) {\n    return typeof n === \'string\' && n.indexOf(\'%\') !== -1;\n}\n/**\n * Return a valid alpha value [0,1] with all invalid values being set to 1\n * @hidden\n */\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n    return a;\n}\n/**\n * Replace a decimal with it\'s percentage value\n * @hidden\n */\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        return Number(n) * 100 + "%";\n    }\n    return n;\n}\n/**\n * Force a hex value to have 2 characters\n * @hidden\n */\nfunction util_pad2(c) {\n    return c.length === 1 ? \'0\' + c : String(c);\n}\n\n;// CONCATENATED MODULE: ./node_modules/@ctrl/tinycolor/dist/module/conversion.js\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */\nfunction rgbToRgb(r, g, b) {\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255,\n    };\n}\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */\nfunction rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (max === min) {\n        s = 0;\n        h = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, l: l };\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * (6 * t);\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nfunction hslToRgb(h, s, l) {\n    var r;\n    var g;\n    var b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    if (s === 0) {\n        // achromatic\n        g = l;\n        b = l;\n        r = l;\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */\nfunction rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var v = max;\n    var d = max - min;\n    var s = max === 0 ? 0 : d / max;\n    if (max === min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nfunction hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h);\n    var f = h - i;\n    var p = v * (1 - s);\n    var q = v * (1 - f * s);\n    var t = v * (1 - (1 - f) * s);\n    var mod = i % 6;\n    var r = [v, q, p, p, t, v][mod];\n    var g = [t, v, v, q, p, p][mod];\n    var b = [p, p, t, v, v, q][mod];\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nfunction rgbToHex(r, g, b, allow3Char) {\n    var hex = [\n        util_pad2(Math.round(r).toString(16)),\n        util_pad2(Math.round(g).toString(16)),\n        util_pad2(Math.round(b).toString(16)),\n    ];\n    // Return a 3 character hex if possible\n    if (allow3Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join(\'\');\n}\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n */\n// eslint-disable-next-line max-params\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [\n        util_pad2(Math.round(r).toString(16)),\n        util_pad2(Math.round(g).toString(16)),\n        util_pad2(Math.round(b).toString(16)),\n        util_pad2(convertDecimalToHex(a)),\n    ];\n    // Return a 4 character hex if possible\n    if (allow4Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1)) &&\n        hex[3].startsWith(hex[3].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join(\'\');\n}\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for "toFilter()"\n */\nfunction rgbaToArgbHex(r, g, b, a) {\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    return hex.join(\'\');\n}\n/** Converts a decimal to a hex value */\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n/** Converts a hex value to a decimal */\nfunction convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n}\n/** Parse a base-16 hex value into a base-10 integer */\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\nfunction numberInputToObject(color) {\n    return {\n        r: color >> 16,\n        g: (color & 0xff00) >> 8,\n        b: color & 0xff,\n    };\n}\n\n;// CONCATENATED MODULE: ./node_modules/@ctrl/tinycolor/dist/module/css-color-names.js\n// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */\nvar names = {\n    aliceblue: \'#f0f8ff\',\n    antiquewhite: \'#faebd7\',\n    aqua: \'#00ffff\',\n    aquamarine: \'#7fffd4\',\n    azure: \'#f0ffff\',\n    beige: \'#f5f5dc\',\n    bisque: \'#ffe4c4\',\n    black: \'#000000\',\n    blanchedalmond: \'#ffebcd\',\n    blue: \'#0000ff\',\n    blueviolet: \'#8a2be2\',\n    brown: \'#a52a2a\',\n    burlywood: \'#deb887\',\n    cadetblue: \'#5f9ea0\',\n    chartreuse: \'#7fff00\',\n    chocolate: \'#d2691e\',\n    coral: \'#ff7f50\',\n    cornflowerblue: \'#6495ed\',\n    cornsilk: \'#fff8dc\',\n    crimson: \'#dc143c\',\n    cyan: \'#00ffff\',\n    darkblue: \'#00008b\',\n    darkcyan: \'#008b8b\',\n    darkgoldenrod: \'#b8860b\',\n    darkgray: \'#a9a9a9\',\n    darkgreen: \'#006400\',\n    darkgrey: \'#a9a9a9\',\n    darkkhaki: \'#bdb76b\',\n    darkmagenta: \'#8b008b\',\n    darkolivegreen: \'#556b2f\',\n    darkorange: \'#ff8c00\',\n    darkorchid: \'#9932cc\',\n    darkred: \'#8b0000\',\n    darksalmon: \'#e9967a\',\n    darkseagreen: \'#8fbc8f\',\n    darkslateblue: \'#483d8b\',\n    darkslategray: \'#2f4f4f\',\n    darkslategrey: \'#2f4f4f\',\n    darkturquoise: \'#00ced1\',\n    darkviolet: \'#9400d3\',\n    deeppink: \'#ff1493\',\n    deepskyblue: \'#00bfff\',\n    dimgray: \'#696969\',\n    dimgrey: \'#696969\',\n    dodgerblue: \'#1e90ff\',\n    firebrick: \'#b22222\',\n    floralwhite: \'#fffaf0\',\n    forestgreen: \'#228b22\',\n    fuchsia: \'#ff00ff\',\n    gainsboro: \'#dcdcdc\',\n    ghostwhite: \'#f8f8ff\',\n    goldenrod: \'#daa520\',\n    gold: \'#ffd700\',\n    gray: \'#808080\',\n    green: \'#008000\',\n    greenyellow: \'#adff2f\',\n    grey: \'#808080\',\n    honeydew: \'#f0fff0\',\n    hotpink: \'#ff69b4\',\n    indianred: \'#cd5c5c\',\n    indigo: \'#4b0082\',\n    ivory: \'#fffff0\',\n    khaki: \'#f0e68c\',\n    lavenderblush: \'#fff0f5\',\n    lavender: \'#e6e6fa\',\n    lawngreen: \'#7cfc00\',\n    lemonchiffon: \'#fffacd\',\n    lightblue: \'#add8e6\',\n    lightcoral: \'#f08080\',\n    lightcyan: \'#e0ffff\',\n    lightgoldenrodyellow: \'#fafad2\',\n    lightgray: \'#d3d3d3\',\n    lightgreen: \'#90ee90\',\n    lightgrey: \'#d3d3d3\',\n    lightpink: \'#ffb6c1\',\n    lightsalmon: \'#ffa07a\',\n    lightseagreen: \'#20b2aa\',\n    lightskyblue: \'#87cefa\',\n    lightslategray: \'#778899\',\n    lightslategrey: \'#778899\',\n    lightsteelblue: \'#b0c4de\',\n    lightyellow: \'#ffffe0\',\n    lime: \'#00ff00\',\n    limegreen: \'#32cd32\',\n    linen: \'#faf0e6\',\n    magenta: \'#ff00ff\',\n    maroon: \'#800000\',\n    mediumaquamarine: \'#66cdaa\',\n    mediumblue: \'#0000cd\',\n    mediumorchid: \'#ba55d3\',\n    mediumpurple: \'#9370db\',\n    mediumseagreen: \'#3cb371\',\n    mediumslateblue: \'#7b68ee\',\n    mediumspringgreen: \'#00fa9a\',\n    mediumturquoise: \'#48d1cc\',\n    mediumvioletred: \'#c71585\',\n    midnightblue: \'#191970\',\n    mintcream: \'#f5fffa\',\n    mistyrose: \'#ffe4e1\',\n    moccasin: \'#ffe4b5\',\n    navajowhite: \'#ffdead\',\n    navy: \'#000080\',\n    oldlace: \'#fdf5e6\',\n    olive: \'#808000\',\n    olivedrab: \'#6b8e23\',\n    orange: \'#ffa500\',\n    orangered: \'#ff4500\',\n    orchid: \'#da70d6\',\n    palegoldenrod: \'#eee8aa\',\n    palegreen: \'#98fb98\',\n    paleturquoise: \'#afeeee\',\n    palevioletred: \'#db7093\',\n    papayawhip: \'#ffefd5\',\n    peachpuff: \'#ffdab9\',\n    peru: \'#cd853f\',\n    pink: \'#ffc0cb\',\n    plum: \'#dda0dd\',\n    powderblue: \'#b0e0e6\',\n    purple: \'#800080\',\n    rebeccapurple: \'#663399\',\n    red: \'#ff0000\',\n    rosybrown: \'#bc8f8f\',\n    royalblue: \'#4169e1\',\n    saddlebrown: \'#8b4513\',\n    salmon: \'#fa8072\',\n    sandybrown: \'#f4a460\',\n    seagreen: \'#2e8b57\',\n    seashell: \'#fff5ee\',\n    sienna: \'#a0522d\',\n    silver: \'#c0c0c0\',\n    skyblue: \'#87ceeb\',\n    slateblue: \'#6a5acd\',\n    slategray: \'#708090\',\n    slategrey: \'#708090\',\n    snow: \'#fffafa\',\n    springgreen: \'#00ff7f\',\n    steelblue: \'#4682b4\',\n    tan: \'#d2b48c\',\n    teal: \'#008080\',\n    thistle: \'#d8bfd8\',\n    tomato: \'#ff6347\',\n    turquoise: \'#40e0d0\',\n    violet: \'#ee82ee\',\n    wheat: \'#f5deb3\',\n    white: \'#ffffff\',\n    whitesmoke: \'#f5f5f5\',\n    yellow: \'#ffff00\',\n    yellowgreen: \'#9acd32\',\n};\n\n;// CONCATENATED MODULE: ./node_modules/@ctrl/tinycolor/dist/module/format-input.js\n\n\n\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * "red"\n * "#f00" or "f00"\n * "#ff0000" or "ff0000"\n * "#ff000000" or "ff000000"\n * "rgb 255 0 0" or "rgb (255, 0, 0)"\n * "rgb 1.0 0 0" or "rgb (1, 0, 0)"\n * "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"\n * "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"\n * "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"\n * "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"\n * "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"\n * ```\n */\nfunction inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === \'string\') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === \'object\') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \'%\' ? \'prgb\' : \'rgb\';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = \'hsv\';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = \'hsl\';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, \'a\')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = \'[-\\\\+]?\\\\d+%?\';\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = \'[-\\\\+]?\\\\d*\\\\.\\\\d+%?\';\n// Allow positive/negative integer/number.  Don\'t capture the either/or, just the entire outcome.\nvar CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\nvar PERMISSIVE_MATCH4 = "[\\\\s|\\\\(]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")[,|\\\\s]+(" + CSS_UNIT + ")\\\\s*\\\\)?";\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp(\'rgb\' + PERMISSIVE_MATCH3),\n    rgba: new RegExp(\'rgba\' + PERMISSIVE_MATCH4),\n    hsl: new RegExp(\'hsl\' + PERMISSIVE_MATCH3),\n    hsla: new RegExp(\'hsla\' + PERMISSIVE_MATCH4),\n    hsv: new RegExp(\'hsv\' + PERMISSIVE_MATCH3),\n    hsva: new RegExp(\'hsva\' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nfunction stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === \'transparent\') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \'name\' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don\'t worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? \'name\' : \'hex8\',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \'name\' : \'hex\',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? \'name\' : \'hex8\',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? \'name\' : \'hex\',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nfunction isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n\n;// CONCATENATED MODULE: ./node_modules/@ctrl/tinycolor/dist/module/index.js\n\n\n\n\nvar TinyColor = /** @class */ (function () {\n    function TinyColor(color, opts) {\n        if (color === void 0) { color = \'\'; }\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === \'number\') {\n            color = numberInputToObject(color);\n        }\n        this.originalInput = color;\n        var rgb = inputToRGB(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don\'t let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    TinyColor.prototype.isDark = function () {\n        return this.getBrightness() < 128;\n    };\n    TinyColor.prototype.isLight = function () {\n        return !this.isDark();\n    };\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */\n    TinyColor.prototype.getBrightness = function () {\n        // http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    };\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */\n    TinyColor.prototype.getLuminance = function () {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var R;\n        var G;\n        var B;\n        var RsRGB = rgb.r / 255;\n        var GsRGB = rgb.g / 255;\n        var BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    };\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */\n    TinyColor.prototype.getAlpha = function () {\n        return this.a;\n    };\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */\n    TinyColor.prototype.setAlpha = function (alpha) {\n        this.a = boundAlpha(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    };\n    /**\n     * Returns the object as a HSVA object.\n     */\n    TinyColor.prototype.toHsv = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n    };\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * "hsva(xxx, xxx, xxx, xx)".\n     */\n    TinyColor.prototype.toHsvString = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        var h = Math.round(hsv.h * 360);\n        var s = Math.round(hsv.s * 100);\n        var v = Math.round(hsv.v * 100);\n        return this.a === 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this.roundA + ")";\n    };\n    /**\n     * Returns the object as a HSLA object.\n     */\n    TinyColor.prototype.toHsl = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n    };\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * "hsla(xxx, xxx, xxx, xx)".\n     */\n    TinyColor.prototype.toHslString = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        var h = Math.round(hsl.h * 360);\n        var s = Math.round(hsl.s * 100);\n        var l = Math.round(hsl.l * 100);\n        return this.a === 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this.roundA + ")";\n    };\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHex = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\n    };\n    /**\n     * Returns the hex value of the color -with a # appened.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHexString = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return \'#\' + this.toHex(allow3Char);\n    };\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8 = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n    };\n    /**\n     * Returns the hex 8 value of the color -with a # appened.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8String = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return \'#\' + this.toHex8(allow4Char);\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toRgb = function () {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * "RGBA(xxx, xxx, xxx, xx)".\n     */\n    TinyColor.prototype.toRgbString = function () {\n        var r = Math.round(this.r);\n        var g = Math.round(this.g);\n        var b = Math.round(this.b);\n        return this.a === 1 ? "rgb(" + r + ", " + g + ", " + b + ")" : "rgba(" + r + ", " + g + ", " + b + ", " + this.roundA + ")";\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toPercentageRgb = function () {\n        var fmt = function (x) { return Math.round(bound01(x, 255) * 100) + "%"; };\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */\n    TinyColor.prototype.toPercentageRgbString = function () {\n        var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };\n        return this.a === 1\n            ? "rgb(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%)"\n            : "rgba(" + rnd(this.r) + "%, " + rnd(this.g) + "%, " + rnd(this.b) + "%, " + this.roundA + ")";\n    };\n    /**\n     * The \'real\' name of the color -if there is one.\n     */\n    TinyColor.prototype.toName = function () {\n        if (this.a === 0) {\n            return \'transparent\';\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        var hex = \'#\' + rgbToHex(this.r, this.g, this.b, false);\n        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    };\n    TinyColor.prototype.toString = function (format) {\n        var formatSet = Boolean(format);\n        format = format !== null && format !== void 0 ? format : this.format;\n        var formattedString = false;\n        var hasAlpha = this.a < 1 && this.a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith(\'hex\') || format === \'name\');\n        if (needsAlphaFormat) {\n            // Special case for "transparent", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \'name\' && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \'rgb\') {\n            formattedString = this.toRgbString();\n        }\n        if (format === \'prgb\') {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \'hex\' || format === \'hex6\') {\n            formattedString = this.toHexString();\n        }\n        if (format === \'hex3\') {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \'hex4\') {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === \'hex8\') {\n            formattedString = this.toHex8String();\n        }\n        if (format === \'name\') {\n            formattedString = this.toName();\n        }\n        if (format === \'hsl\') {\n            formattedString = this.toHslString();\n        }\n        if (format === \'hsv\') {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    };\n    TinyColor.prototype.toNumber = function () {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    };\n    TinyColor.prototype.clone = function () {\n        return new TinyColor(this.toString());\n    };\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.lighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.brighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    };\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.darken = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.tint = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix(\'white\', amount);\n    };\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.shade = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix(\'black\', amount);\n    };\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.desaturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.saturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */\n    TinyColor.prototype.greyscale = function () {\n        return this.desaturate(100);\n    };\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */\n    TinyColor.prototype.spin = function (amount) {\n        var hsl = this.toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n    TinyColor.prototype.mix = function (color, amount) {\n        if (amount === void 0) { amount = 50; }\n        var rgb1 = this.toRgb();\n        var rgb2 = new TinyColor(color).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\n        };\n        return new TinyColor(rgba);\n    };\n    TinyColor.prototype.analogous = function (results, slices) {\n        if (results === void 0) { results = 6; }\n        if (slices === void 0) { slices = 30; }\n        var hsl = this.toHsl();\n        var part = 360 / slices;\n        var ret = [this];\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    };\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */\n    TinyColor.prototype.complement = function () {\n        var hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    };\n    TinyColor.prototype.monochromatic = function (results) {\n        if (results === void 0) { results = 6; }\n        var hsv = this.toHsv();\n        var h = hsv.h;\n        var s = hsv.s;\n        var v = hsv.v;\n        var res = [];\n        var modification = 1 / results;\n        while (results--) {\n            res.push(new TinyColor({ h: h, s: s, v: v }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    };\n    TinyColor.prototype.splitcomplement = function () {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        return [\n            this,\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n        ];\n    };\n    /**\n     * Compute how the color would appear on a background\n     */\n    TinyColor.prototype.onBackground = function (background) {\n        var fg = this.toRgb();\n        var bg = new TinyColor(background).toRgb();\n        return new TinyColor({\n            r: bg.r + (fg.r - bg.r) * fg.a,\n            g: bg.g + (fg.g - bg.g) * fg.a,\n            b: bg.b + (fg.b - bg.b) * fg.a,\n        });\n    };\n    /**\n     * Alias for `polyad(3)`\n     */\n    TinyColor.prototype.triad = function () {\n        return this.polyad(3);\n    };\n    /**\n     * Alias for `polyad(4)`\n     */\n    TinyColor.prototype.tetrad = function () {\n        return this.polyad(4);\n    };\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */\n    TinyColor.prototype.polyad = function (n) {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        var result = [this];\n        var increment = 360 / n;\n        for (var i = 1; i < n; i++) {\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\n        }\n        return result;\n    };\n    /**\n     * compare color vs current color\n     */\n    TinyColor.prototype.equals = function (color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    };\n    return TinyColor;\n}());\n\n// kept for backwards compatability with v1\nfunction tinycolor(color, opts) {\n    if (color === void 0) { color = \'\'; }\n    if (opts === void 0) { opts = {}; }\n    return new TinyColor(color, opts);\n}\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-prop/index.mjs\n\n\nconst useProp = (name) => {\n  const vm = runtime_core_esm_bundler_getCurrentInstance();\n  return runtime_core_esm_bundler_computed(() => {\n    var _a, _b;\n    return (_b = (_a = vm.proxy) == null ? void 0 : _a.$props[name]) != null ? _b : void 0;\n  });\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/constants/size.mjs\nconst componentSizes = ["default", "small", "large"];\n\n\n//# sourceMappingURL=size.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/form.mjs\nconst elFormKey = Symbol("elForm");\nconst elFormItemKey = Symbol("elFormItem");\n\n\n//# sourceMappingURL=form.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-common-props/index.mjs\n\n\n\n\n\n\n\n\n\n\nconst useSizeProp = buildProp({\n  type: String,\n  values: componentSizes,\n  required: false\n});\nconst useSize = (fallback, ignore = {}) => {\n  const emptyRef = reactivity_esm_bundler_ref(void 0);\n  const size = ignore.prop ? emptyRef : useProp("size");\n  const globalConfig = ignore.global ? emptyRef : useGlobalConfig("size");\n  const form = ignore.form ? { size: void 0 } : runtime_core_esm_bundler_inject(elFormKey, void 0);\n  const formItem = ignore.formItem ? { size: void 0 } : runtime_core_esm_bundler_inject(elFormItemKey, void 0);\n  return runtime_core_esm_bundler_computed(() => size.value || reactivity_esm_bundler_unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig.value || "default");\n};\nconst useDisabled = (fallback) => {\n  const disabled = useProp("disabled");\n  const form = runtime_core_esm_bundler_inject(elFormKey, void 0);\n  return runtime_core_esm_bundler_computed(() => disabled.value || reactivity_esm_bundler_unref(fallback) || (form == null ? void 0 : form.disabled) || false);\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button.mjs\n\n\n\n\n\n\n\nconst buttonTypes = [\n  "default",\n  "primary",\n  "success",\n  "warning",\n  "info",\n  "danger",\n  "text",\n  ""\n];\nconst buttonNativeTypes = ["button", "submit", "reset"];\nconst buttonProps = props_buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  type: {\n    type: String,\n    values: buttonTypes,\n    default: ""\n  },\n  icon: {\n    type: iconPropType,\n    default: ""\n  },\n  nativeType: {\n    type: String,\n    values: buttonNativeTypes,\n    default: "button"\n  },\n  loading: Boolean,\n  loadingIcon: {\n    type: iconPropType,\n    default: () => loading\n  },\n  plain: Boolean,\n  autofocus: Boolean,\n  round: Boolean,\n  circle: Boolean,\n  color: String,\n  autoInsertSpace: {\n    type: Boolean,\n    default: void 0\n  }\n});\nconst buttonEmits = {\n  click: (evt) => evt instanceof MouseEvent\n};\n\n\n//# sourceMappingURL=button.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/button.mjs\nconst buttonGroupContextKey = Symbol("buttonGroupContextKey");\n\n\n//# sourceMappingURL=button.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-form-item/index.mjs\n\n\n\n\nconst useFormItem = () => {\n  const form = runtime_core_esm_bundler_inject(elFormKey, void 0);\n  const formItem = runtime_core_esm_bundler_inject(elFormItemKey, void 0);\n  return {\n    form,\n    formItem\n  };\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button2.mjs\n\n\n\n\n\n\n\n\n\n\n\n\nconst button2_hoisted_1 = ["disabled", "autofocus", "type"];\nconst button2_default_ = {\n  name: "ElButton"\n};\nconst button2_sfc_main = /* @__PURE__ */ defineComponent({\n  ...button2_default_,\n  props: buttonProps,\n  emits: buttonEmits,\n  setup(__props, { expose, emit }) {\n    const props = __props;\n    const slots = useSlots();\n    const buttonGroupContext = runtime_core_esm_bundler_inject(buttonGroupContextKey, void 0);\n    const globalConfig = useGlobalConfig("button");\n    const ns = useNamespace("button");\n    const { form } = useFormItem();\n    const _size = useSize(runtime_core_esm_bundler_computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));\n    const _disabled = useDisabled();\n    const _ref = reactivity_esm_bundler_ref();\n    const _type = runtime_core_esm_bundler_computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || "");\n    const autoInsertSpace = runtime_core_esm_bundler_computed(() => {\n      var _a, _b, _c;\n      return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a = globalConfig.value) == null ? void 0 : _a.autoInsertSpace) != null ? _c : false;\n    });\n    const shouldAddSpace = runtime_core_esm_bundler_computed(() => {\n      var _a;\n      const defaultSlot = (_a = slots.default) == null ? void 0 : _a.call(slots);\n      if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {\n        const slot = defaultSlot[0];\n        if ((slot == null ? void 0 : slot.type) === runtime_core_esm_bundler_Text) {\n          const text = slot.children;\n          return /^\\p{Unified_Ideograph}{2}$/u.test(text);\n        }\n      }\n      return false;\n    });\n    const buttonStyle = runtime_core_esm_bundler_computed(() => {\n      let styles = {};\n      const buttonColor = props.color;\n      if (buttonColor) {\n        const color = new TinyColor(buttonColor);\n        const shadeBgColor = color.shade(20).toString();\n        if (props.plain) {\n          styles = {\n            "--el-button-bg-color": color.tint(90).toString(),\n            "--el-button-text-color": buttonColor,\n            "--el-button-hover-text-color": "var(--el-color-white)",\n            "--el-button-hover-bg-color": buttonColor,\n            "--el-button-hover-border-color": buttonColor,\n            "--el-button-active-bg-color": shadeBgColor,\n            "--el-button-active-text-color": "var(--el-color-white)",\n            "--el-button-active-border-color": shadeBgColor\n          };\n        } else {\n          const tintBgColor = color.tint(30).toString();\n          styles = {\n            "--el-button-bg-color": buttonColor,\n            "--el-button-border-color": buttonColor,\n            "--el-button-hover-bg-color": tintBgColor,\n            "--el-button-hover-border-color": tintBgColor,\n            "--el-button-active-bg-color": shadeBgColor,\n            "--el-button-active-border-color": shadeBgColor\n          };\n        }\n        if (_disabled.value) {\n          const disabledButtonColor = color.tint(50).toString();\n          styles["--el-button-disabled-bg-color"] = disabledButtonColor;\n          styles["--el-button-disabled-border-color"] = disabledButtonColor;\n        }\n      }\n      return styles;\n    });\n    const handleClick = (evt) => {\n      if (props.nativeType === "reset") {\n        form == null ? void 0 : form.resetFields();\n      }\n      emit("click", evt);\n    };\n    expose({\n      ref: _ref,\n      size: _size,\n      type: _type,\n      disabled: _disabled,\n      shouldAddSpace\n    });\n    return (_ctx, _cache) => {\n      return runtime_core_esm_bundler_openBlock(), createElementBlock("button", {\n        ref_key: "_ref",\n        ref: _ref,\n        class: normalizeClass([\n          reactivity_esm_bundler_unref(ns).b(),\n          reactivity_esm_bundler_unref(ns).m(reactivity_esm_bundler_unref(_type)),\n          reactivity_esm_bundler_unref(ns).m(reactivity_esm_bundler_unref(_size)),\n          reactivity_esm_bundler_unref(ns).is("disabled", reactivity_esm_bundler_unref(_disabled)),\n          reactivity_esm_bundler_unref(ns).is("loading", _ctx.loading),\n          reactivity_esm_bundler_unref(ns).is("plain", _ctx.plain),\n          reactivity_esm_bundler_unref(ns).is("round", _ctx.round),\n          reactivity_esm_bundler_unref(ns).is("circle", _ctx.circle)\n        ]),\n        disabled: reactivity_esm_bundler_unref(_disabled) || _ctx.loading,\n        autofocus: _ctx.autofocus,\n        type: _ctx.nativeType,\n        style: normalizeStyle(reactivity_esm_bundler_unref(buttonStyle)),\n        onClick: handleClick\n      }, [\n        _ctx.loading ? (runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, { key: 0 }, [\n          _ctx.$slots.loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }) : (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(reactivity_esm_bundler_unref(ElIcon), {\n            key: 1,\n            class: normalizeClass(reactivity_esm_bundler_unref(ns).is("loading"))\n          }, {\n            default: withCtx(() => [\n              (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.loadingIcon)))\n            ]),\n            _: 1\n          }, 8, ["class"]))\n        ], 2112)) : _ctx.icon || _ctx.$slots.icon ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(reactivity_esm_bundler_unref(ElIcon), { key: 1 }, {\n          default: withCtx(() => [\n            _ctx.icon ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.icon), { key: 0 })) : renderSlot(_ctx.$slots, "icon", { key: 1 })\n          ]),\n          _: 3\n        })) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n        _ctx.$slots.default ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n          key: 2,\n          class: normalizeClass({ [reactivity_esm_bundler_unref(ns).em("text", "expand")]: reactivity_esm_bundler_unref(shouldAddSpace) })\n        }, [\n          renderSlot(_ctx.$slots, "default")\n        ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n      ], 14, button2_hoisted_1);\n    };\n  }\n});\n\n\n//# sourceMappingURL=button2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button-group.mjs\n\n\nconst buttonGroupProps = {\n  size: buttonProps.size,\n  type: buttonProps.type\n};\n\n\n//# sourceMappingURL=button-group.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/src/button-group2.mjs\n\n\n\n\n\n\n\nconst button_group2_default_ = {\n  name: "ElButtonGroup"\n};\nconst button_group2_sfc_main = /* @__PURE__ */ defineComponent({\n  ...button_group2_default_,\n  props: buttonGroupProps,\n  setup(__props) {\n    const props = __props;\n    runtime_core_esm_bundler_provide(buttonGroupContextKey, reactivity_esm_bundler_reactive({\n      size: reactivity_esm_bundler_toRef(props, "size"),\n      type: reactivity_esm_bundler_toRef(props, "type")\n    }));\n    const ns = useNamespace("button");\n    return (_ctx, _cache) => {\n      return runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n        class: normalizeClass(`${reactivity_esm_bundler_unref(ns).b("group")}`)\n      }, [\n        renderSlot(_ctx.$slots, "default")\n      ], 2);\n    };\n  }\n});\n\n\n//# sourceMappingURL=button-group2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/button/index.mjs\n\n\n\n\n\n\nconst ElButton = withInstall(button2_sfc_main, {\n  ButtonGroup: button_group2_sfc_main\n});\nconst ElButtonGroup = withNoopInstall(button_group2_sfc_main);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/view.mjs\n\n\n\nconst view_sfc_main = defineComponent({\n  name: "View"\n});\nconst view_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst view_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352zm0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 110 448 224 224 0 010-448zm0 64a160.192 160.192 0 00-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160z"\n}, null, -1);\nconst view_hoisted_3 = [\n  view_hoisted_2\n];\nfunction view_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", view_hoisted_1, view_hoisted_3);\n}\nvar view = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(view_sfc_main, [["render", view_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/src/calc-textarea-height.mjs\n\n\n\nlet hiddenTextarea = void 0;\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`;\nconst CONTEXT_STYLE = [\n  "letter-spacing",\n  "line-height",\n  "padding-top",\n  "padding-bottom",\n  "font-family",\n  "font-weight",\n  "font-size",\n  "text-rendering",\n  "text-transform",\n  "width",\n  "text-indent",\n  "padding-left",\n  "padding-right",\n  "border-width",\n  "box-sizing"\n];\nfunction calculateNodeStyling(targetElement) {\n  const style = window.getComputedStyle(targetElement);\n  const boxSizing = style.getPropertyValue("box-sizing");\n  const paddingSize = parseFloat(style.getPropertyValue("padding-bottom")) + parseFloat(style.getPropertyValue("padding-top"));\n  const borderSize = parseFloat(style.getPropertyValue("border-bottom-width")) + parseFloat(style.getPropertyValue("border-top-width"));\n  const contextStyle = CONTEXT_STYLE.map((name) => `${name}:${style.getPropertyValue(name)}`).join(";");\n  return { contextStyle, paddingSize, borderSize, boxSizing };\n}\nfunction calcTextareaHeight(targetElement, minRows = 1, maxRows) {\n  var _a;\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement("textarea");\n    document.body.appendChild(hiddenTextarea);\n  }\n  const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement);\n  hiddenTextarea.setAttribute("style", `${contextStyle};${HIDDEN_STYLE}`);\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";\n  let height = hiddenTextarea.scrollHeight;\n  const result = {};\n  if (boxSizing === "border-box") {\n    height = height + borderSize;\n  } else if (boxSizing === "content-box") {\n    height = height - paddingSize;\n  }\n  hiddenTextarea.value = "";\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n  if (shared_isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows;\n    if (boxSizing === "border-box") {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n    height = Math.max(minHeight, height);\n    result.minHeight = `${minHeight}px`;\n  }\n  if (shared_isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows;\n    if (boxSizing === "border-box") {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n    height = Math.min(maxHeight, height);\n  }\n  result.height = `${height}px`;\n  (_a = hiddenTextarea.parentNode) == null ? void 0 : _a.removeChild(hiddenTextarea);\n  hiddenTextarea = void 0;\n  return result;\n}\n\n\n//# sourceMappingURL=calc-textarea-height.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/typescript.mjs\nconst mutable = (val) => val;\n\n\n//# sourceMappingURL=typescript.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/constants/event.mjs\nconst UPDATE_MODEL_EVENT = "update:modelValue";\nconst CHANGE_EVENT = "change";\nconst INPUT_EVENT = "input";\n\n\n//# sourceMappingURL=event.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/src/input.mjs\n\n\n\n\n\n\n\n\n\n\nconst inputProps = props_buildProps({\n  size: useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType(void 0),\n    default: ""\n  },\n  type: {\n    type: String,\n    default: "text"\n  },\n  resize: {\n    type: String,\n    values: ["none", "both", "horizontal", "vertical"]\n  },\n  autosize: {\n    type: definePropType([Boolean, Object]),\n    default: false\n  },\n  autocomplete: {\n    type: String,\n    default: "off"\n  },\n  placeholder: {\n    type: String\n  },\n  form: {\n    type: String,\n    default: ""\n  },\n  readonly: {\n    type: Boolean,\n    default: false\n  },\n  clearable: {\n    type: Boolean,\n    default: false\n  },\n  showPassword: {\n    type: Boolean,\n    default: false\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false\n  },\n  suffixIcon: {\n    type: iconPropType,\n    default: ""\n  },\n  prefixIcon: {\n    type: iconPropType,\n    default: ""\n  },\n  label: {\n    type: String\n  },\n  tabindex: {\n    type: [Number, String]\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  },\n  inputStyle: {\n    type: definePropType([Object, Array, String]),\n    default: () => mutable({})\n  }\n});\nconst inputEmits = {\n  [UPDATE_MODEL_EVENT]: (value) => shared_esm_bundler_isString(value),\n  input: (value) => shared_esm_bundler_isString(value),\n  change: (value) => shared_esm_bundler_isString(value),\n  focus: (evt) => evt instanceof FocusEvent,\n  blur: (evt) => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: (evt) => evt instanceof MouseEvent,\n  mouseenter: (evt) => evt instanceof MouseEvent,\n  keydown: (evt) => evt instanceof KeyboardEvent,\n  compositionstart: (evt) => evt instanceof CompositionEvent,\n  compositionupdate: (evt) => evt instanceof CompositionEvent,\n  compositionend: (evt) => evt instanceof CompositionEvent\n};\n\n\n//# sourceMappingURL=input.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-attrs/index.mjs\n\n\n\n\n\nconst DEFAULT_EXCLUDE_KEYS = ["class", "style"];\nconst LISTENER_PREFIX = /^on[A-Z]/;\nconst use_attrs_useAttrs = (params = {}) => {\n  const { excludeListeners = false, excludeKeys = [] } = params;\n  const allExcludeKeys = excludeKeys.concat(DEFAULT_EXCLUDE_KEYS);\n  const instance = runtime_core_esm_bundler_getCurrentInstance();\n  if (!instance) {\n    error_debugWarn("use-attrs", "getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function");\n    return runtime_core_esm_bundler_computed(() => ({}));\n  }\n  return runtime_core_esm_bundler_computed(() => {\n    var _a;\n    return lodash_es_fromPairs(Object.entries((_a = instance.proxy) == null ? void 0 : _a.$attrs).filter(([key]) => !allExcludeKeys.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));\n  });\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/i18n.mjs\nconst isKorean = (text) => /([(\\uAC00-\\uD7AF)|(\\u3130-\\u318F)])+/gi.test(text);\n\n\n//# sourceMappingURL=i18n.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/src/input2.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst PENDANT_MAP = {\n  suffix: "append",\n  prefix: "prepend"\n};\nconst input2_sfc_main = defineComponent({\n  name: "ElInput",\n  components: { ElIcon: ElIcon, CircleClose: circleClose, IconView: view },\n  inheritAttrs: false,\n  props: inputProps,\n  emits: inputEmits,\n  setup(props, { slots, emit, attrs: rawAttrs }) {\n    const instance = runtime_core_esm_bundler_getCurrentInstance();\n    const attrs = use_attrs_useAttrs();\n    const { form, formItem } = useFormItem();\n    const inputSize = useSize();\n    const inputDisabled = useDisabled();\n    const nsInput = useNamespace("input");\n    const nsTextarea = useNamespace("textarea");\n    const input = reactivity_esm_bundler_ref();\n    const textarea = reactivity_esm_bundler_ref();\n    const focused = reactivity_esm_bundler_ref(false);\n    const hovering = reactivity_esm_bundler_ref(false);\n    const isComposing = reactivity_esm_bundler_ref(false);\n    const passwordVisible = reactivity_esm_bundler_ref(false);\n    const _textareaCalcStyle = reactivity_esm_bundler_shallowRef(props.inputStyle);\n    const inputOrTextarea = runtime_core_esm_bundler_computed(() => input.value || textarea.value);\n    const needStatusIcon = runtime_core_esm_bundler_computed(() => {\n      var _a;\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    const validateState = runtime_core_esm_bundler_computed(() => (formItem == null ? void 0 : formItem.validateState) || "");\n    const validateIcon = runtime_core_esm_bundler_computed(() => ValidateComponentsMap[validateState.value]);\n    const containerStyle = runtime_core_esm_bundler_computed(() => rawAttrs.style);\n    const computedTextareaStyle = runtime_core_esm_bundler_computed(() => [\n      props.inputStyle,\n      _textareaCalcStyle.value,\n      { resize: props.resize }\n    ]);\n    const nativeInputValue = runtime_core_esm_bundler_computed(() => props.modelValue === null || props.modelValue === void 0 ? "" : String(props.modelValue));\n    const showClear = runtime_core_esm_bundler_computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value));\n    const showPwdVisible = runtime_core_esm_bundler_computed(() => props.showPassword && !inputDisabled.value && !props.readonly && (!!nativeInputValue.value || focused.value));\n    const isWordLimitVisible = runtime_core_esm_bundler_computed(() => props.showWordLimit && !!attrs.value.maxlength && (props.type === "text" || props.type === "textarea") && !inputDisabled.value && !props.readonly && !props.showPassword);\n    const textLength = runtime_core_esm_bundler_computed(() => Array.from(nativeInputValue.value).length);\n    const inputExceed = runtime_core_esm_bundler_computed(() => !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength));\n    const resizeTextarea = () => {\n      const { type, autosize } = props;\n      if (!shared_isClient || type !== "textarea")\n        return;\n      if (autosize) {\n        const minRows = shared_esm_bundler_isObject(autosize) ? autosize.minRows : void 0;\n        const maxRows = shared_esm_bundler_isObject(autosize) ? autosize.maxRows : void 0;\n        _textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value, minRows, maxRows)\n        };\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n    const setNativeInputValue = () => {\n      const input2 = inputOrTextarea.value;\n      if (!input2 || input2.value === nativeInputValue.value)\n        return;\n      input2.value = nativeInputValue.value;\n    };\n    const calcIconOffset = (place) => {\n      const { el } = instance.vnode;\n      if (!el)\n        return;\n      const elList = Array.from(el.querySelectorAll(`.${nsInput.e(place)}`));\n      const target = elList.find((item) => item.parentNode === el);\n      if (!target)\n        return;\n      const pendant = PENDANT_MAP[place];\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === "suffix" ? "-" : ""}${el.querySelector(`.${nsInput.be("group", pendant)}`).offsetWidth}px)`;\n      } else {\n        target.removeAttribute("style");\n      }\n    };\n    const updateIconOffset = () => {\n      calcIconOffset("prefix");\n      calcIconOffset("suffix");\n    };\n    const handleInput = (event) => {\n      const { value } = event.target;\n      if (isComposing.value)\n        return;\n      if (value === nativeInputValue.value)\n        return;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit("input", value);\n      runtime_core_esm_bundler_nextTick(setNativeInputValue);\n    };\n    const handleChange = (event) => {\n      emit("change", event.target.value);\n    };\n    const focus = () => {\n      runtime_core_esm_bundler_nextTick(() => {\n        var _a;\n        (_a = inputOrTextarea.value) == null ? void 0 : _a.focus();\n      });\n    };\n    const blur = () => {\n      var _a;\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.blur();\n    };\n    const handleFocus = (event) => {\n      focused.value = true;\n      emit("focus", event);\n    };\n    const handleBlur = (event) => {\n      var _a;\n      focused.value = false;\n      emit("blur", event);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "blur");\n      }\n    };\n    const select = () => {\n      var _a;\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.select();\n    };\n    const handleCompositionStart = (event) => {\n      emit("compositionstart", event);\n      isComposing.value = true;\n    };\n    const handleCompositionUpdate = (event) => {\n      var _a;\n      emit("compositionupdate", event);\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      const lastCharacter = text[text.length - 1] || "";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n    const handleCompositionEnd = (event) => {\n      emit("compositionend", event);\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, "");\n      emit("change", "");\n      emit("clear");\n      emit("input", "");\n    };\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n    const suffixVisible = runtime_core_esm_bundler_computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);\n    runtime_core_esm_bundler_watch(() => props.modelValue, () => {\n      var _a;\n      runtime_core_esm_bundler_nextTick(resizeTextarea);\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, "change");\n      }\n    });\n    runtime_core_esm_bundler_watch(nativeInputValue, () => setNativeInputValue());\n    runtime_core_esm_bundler_watch(() => props.type, () => {\n      runtime_core_esm_bundler_nextTick(() => {\n        setNativeInputValue();\n        resizeTextarea();\n        updateIconOffset();\n      });\n    });\n    runtime_core_esm_bundler_onMounted(() => {\n      setNativeInputValue();\n      updateIconOffset();\n      runtime_core_esm_bundler_nextTick(resizeTextarea);\n    });\n    runtime_core_esm_bundler_onUpdated(() => {\n      runtime_core_esm_bundler_nextTick(updateIconOffset);\n    });\n    const onMouseLeave = (evt) => {\n      hovering.value = false;\n      emit("mouseleave", evt);\n    };\n    const onMouseEnter = (evt) => {\n      hovering.value = true;\n      emit("mouseenter", evt);\n    };\n    const handleKeydown = (evt) => {\n      emit("keydown", evt);\n    };\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n      needStatusIcon,\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n      nsInput,\n      nsTextarea\n    };\n  }\n});\nconst input2_hoisted_1 = ["type", "disabled", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder"];\nconst input2_hoisted_2 = ["tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder"];\nfunction input2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent("el-icon");\n  const _component_circle_close = resolveComponent("circle-close");\n  const _component_icon_view = resolveComponent("icon-view");\n  return withDirectives((runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n    class: normalizeClass([\n      _ctx.type === "textarea" ? _ctx.nsTextarea.b() : _ctx.nsInput.b(),\n      _ctx.nsInput.m(_ctx.inputSize),\n      _ctx.nsInput.is("disabled", _ctx.inputDisabled),\n      _ctx.nsInput.is("exceed", _ctx.inputExceed),\n      {\n        [_ctx.nsInput.b("group")]: _ctx.$slots.prepend || _ctx.$slots.append,\n        [_ctx.nsInput.bm("group", "append")]: _ctx.$slots.append,\n        [_ctx.nsInput.bm("group", "prepend")]: _ctx.$slots.prepend,\n        [_ctx.nsInput.m("prefix")]: _ctx.$slots.prefix || _ctx.prefixIcon,\n        [_ctx.nsInput.m("suffix")]: _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword,\n        [_ctx.nsInput.m("suffix--password-clear")]: _ctx.showClear && _ctx.showPwdVisible\n      },\n      _ctx.$attrs.class\n    ]),\n    style: normalizeStyle(_ctx.containerStyle),\n    onMouseenter: _cache[17] || (_cache[17] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),\n    onMouseleave: _cache[18] || (_cache[18] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args))\n  }, [\n    runtime_core_esm_bundler_createCommentVNode(" input "),\n    _ctx.type !== "textarea" ? (runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, { key: 0 }, [\n      runtime_core_esm_bundler_createCommentVNode(" prepend slot "),\n      _ctx.$slots.prepend ? (runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n        key: 0,\n        class: normalizeClass(_ctx.nsInput.be("group", "prepend"))\n      }, [\n        renderSlot(_ctx.$slots, "prepend")\n      ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n      createBaseVNode("input", mergeProps({\n        ref: "input",\n        class: _ctx.nsInput.e("inner")\n      }, _ctx.attrs, {\n        type: _ctx.showPassword ? _ctx.passwordVisible ? "text" : "password" : _ctx.type,\n        disabled: _ctx.inputDisabled,\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        tabindex: _ctx.tabindex,\n        "aria-label": _ctx.label,\n        placeholder: _ctx.placeholder,\n        style: _ctx.inputStyle,\n        onCompositionstart: _cache[0] || (_cache[0] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n        onCompositionupdate: _cache[1] || (_cache[1] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n        onCompositionend: _cache[2] || (_cache[2] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n        onInput: _cache[3] || (_cache[3] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n        onFocus: _cache[4] || (_cache[4] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n        onBlur: _cache[5] || (_cache[5] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n        onChange: _cache[6] || (_cache[6] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n        onKeydown: _cache[7] || (_cache[7] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n      }), null, 16, input2_hoisted_1),\n      runtime_core_esm_bundler_createCommentVNode(" prefix slot "),\n      _ctx.$slots.prefix || _ctx.prefixIcon ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n        key: 1,\n        class: normalizeClass(_ctx.nsInput.e("prefix"))\n      }, [\n        createBaseVNode("span", {\n          class: normalizeClass(_ctx.nsInput.e("prefix-inner"))\n        }, [\n          renderSlot(_ctx.$slots, "prefix"),\n          _ctx.prefixIcon ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n            key: 0,\n            class: normalizeClass(_ctx.nsInput.e("icon"))\n          }, {\n            default: withCtx(() => [\n              (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.prefixIcon)))\n            ]),\n            _: 1\n          }, 8, ["class"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n        ], 2)\n      ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n      runtime_core_esm_bundler_createCommentVNode(" suffix slot "),\n      _ctx.suffixVisible ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n        key: 2,\n        class: normalizeClass(_ctx.nsInput.e("suffix"))\n      }, [\n        createBaseVNode("span", {\n          class: normalizeClass(_ctx.nsInput.e("suffix-inner"))\n        }, [\n          !_ctx.showClear || !_ctx.showPwdVisible || !_ctx.isWordLimitVisible ? (runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, { key: 0 }, [\n            renderSlot(_ctx.$slots, "suffix"),\n            _ctx.suffixIcon ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n              key: 0,\n              class: normalizeClass(_ctx.nsInput.e("icon"))\n            }, {\n              default: withCtx(() => [\n                (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.suffixIcon)))\n              ]),\n              _: 1\n            }, 8, ["class"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n          ], 64)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n          _ctx.showClear ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n            key: 1,\n            class: normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("clear")]),\n            onMousedown: _cache[8] || (_cache[8] = withModifiers(() => {\n            }, ["prevent"])),\n            onClick: _ctx.clear\n          }, {\n            default: withCtx(() => [\n              createVNode(_component_circle_close)\n            ]),\n            _: 1\n          }, 8, ["class", "onClick"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n          _ctx.showPwdVisible ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n            key: 2,\n            class: normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("clear")]),\n            onClick: _ctx.handlePasswordVisible\n          }, {\n            default: withCtx(() => [\n              createVNode(_component_icon_view)\n            ]),\n            _: 1\n          }, 8, ["class", "onClick"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n          _ctx.isWordLimitVisible ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n            key: 3,\n            class: normalizeClass(_ctx.nsInput.e("count"))\n          }, [\n            createBaseVNode("span", {\n              class: normalizeClass(_ctx.nsInput.e("count-inner"))\n            }, toDisplayString(_ctx.textLength) + " / " + toDisplayString(_ctx.attrs.maxlength), 3)\n          ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n        ], 2),\n        _ctx.validateState && _ctx.validateIcon && _ctx.needStatusIcon ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n          key: 0,\n          class: normalizeClass([_ctx.nsInput.e("icon"), _ctx.nsInput.e("validateIcon")])\n        }, {\n          default: withCtx(() => [\n            (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.validateIcon)))\n          ]),\n          _: 1\n        }, 8, ["class"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n      ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n      runtime_core_esm_bundler_createCommentVNode(" append slot "),\n      _ctx.$slots.append ? (runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n        key: 3,\n        class: normalizeClass(_ctx.nsInput.be("group", "append"))\n      }, [\n        renderSlot(_ctx.$slots, "append")\n      ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n    ], 64)) : (runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, { key: 1 }, [\n      runtime_core_esm_bundler_createCommentVNode(" textarea "),\n      createBaseVNode("textarea", mergeProps({\n        ref: "textarea",\n        class: _ctx.nsTextarea.e("inner")\n      }, _ctx.attrs, {\n        tabindex: _ctx.tabindex,\n        disabled: _ctx.inputDisabled,\n        readonly: _ctx.readonly,\n        autocomplete: _ctx.autocomplete,\n        style: _ctx.computedTextareaStyle,\n        "aria-label": _ctx.label,\n        placeholder: _ctx.placeholder,\n        onCompositionstart: _cache[9] || (_cache[9] = (...args) => _ctx.handleCompositionStart && _ctx.handleCompositionStart(...args)),\n        onCompositionupdate: _cache[10] || (_cache[10] = (...args) => _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate(...args)),\n        onCompositionend: _cache[11] || (_cache[11] = (...args) => _ctx.handleCompositionEnd && _ctx.handleCompositionEnd(...args)),\n        onInput: _cache[12] || (_cache[12] = (...args) => _ctx.handleInput && _ctx.handleInput(...args)),\n        onFocus: _cache[13] || (_cache[13] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n        onBlur: _cache[14] || (_cache[14] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n        onChange: _cache[15] || (_cache[15] = (...args) => _ctx.handleChange && _ctx.handleChange(...args)),\n        onKeydown: _cache[16] || (_cache[16] = (...args) => _ctx.handleKeydown && _ctx.handleKeydown(...args))\n      }), null, 16, input2_hoisted_2),\n      _ctx.isWordLimitVisible ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n        key: 0,\n        class: normalizeClass(_ctx.nsInput.e("count"))\n      }, toDisplayString(_ctx.textLength) + " / " + toDisplayString(_ctx.attrs.maxlength), 3)) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n    ], 64))\n  ], 38)), [\n    [vShow, _ctx.type !== "hidden"]\n  ]);\n}\nvar Input = /* @__PURE__ */ _export_sfc(input2_sfc_main, [["render", input2_sfc_render]]);\n\n\n//# sourceMappingURL=input2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/input/index.mjs\n\n\n\n\n\nconst ElInput = withInstall(Input);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/tokens.mjs\nconst POPPER_INJECTION_KEY = Symbol("elPopper");\nconst POPPER_CONTENT_INJECTION_KEY = Symbol("elPopperContent");\n\n\n//# sourceMappingURL=tokens.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/popper2.mjs\n\n\n\n\nconst popper2_sfc_main = defineComponent({\n  name: "ElPopperProvider",\n  inheritAttrs: false,\n  setup() {\n    const popperProvides = {\n      triggerRef: reactivity_esm_bundler_ref(null),\n      popperInstanceRef: reactivity_esm_bundler_ref(null),\n      contentRef: reactivity_esm_bundler_ref(null)\n    };\n    runtime_core_esm_bundler_provide(POPPER_INJECTION_KEY, popperProvides);\n    return popperProvides;\n  }\n});\nfunction popper2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, "default");\n}\nvar Popper = /* @__PURE__ */ _export_sfc(popper2_sfc_main, [["render", popper2_sfc_render]]);\n\n\n//# sourceMappingURL=popper2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/index.mjs\n\n\n\n\n\n\n\n\n\n\nconst ElPopper = withInstall(Popper);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-timeout/index.mjs\n\n\nfunction use_timeout_useTimeout() {\n  let timeoutHandle;\n  const registerTimeout = (fn, delay) => {\n    cancelTimeout();\n    timeoutHandle = window.setTimeout(fn, delay);\n  };\n  const cancelTimeout = () => window.clearTimeout(timeoutHandle);\n  shared_tryOnScopeDispose(() => cancelTimeout());\n  return {\n    registerTimeout,\n    cancelTimeout\n  };\n}\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-delayed-toggle/index.mjs\n\n\n\n\n\nconst useDelayedToggleProps = props_buildProps({\n  showAfter: {\n    type: Number,\n    default: 0\n  },\n  hideAfter: {\n    type: Number,\n    default: 200\n  }\n});\nconst useDelayedToggle = ({\n  showAfter,\n  hideAfter,\n  open,\n  close\n}) => {\n  const { registerTimeout } = use_timeout_useTimeout();\n  const onOpen = () => {\n    registerTimeout(() => {\n      open();\n    }, reactivity_esm_bundler_unref(showAfter));\n  };\n  const onClose = () => {\n    registerTimeout(() => {\n      close();\n    }, reactivity_esm_bundler_unref(hideAfter));\n  };\n  return {\n    onOpen,\n    onClose\n  };\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/enums.js\nvar enums_top = \'top\';\nvar bottom = \'bottom\';\nvar right = \'right\';\nvar left = \'left\';\nvar auto = \'auto\';\nvar basePlacements = [enums_top, bottom, right, left];\nvar start = \'start\';\nvar end = \'end\';\nvar clippingParents = \'clippingParents\';\nvar viewport = \'viewport\';\nvar popper = \'popper\';\nvar reference = \'reference\';\nvar variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + "-" + start, placement + "-" + end]);\n}, []);\nvar enums_placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);\n}, []); // modifiers that need to read the DOM\n\nvar beforeRead = \'beforeRead\';\nvar read = \'read\';\nvar afterRead = \'afterRead\'; // pure-logic modifiers\n\nvar beforeMain = \'beforeMain\';\nvar main = \'main\';\nvar afterMain = \'afterMain\'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nvar beforeWrite = \'beforeWrite\';\nvar write = \'write\';\nvar afterWrite = \'afterWrite\';\nvar modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/popper.mjs\n\n\n\n\nconst effects = (/* unused pure expression or super */ null && (["light", "dark"]));\nconst triggers = (/* unused pure expression or super */ null && (["click", "contextmenu", "hover", "focus"]));\nconst Effect = {\n  LIGHT: "light",\n  DARK: "dark"\n};\nconst usePopperArrowProps = props_buildProps({\n  arrowOffset: {\n    type: Number,\n    default: 5\n  }\n});\nconst usePopperCoreConfigProps = props_buildProps({\n  boundariesPadding: {\n    type: Number,\n    default: 0\n  },\n  fallbackPlacements: {\n    type: definePropType(Array),\n    default: () => []\n  },\n  gpuAcceleration: {\n    type: Boolean,\n    default: true\n  },\n  offset: {\n    type: Number,\n    default: 12\n  },\n  placement: {\n    type: String,\n    values: enums_placements,\n    default: "bottom"\n  },\n  popperOptions: {\n    type: definePropType(Object),\n    default: () => ({})\n  },\n  strategy: {\n    type: String,\n    values: ["fixed", "absolute"],\n    default: "absolute"\n  }\n});\nconst usePopperProps = props_buildProps({\n  autoClose: {\n    type: Number,\n    default: 0\n  },\n  cutoff: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  }\n});\nconst usePopperContentProps = props_buildProps({\n  ...usePopperCoreConfigProps,\n  style: { type: definePropType([String, Array, Object]) },\n  className: { type: definePropType([String, Array, Object]) },\n  effect: {\n    type: String,\n    default: "dark"\n  },\n  visible: {\n    type: Boolean\n  },\n  enterable: {\n    type: Boolean,\n    default: true\n  },\n  pure: {\n    type: Boolean\n  },\n  popperClass: {\n    type: definePropType([String, Array, Object])\n  },\n  popperStyle: {\n    type: definePropType([String, Array, Object])\n  },\n  referenceEl: {\n    type: definePropType(Object)\n  },\n  stopPopperMouseEvent: {\n    type: Boolean,\n    default: true\n  },\n  zIndex: Number\n});\nconst usePopperTriggerProps = props_buildProps({\n  virtualRef: {\n    type: definePropType(Object)\n  },\n  virtualTriggering: {\n    type: Boolean\n  }\n});\n\n\n//# sourceMappingURL=popper.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/rand.mjs\nconst generateId = () => Math.floor(Math.random() * 1e4);\nconst getRandomInt = (max) => Math.floor(Math.random() * Math.floor(max));\n\n\n//# sourceMappingURL=rand.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-popper-container/index.mjs\n\n\n\n\n\nlet cachedContainer;\nconst POPPER_CONTAINER_ID = `el-popper-container-${generateId()}`;\nconst POPPER_CONTAINER_SELECTOR = `#${POPPER_CONTAINER_ID}`;\nconst usePopperContainer = () => {\n  onBeforeMount(() => {\n    if (!shared_isClient)\n      return;\n    if ( false || !cachedContainer) {\n      const container = document.createElement("div");\n      container.id = POPPER_CONTAINER_ID;\n      document.body.appendChild(container);\n      cachedContainer = container;\n    }\n  });\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/tooltip.mjs\n\n\n\n\n\n\n\n\nconst tooltip_triggers = (/* unused pure expression or super */ null && (["hover", "focus", "click", "contextmenu"]));\nconst useTooltipContentProps = props_buildProps({\n  ...useDelayedToggleProps,\n  ...usePopperContentProps,\n  appendTo: {\n    type: definePropType([String, Object]),\n    default: POPPER_CONTAINER_SELECTOR\n  },\n  content: {\n    type: String,\n    default: ""\n  },\n  rawContent: {\n    type: Boolean,\n    default: false\n  },\n  persistent: Boolean,\n  ariaLabel: String,\n  visible: {\n    type: definePropType(Boolean),\n    default: null\n  },\n  transition: {\n    type: String,\n    default: "el-fade-in-linear"\n  },\n  teleported: {\n    type: Boolean,\n    default: true\n  },\n  disabled: {\n    type: Boolean\n  }\n});\nconst useTooltipTriggerProps = props_buildProps({\n  ...usePopperTriggerProps,\n  disabled: Boolean,\n  trigger: {\n    type: definePropType([String, Array]),\n    default: "hover"\n  }\n});\nconst useTooltipProps = props_buildProps({\n  openDelay: {\n    type: Number\n  },\n  visibleArrow: {\n    type: Boolean,\n    default: void 0\n  },\n  hideAfter: {\n    type: Number,\n    default: 200\n  },\n  showArrow: {\n    type: Boolean,\n    default: true\n  }\n});\n\n\n//# sourceMappingURL=tooltip.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/tokens.mjs\nconst TOOLTIP_INJECTION_KEY = Symbol("elTooltip");\n\n\n//# sourceMappingURL=tokens.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindow.js\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== \'[object Window]\') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js\n\n\nfunction instanceOf_isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === \'undefined\') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\n\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/math.js\nvar math_max = Math.max;\nvar math_min = Math.min;\nvar round = Math.round;\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js\n\n\nfunction getBoundingClientRect(element, includeScale) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  var rect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (isHTMLElement(element) && includeScale) {\n    var offsetHeight = element.offsetHeight;\n    var offsetWidth = element.offsetWidth; // Do not attempt to divide by 0, otherwise we get `Infinity` as scale\n    // Fallback to 1 in case both values are `0`\n\n    if (offsetWidth > 0) {\n      scaleX = round(rect.width) / offsetWidth || 1;\n    }\n\n    if (offsetHeight > 0) {\n      scaleY = round(rect.height) / offsetHeight || 1;\n    }\n  }\n\n  return {\n    width: rect.width / scaleX,\n    height: rect.height / scaleY,\n    top: rect.top / scaleY,\n    right: rect.right / scaleX,\n    bottom: rect.bottom / scaleY,\n    left: rect.left / scaleX,\n    x: rect.left / scaleX,\n    y: rect.top / scaleY\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js\n\nfunction getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js\nfunction getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js\n\n\n\n\nfunction getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js\nfunction getNodeName(element) {\n  return element ? (element.nodeName || \'\').toLowerCase() : null;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js\n\nfunction getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((instanceOf_isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js\n\n\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let\'s assume\n  // it\'s not an issue. I don\'t think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn\'t cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js\n\nfunction getComputedStyle_getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js\n\nfunction isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle_getComputedStyle(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js\n\n\n\n\n\n\n\n\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nfunction getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== \'body\' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js\n // Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn\'t take into account transforms.\n\nfunction getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it\'s not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js\n\n\n\nfunction getParentNode(element) {\n  if (getNodeName(element) === \'html\') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js\n\n\n\n\nfunction getScrollParent(node) {\n  if ([\'html\', \'body\', \'#document\'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js\n\n\n\n\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we\'ll need to re-calculate the\nreference element\'s position.\n*/\n\nfunction listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js\n\nfunction isTableElement(element) {\n  return [\'table\', \'td\', \'th\'].indexOf(getNodeName(element)) >= 0;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js\n\n\n\n\n\n\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle_getComputedStyle(element).position === \'fixed\') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = navigator.userAgent.toLowerCase().indexOf(\'firefox\') !== -1;\n  var isIE = navigator.userAgent.indexOf(\'Trident\') !== -1;\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle_getComputedStyle(element);\n\n    if (elementCss.position === \'fixed\') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  while (isHTMLElement(currentNode) && [\'html\', \'body\'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle_getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== \'none\' || css.perspective !== \'none\' || css.contain === \'paint\' || [\'transform\', \'perspective\'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === \'filter\' || isFirefox && css.filter && css.filter !== \'none\') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nfunction getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle_getComputedStyle(offsetParent).position === \'static\') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === \'html\' || getNodeName(offsetParent) === \'body\' && getComputedStyle_getComputedStyle(offsetParent).position === \'static\')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/orderModifiers.js\n // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nfunction orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/debounce.js\nfunction debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergeByName.js\nfunction mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/createPopper.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar INVALID_ELEMENT_ERROR = \'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.\';\nvar INFINITE_LOOP_ERROR = \'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.\';\nvar DEFAULT_OPTIONS = {\n  placement: \'bottom\',\n  modifiers: [],\n  strategy: \'absolute\'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === \'function\');\n  });\n}\n\nfunction popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: \'bottom\',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === \'function\' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: instanceOf_isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        }); // Validate the provided modifiers so that the consumer will get warned\n        // if one of the modifiers is invalid for any reason\n\n        if (false) { var _getComputedStyle, marginTop, marginRight, marginBottom, marginLeft, flipModifier, modifiers; }\n\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don\'t proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          if (false) {}\n\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === \'fixed\'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn\'t persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n        var __debug_loops__ = 0;\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (false) {}\n\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === \'function\') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      if (false) {}\n\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref3) {\n        var name = _ref3.name,\n            _ref3$options = _ref3.options,\n            options = _ref3$options === void 0 ? {} : _ref3$options,\n            effect = _ref3.effect;\n\n        if (typeof effect === \'function\') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nvar createPopper = /*#__PURE__*/(/* unused pure expression or super */ null && (popperGenerator())); // eslint-disable-next-line import/no-unused-modules\n\n\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/eventListeners.js\n // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction eventListeners_effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener(\'scroll\', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener(\'resize\', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener(\'scroll\', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener(\'resize\', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var eventListeners = ({\n  name: \'eventListeners\',\n  enabled: true,\n  phase: \'write\',\n  fn: function fn() {},\n  effect: eventListeners_effect,\n  data: {}\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getBasePlacement.js\n\nfunction getBasePlacement(placement) {\n  return placement.split(\'-\')[0];\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getVariation.js\nfunction getVariation(placement) {\n  return placement.split(\'-\')[1];\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js\nfunction getMainAxisFromPlacement(placement) {\n  return [\'top\', \'bottom\'].indexOf(placement) >= 0 ? \'x\' : \'y\';\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeOffsets.js\n\n\n\n\nfunction computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case enums_top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === \'y\' ? \'height\' : \'width\';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js\n\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: \'absolute\',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_popperOffsets = ({\n  name: \'popperOffsets\',\n  enabled: true,\n  phase: \'read\',\n  fn: popperOffsets,\n  data: {}\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/computeStyles.js\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: \'auto\',\n  right: \'auto\',\n  bottom: \'auto\',\n  left: \'auto\'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  var win = window;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\n\nfunction mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === \'function\' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty(\'x\');\n  var hasY = offsets.hasOwnProperty(\'y\');\n  var sideX = left;\n  var sideY = enums_top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = \'clientHeight\';\n    var widthProp = \'clientWidth\';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle_getComputedStyle(offsetParent).position !== \'static\' && position === \'absolute\') {\n        heightProp = \'scrollHeight\';\n        widthProp = \'scrollWidth\';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn\'t detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === enums_top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === enums_top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? \'0\' : \'\', _Object$assign[sideX] = hasX ? \'0\' : \'\', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : \'\', _Object$assign2[sideX] = hasX ? x + "px" : \'\', _Object$assign2.transform = \'\', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n\n  if (false) { var transitionProperty; }\n\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === \'fixed\'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: \'absolute\',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    \'data-popper-placement\': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_computeStyles = ({\n  name: \'computeStyles\',\n  enabled: true,\n  phase: \'beforeWrite\',\n  fn: computeStyles,\n  data: {}\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/applyStyles.js\n\n // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn\'t support to extend this property, but it\'s the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? \'\' : value);\n      }\n    });\n  });\n}\n\nfunction applyStyles_effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: \'0\',\n      top: \'0\',\n      margin: \'0\'\n    },\n    arrow: {\n      position: \'absolute\'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = \'\';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_applyStyles = ({\n  name: \'applyStyles\',\n  enabled: true,\n  phase: \'write\',\n  fn: applyStyles,\n  effect: applyStyles_effect,\n  requires: [\'computeStyles\']\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/offset.js\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, enums_top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === \'function\' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = enums_placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_offset = ({\n  name: \'offset\',\n  enabled: true,\n  phase: \'main\',\n  requires: [\'popperOffsets\'],\n  fn: offset\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js\nvar hash = {\n  left: \'right\',\n  right: \'left\',\n  bottom: \'top\',\n  top: \'bottom\'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js\nvar getOppositeVariationPlacement_hash = {\n  start: \'end\',\n  end: \'start\'\n};\nfunction getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return getOppositeVariationPlacement_hash[matched];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js\n\n\n\nfunction getViewportRect(element) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0; // NB: This isn\'t supported on iOS <= 12. If the keyboard is open, the popper\n  // can be obscured underneath it.\n  // Also, `html.clientHeight` adds the bottom bar height in Safari iOS, even\n  // if it isn\'t open, so if this isn\'t available, the popper will be detected\n  // to overflow the bottom of the screen too early.\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height; // Uses Layout Viewport (like Chrome; Safari does not currently)\n    // In Chrome, it returns a value very close to 0 (+/-) but contains rounding\n    // errors due to floating point numbers, so we need to check precision.\n    // Safari returns a number <= 0, usually < -1 when pinch-zoomed\n    // Feature detection fails in mobile emulation mode in Chrome.\n    // Math.abs(win.innerWidth / visualViewport.scale - visualViewport.width) <\n    // 0.001\n    // Fallback here: "Not Safari" userAgent\n\n    if (!/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js\n\n\n\n\n // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nfunction getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = math_max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = math_max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle_getComputedStyle(body || html).direction === \'rtl\') {\n    x += math_max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/contains.js\n\nfunction contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/rectToClientRect.js\nfunction rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction getInnerBoundingClientRect(element) {\n  var rect = getBoundingClientRect(element);\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element)) : instanceOf_isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A "clipping parent" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = [\'absolute\', \'fixed\'].indexOf(getComputedStyle_getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!instanceOf_isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return instanceOf_isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== \'body\';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nfunction getClippingRect(element, boundary, rootBoundary) {\n  var mainClippingParents = boundary === \'clippingParents\' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent);\n    accRect.top = math_max(rect.top, accRect.top);\n    accRect.right = math_min(rect.right, accRect.right);\n    accRect.bottom = math_min(rect.bottom, accRect.bottom);\n    accRect.left = math_max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js\nfunction getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js\n\nfunction mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/expandToHashMap.js\nfunction expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/detectOverflow.js\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== \'number\' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(instanceOf_isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: \'absolute\',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [enums_top, bottom].indexOf(key) >= 0 ? \'y\' : \'x\';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js\n\n\n\n\nfunction computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? enums_placements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n\n    if (false) {}\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/flip.js\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [enums_top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? \'width\' : \'height\';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : enums_top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return "break";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === "break") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_flip = ({\n  name: \'flip\',\n  enabled: true,\n  phase: \'main\',\n  fn: flip,\n  requiresIfExists: [\'offset\'],\n  data: {\n    _skip: false\n  }\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/getAltAxis.js\nfunction getAltAxis(axis) {\n  return axis === \'x\' ? \'y\' : \'x\';\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/utils/within.js\n\nfunction within(min, value, max) {\n  return math_max(min, math_min(value, max));\n}\nfunction withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js\n\n\n\n\n\n\n\n\n\n\n\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === \'function\' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === \'number\' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === \'y\' ? enums_top : left;\n    var altSide = mainAxis === \'y\' ? bottom : right;\n    var len = mainAxis === \'y\' ? \'height\' : \'width\';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn\'t go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData[\'arrow#persistent\'] ? state.modifiersData[\'arrow#persistent\'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don\'t want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === \'y\' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? math_min(min, tetherMin) : min, offset, tether ? math_max(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === \'x\' ? enums_top : left;\n\n    var _altSide = mainAxis === \'x\' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === \'y\' ? \'height\' : \'width\';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [enums_top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_preventOverflow = ({\n  name: \'preventOverflow\',\n  enabled: true,\n  phase: \'main\',\n  fn: preventOverflow,\n  requiresIfExists: [\'offset\']\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/arrow.js\n\n\n\n\n\n\n\n\n\n // eslint-disable-next-line import/no-unused-modules\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === \'function\' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== \'number\' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? \'height\' : \'width\';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === \'y\' ? enums_top : left;\n  var maxProp = axis === \'y\' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === \'y\' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn\'t overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction arrow_effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? \'[data-popper-arrow]\' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === \'string\') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (false) {}\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    if (false) {}\n\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_arrow = ({\n  name: \'arrow\',\n  enabled: true,\n  phase: \'main\',\n  fn: arrow,\n  effect: arrow_effect,\n  requires: [\'popperOffsets\'],\n  requiresIfExists: [\'preventOverflow\']\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/modifiers/hide.js\n\n\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [enums_top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: \'reference\'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    \'data-popper-reference-hidden\': isReferenceHidden,\n    \'data-popper-escaped\': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\n/* harmony default export */ var modifiers_hide = ({\n  name: \'hide\',\n  enabled: true,\n  phase: \'main\',\n  requiresIfExists: [\'preventOverflow\'],\n  fn: hide\n});\n;// CONCATENATED MODULE: ./node_modules/@popperjs/core/lib/popper.js\n\n\n\n\n\n\n\n\n\n\nvar defaultModifiers = [eventListeners, modifiers_popperOffsets, modifiers_computeStyles, modifiers_applyStyles, modifiers_offset, modifiers_flip, modifiers_preventOverflow, modifiers_arrow, modifiers_hide];\nvar popper_createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n // eslint-disable-next-line import/no-unused-modules\n\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/utils.mjs\n\n\n\nconst buildPopperOptions = (props, arrowProps) => {\n  const { placement, strategy, popperOptions } = props;\n  const options = {\n    placement,\n    strategy,\n    ...popperOptions,\n    modifiers: genModifiers(props)\n  };\n  attachArrow(options, arrowProps);\n  deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);\n  return options;\n};\nconst unwrapMeasurableEl = ($el) => {\n  let el = null;\n  if (!$el)\n    return null;\n  if ("getBoundingClientRect" in $el || isElement($el)) {\n    el = $el;\n  } else {\n    el = $el.$el;\n  }\n  return el;\n};\nfunction genModifiers(options) {\n  const { offset, gpuAcceleration, fallbackPlacements } = options;\n  return [\n    {\n      name: "offset",\n      options: {\n        offset: [0, offset != null ? offset : 12]\n      }\n    },\n    {\n      name: "preventOverflow",\n      options: {\n        padding: {\n          top: 2,\n          bottom: 2,\n          left: 5,\n          right: 5\n        }\n      }\n    },\n    {\n      name: "flip",\n      options: {\n        padding: 5,\n        fallbackPlacements: fallbackPlacements != null ? fallbackPlacements : []\n      }\n    },\n    {\n      name: "computeStyles",\n      options: {\n        gpuAcceleration,\n        adaptive: gpuAcceleration\n      }\n    }\n  ];\n}\nfunction attachArrow(options, { arrowEl, arrowOffset }) {\n  options.modifiers.push({\n    name: "arrow",\n    options: {\n      element: arrowEl,\n      padding: arrowOffset != null ? arrowOffset : 5\n    }\n  });\n}\nfunction deriveExtraModifiers(options, modifiers) {\n  if (modifiers) {\n    options.modifiers = [...options.modifiers, ...modifiers != null ? modifiers : []];\n  }\n}\n\n\n//# sourceMappingURL=utils.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/content.mjs\n\n\n\n\n\n\n\n\n\n\nconst content_sfc_main = defineComponent({\n  name: "ElPopperContent",\n  props: usePopperContentProps,\n  emits: ["mouseenter", "mouseleave"],\n  setup(props) {\n    const { triggerRef, popperInstanceRef, contentRef } = runtime_core_esm_bundler_inject(POPPER_INJECTION_KEY, void 0);\n    const { nextZIndex } = useZIndex();\n    const ns = useNamespace("popper");\n    const popperContentRef = reactivity_esm_bundler_ref(null);\n    const arrowRef = reactivity_esm_bundler_ref(null);\n    const arrowOffset = reactivity_esm_bundler_ref();\n    runtime_core_esm_bundler_provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset\n    });\n    const contentZIndex = reactivity_esm_bundler_ref(props.zIndex || nextZIndex());\n    const contentStyle = runtime_core_esm_bundler_computed(() => [{ zIndex: reactivity_esm_bundler_unref(contentZIndex) }, props.popperStyle]);\n    const contentClass = runtime_core_esm_bundler_computed(() => [\n      ns.b(),\n      ns.is("pure", props.pure),\n      ns.is(props.effect),\n      props.popperClass\n    ]);\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl\n    }) => {\n      const options = buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: reactivity_esm_bundler_unref(arrowOffset)\n      });\n      return popper_createPopper(referenceEl, popperContentEl, options);\n    };\n    const updatePopper = () => {\n      var _a;\n      (_a = reactivity_esm_bundler_unref(popperInstanceRef)) == null ? void 0 : _a.update();\n      contentZIndex.value = props.zIndex || nextZIndex();\n    };\n    const togglePopoerAlive = () => {\n      var _a;\n      const monitorable = { name: "eventListeners", enabled: props.visible };\n      (_a = reactivity_esm_bundler_unref(popperInstanceRef)) == null ? void 0 : _a.setOptions((options) => ({\n        ...options,\n        modifiers: [...options.modifiers, monitorable]\n      }));\n    };\n    runtime_core_esm_bundler_onMounted(() => {\n      let updateHandle;\n      runtime_core_esm_bundler_watch(() => unwrapMeasurableEl(props.referenceEl) || reactivity_esm_bundler_unref(triggerRef), (val) => {\n        var _a;\n        updateHandle == null ? void 0 : updateHandle();\n        if (val) {\n          (_a = popperInstanceRef.value) == null ? void 0 : _a.destroy();\n          const popperContentEl = reactivity_esm_bundler_unref(popperContentRef);\n          contentRef.value = popperContentEl;\n          const arrowEl = reactivity_esm_bundler_unref(arrowRef);\n          const newInstance = createPopperInstance({\n            referenceEl: val,\n            popperContentEl: reactivity_esm_bundler_unref(popperContentRef),\n            arrowEl\n          });\n          popperInstanceRef.value = newInstance;\n          updateHandle = runtime_core_esm_bundler_watch(() => val.getBoundingClientRect(), () => {\n            updatePopper();\n          }, {\n            immediate: true\n          });\n        } else {\n          popperInstanceRef.value = null;\n        }\n      }, {\n        immediate: true\n      });\n      runtime_core_esm_bundler_watch(() => props.visible, togglePopoerAlive, { immediate: true });\n      runtime_core_esm_bundler_watch(() => buildPopperOptions(props, {\n        arrowEl: reactivity_esm_bundler_unref(arrowRef),\n        arrowOffset: reactivity_esm_bundler_unref(arrowOffset)\n      }), (option) => {\n        var _a;\n        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);\n      });\n    });\n    return {\n      ns,\n      popperContentRef,\n      popperInstanceRef,\n      contentStyle,\n      contentClass,\n      updatePopper\n    };\n  }\n});\nfunction content_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n    ref: "popperContentRef",\n    style: normalizeStyle(_ctx.contentStyle),\n    class: normalizeClass(_ctx.contentClass),\n    role: "tooltip",\n    onMouseenter: _cache[0] || (_cache[0] = (e) => _ctx.$emit("mouseenter", e)),\n    onMouseleave: _cache[1] || (_cache[1] = (e) => _ctx.$emit("mouseleave", e))\n  }, [\n    renderSlot(_ctx.$slots, "default")\n  ], 38);\n}\nvar ElPopperContent = /* @__PURE__ */ _export_sfc(content_sfc_main, [["render", content_sfc_render]]);\n\n\n//# sourceMappingURL=content.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/visual-hidden/src/visual-hidden.mjs\n\n\n\nconst visual_hidden_sfc_main = defineComponent({\n  name: "ElVisuallyHidden",\n  props: {\n    style: {\n      type: [String, Object, Array]\n    }\n  },\n  setup(props) {\n    return {\n      computedStyle: runtime_core_esm_bundler_computed(() => {\n        return [\n          props.style,\n          {\n            position: "absolute",\n            border: 0,\n            width: 1,\n            height: 1,\n            padding: 0,\n            margin: -1,\n            overflow: "hidden",\n            clip: "rect(0, 0, 0, 0)",\n            whiteSpace: "nowrap",\n            wordWrap: "normal"\n          }\n        ];\n      })\n    };\n  }\n});\nfunction visual_hidden_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("span", mergeProps(_ctx.$attrs, { style: _ctx.computedStyle }), null, 16);\n}\nvar ElVisuallyHidden = /* @__PURE__ */ _export_sfc(visual_hidden_sfc_main, [["render", visual_hidden_sfc_render]]);\n\n\n//# sourceMappingURL=visual-hidden.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/event.mjs\nconst on = (element, event, handler, useCapture = false) => {\n  if (element && event && handler) {\n    element == null ? void 0 : element.addEventListener(event, handler, useCapture);\n  }\n};\nconst off = (element, event, handler, useCapture = false) => {\n  if (element && event && handler) {\n    element == null ? void 0 : element.removeEventListener(event, handler, useCapture);\n  }\n};\nconst once = (el, event, fn) => {\n  const listener = function(...args) {\n    if (fn) {\n      fn.apply(this, args);\n    }\n    off(el, event, listener);\n  };\n  on(el, event, listener);\n};\nconst composeEventHandlers = (theirsHandler, oursHandler, { checkForDefaultPrevented = true } = {}) => {\n  const handleEvent = (event) => {\n    const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);\n    if (checkForDefaultPrevented === false || !shouldPrevent) {\n      return oursHandler == null ? void 0 : oursHandler(event);\n    }\n  };\n  return handleEvent;\n};\nconst whenMouse = (handler) => {\n  return (e) => e.pointerType === "mouse" ? handler(e) : void 0;\n};\n\n\n//# sourceMappingURL=event.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-escape-keydown/index.mjs\n\n\n\n\n\n\nconst useEscapeKeydown = (handler) => {\n  const cachedHandler = (e) => {\n    const event = e;\n    if (event.key === EVENT_CODE.esc) {\n      handler == null ? void 0 : handler(event);\n    }\n  };\n  runtime_core_esm_bundler_onMounted(() => {\n    on(document, "keydown", cachedHandler);\n  });\n  runtime_core_esm_bundler_onBeforeUnmount(() => {\n    off(document, "keydown", cachedHandler);\n  });\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/content.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst src_content_sfc_main = defineComponent({\n  name: "ElTooltipContent",\n  components: {\n    ElPopperContent: ElPopperContent,\n    ElVisuallyHidden: ElVisuallyHidden\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n  setup(props) {\n    const contentRef = reactivity_esm_bundler_ref(null);\n    const intermediateOpen = reactivity_esm_bundler_ref(false);\n    const entering = reactivity_esm_bundler_ref(false);\n    const leaving = reactivity_esm_bundler_ref(false);\n    const {\n      controlled,\n      id,\n      open,\n      trigger,\n      onClose,\n      onOpen,\n      onShow,\n      onHide,\n      onBeforeShow,\n      onBeforeHide\n    } = runtime_core_esm_bundler_inject(TOOLTIP_INJECTION_KEY, void 0);\n    const persistentRef = runtime_core_esm_bundler_computed(() => {\n      if (false) {}\n      return props.persistent;\n    });\n    const shouldRender = runtime_core_esm_bundler_computed(() => {\n      return reactivity_esm_bundler_unref(persistentRef) ? true : reactivity_esm_bundler_unref(open);\n    });\n    const shouldShow = runtime_core_esm_bundler_computed(() => {\n      return props.disabled ? false : reactivity_esm_bundler_unref(open);\n    });\n    const contentStyle = runtime_core_esm_bundler_computed(() => {\n      var _a;\n      return (_a = props.style) != null ? _a : {};\n    });\n    const ariaHidden = runtime_core_esm_bundler_computed(() => !reactivity_esm_bundler_unref(open));\n    useEscapeKeydown(onClose);\n    const onTransitionLeave = () => {\n      onHide();\n    };\n    const stopWhenControlled = () => {\n      if (reactivity_esm_bundler_unref(controlled))\n        return true;\n    };\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable && reactivity_esm_bundler_unref(trigger) === "hover") {\n        onOpen();\n      }\n    });\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (reactivity_esm_bundler_unref(trigger) === "hover") {\n        onClose();\n      }\n    });\n    const onBeforeEnter = () => {\n      var _a, _b;\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      onBeforeShow();\n    };\n    const onBeforeLeave = () => {\n      onBeforeHide();\n    };\n    const onAfterShow = () => {\n      onShow();\n    };\n    let stopHandle;\n    runtime_core_esm_bundler_watch(() => reactivity_esm_bundler_unref(open), (val) => {\n      if (val) {\n        stopHandle = onClickOutside(runtime_core_esm_bundler_computed(() => {\n          var _a;\n          return (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n        }), () => {\n          if (reactivity_esm_bundler_unref(controlled))\n            return;\n          const $trigger = reactivity_esm_bundler_unref(trigger);\n          if ($trigger !== "hover") {\n            onClose();\n          }\n        });\n      } else {\n        stopHandle == null ? void 0 : stopHandle();\n      }\n    }, {\n      flush: "post"\n    });\n    return {\n      ariaHidden,\n      entering,\n      leaving,\n      id,\n      intermediateOpen,\n      contentStyle,\n      contentRef,\n      shouldRender,\n      shouldShow,\n      open,\n      onAfterShow,\n      onBeforeEnter,\n      onBeforeLeave,\n      onContentEnter,\n      onContentLeave,\n      onTransitionLeave\n    };\n  }\n});\nfunction src_content_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_visually_hidden = resolveComponent("el-visually-hidden");\n  const _component_el_popper_content = resolveComponent("el-popper-content");\n  return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(Teleport, {\n    disabled: !_ctx.teleported,\n    to: _ctx.appendTo\n  }, [\n    createVNode(Transition, {\n      name: _ctx.transition,\n      onAfterLeave: _ctx.onTransitionLeave,\n      onBeforeEnter: _ctx.onBeforeEnter,\n      onAfterEnter: _ctx.onAfterShow,\n      onBeforeLeave: _ctx.onBeforeLeave\n    }, {\n      default: withCtx(() => [\n        _ctx.shouldRender ? withDirectives((runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_popper_content, mergeProps({\n          key: 0,\n          ref: "contentRef"\n        }, _ctx.$attrs, {\n          "aria-hidden": _ctx.ariaHidden,\n          "boundaries-padding": _ctx.boundariesPadding,\n          "fallback-placements": _ctx.fallbackPlacements,\n          "gpu-acceleration": _ctx.gpuAcceleration,\n          offset: _ctx.offset,\n          placement: _ctx.placement,\n          "popper-options": _ctx.popperOptions,\n          strategy: _ctx.strategy,\n          effect: _ctx.effect,\n          enterable: _ctx.enterable,\n          pure: _ctx.pure,\n          "popper-class": _ctx.popperClass,\n          "popper-style": [_ctx.popperStyle, _ctx.contentStyle],\n          "reference-el": _ctx.referenceEl,\n          visible: _ctx.shouldShow,\n          "z-index": _ctx.zIndex,\n          onMouseenter: _ctx.onContentEnter,\n          onMouseleave: _ctx.onContentLeave\n        }), {\n          default: withCtx(() => [\n            renderSlot(_ctx.$slots, "default"),\n            createVNode(_component_el_visually_hidden, {\n              id: _ctx.id,\n              role: "tooltip"\n            }, {\n              default: withCtx(() => [\n                createTextVNode(toDisplayString(_ctx.ariaLabel), 1)\n              ]),\n              _: 1\n            }, 8, ["id"])\n          ]),\n          _: 3\n        }, 16, ["aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "visible", "z-index", "onMouseenter", "onMouseleave"])), [\n          [vShow, _ctx.shouldShow]\n        ]) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n      ]),\n      _: 3\n    }, 8, ["name", "onAfterLeave", "onBeforeEnter", "onAfterEnter", "onBeforeLeave"])\n  ], 8, ["disabled", "to"]);\n}\nvar ElTooltipContent = /* @__PURE__ */ _export_sfc(src_content_sfc_main, [["render", src_content_sfc_render]]);\n\n\n//# sourceMappingURL=content.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/utils.mjs\n\n\n\n\nconst isTriggerType = (trigger, type) => {\n  if (shared_esm_bundler_isArray(trigger)) {\n    return trigger.includes(type);\n  }\n  return trigger === type;\n};\nconst whenTrigger = (trigger, type, handler) => {\n  return (e) => {\n    isTriggerType(reactivity_esm_bundler_unref(trigger), type) && handler(e);\n  };\n};\n\n\n//# sourceMappingURL=utils.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-forward-ref/index.mjs\n\n\nconst FORWARD_REF_INJECTION_KEY = Symbol("elForwardRef");\nconst useForwardRef = (forwardRef) => {\n  const setForwardRef = (el) => {\n    forwardRef.value = el;\n  };\n  runtime_core_esm_bundler_provide(FORWARD_REF_INJECTION_KEY, {\n    setForwardRef\n  });\n};\nconst useForwardRefDirective = (setForwardRef) => {\n  return {\n    mounted(el) {\n      setForwardRef(el);\n    },\n    updated(el) {\n      setForwardRef(el);\n    },\n    unmounted() {\n      setForwardRef(null);\n    }\n  };\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/slot/src/only-child.mjs\n\n\n\n\n\n\n\nconst NAME = "ElOnlyChild";\nconst OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    var _a;\n    const forwardRefInjection = runtime_core_esm_bundler_inject(FORWARD_REF_INJECTION_KEY, void 0);\n    const forwardRefDirective = useForwardRefDirective((_a = forwardRefInjection.setForwardRef) != null ? _a : shared_esm_bundler_NOOP);\n    return () => {\n      var _a2;\n      const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots, attrs);\n      if (!defaultSlot)\n        return null;\n      if (defaultSlot.length > 1) {\n        error_debugWarn(NAME, "ElOnlyChild requires exact only one valid child.");\n        return null;\n      }\n      const firstLegitNode = findFirstLegitChild(defaultSlot);\n      if (!firstLegitNode) {\n        error_debugWarn(NAME, "no valid child node found");\n        return null;\n      }\n      return withDirectives(cloneVNode(firstLegitNode, attrs), [\n        [forwardRefDirective]\n      ]);\n    };\n  }\n});\nfunction findFirstLegitChild(node) {\n  if (!node)\n    return null;\n  const children = node;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    if (shared_esm_bundler_isObject(child)) {\n      switch (child.type) {\n        case runtime_core_esm_bundler_Comment:\n          continue;\n        case runtime_core_esm_bundler_Text:\n          return wrapTextContent(child);\n        case "svg":\n          return wrapTextContent(child);\n        case runtime_core_esm_bundler_Fragment:\n          return findFirstLegitChild(child.children);\n        default:\n          return child;\n      }\n    }\n    return wrapTextContent(child);\n  }\n  return null;\n}\nfunction wrapTextContent(s) {\n  return h("span", { class: "el-only-child__content" }, [s]);\n}\n\n\n//# sourceMappingURL=only-child.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/trigger.mjs\n\n\n\n\n\n\n\n\n\n\n\n\nconst trigger_sfc_main = defineComponent({\n  name: "ElPopperTrigger",\n  components: { ElOnlyChild: OnlyChild },\n  inheritAttrs: false,\n  props: {\n    ...usePopperTriggerProps,\n    onMouseenter: Function,\n    onMouseleave: Function,\n    onClick: Function,\n    onKeydown: Function,\n    onFocus: Function,\n    onBlur: Function,\n    onContextmenu: Function,\n    id: String,\n    open: Boolean\n  },\n  setup(props) {\n    const { triggerRef } = runtime_core_esm_bundler_inject(POPPER_INJECTION_KEY, void 0);\n    useForwardRef(triggerRef);\n    runtime_core_esm_bundler_watch(() => props.virtualRef, (val) => {\n      if (val) {\n        triggerRef.value = unwrapMeasurableEl(val);\n      }\n    }, {\n      immediate: true\n    });\n    runtime_core_esm_bundler_watch(() => triggerRef.value, (el, prevEl) => {\n      if (isElement(el)) {\n        ;\n        [\n          "onMouseenter",\n          "onMouseleave",\n          "onClick",\n          "onKeydown",\n          "onFocus",\n          "onBlur",\n          "onContextmenu"\n        ].forEach((eventName) => {\n          const handler = props[eventName];\n          if (handler) {\n            ;\n            el.addEventListener(eventName.slice(2).toLowerCase(), handler);\n            prevEl == null ? void 0 : prevEl.removeEventListener(eventName.slice(2).toLowerCase(), handler);\n          }\n        });\n      }\n    }, {\n      immediate: true\n    });\n    return {\n      triggerRef\n    };\n  }\n});\nfunction trigger_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_only_child = resolveComponent("el-only-child");\n  return !_ctx.virtualTriggering ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_only_child, mergeProps({ key: 0 }, _ctx.$attrs, {\n    "aria-describedby": _ctx.open ? _ctx.id : void 0\n  }), {\n    default: withCtx(() => [\n      renderSlot(_ctx.$slots, "default")\n    ]),\n    _: 3\n  }, 16, ["aria-describedby"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true);\n}\nvar ElPopperTrigger = /* @__PURE__ */ _export_sfc(trigger_sfc_main, [["render", trigger_sfc_render]]);\n\n\n//# sourceMappingURL=trigger.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/trigger.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst src_trigger_sfc_main = defineComponent({\n  name: "ElTooltipTrigger",\n  components: {\n    ElPopperTrigger: ElPopperTrigger\n  },\n  props: useTooltipTriggerProps,\n  setup(props) {\n    const ns = useNamespace("tooltip");\n    const { controlled, id, open, onOpen, onClose, onToggle } = runtime_core_esm_bundler_inject(TOOLTIP_INJECTION_KEY, void 0);\n    const triggerRef = reactivity_esm_bundler_ref(null);\n    const stopWhenControlledOrDisabled = () => {\n      if (reactivity_esm_bundler_unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n    const trigger = reactivity_esm_bundler_toRef(props, "trigger");\n    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onOpen));\n    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onClose));\n    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "click", (e) => {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onOpen));\n    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onClose));\n    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "contextmenu", (e) => {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e) => {\n      const { code } = e;\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n        onToggle(e);\n      }\n    });\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns\n    };\n  }\n});\nfunction src_trigger_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_popper_trigger = resolveComponent("el-popper-trigger");\n  return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_popper_trigger, {\n    id: _ctx.id,\n    "virtual-ref": _ctx.virtualRef,\n    open: _ctx.open,\n    "virtual-triggering": _ctx.virtualTriggering,\n    class: normalizeClass(_ctx.ns.e("trigger")),\n    onBlur: _ctx.onBlur,\n    onClick: _ctx.onClick,\n    onContextmenu: _ctx.onContextMenu,\n    onFocus: _ctx.onFocus,\n    onMouseenter: _ctx.onMouseenter,\n    onMouseleave: _ctx.onMouseleave,\n    onKeydown: _ctx.onKeydown\n  }, {\n    default: withCtx(() => [\n      renderSlot(_ctx.$slots, "default")\n    ]),\n    _: 3\n  }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);\n}\nvar ElTooltipTrigger = /* @__PURE__ */ _export_sfc(src_trigger_sfc_main, [["render", src_trigger_sfc_render]]);\n\n\n//# sourceMappingURL=trigger.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-model-toggle/index.mjs\n\n\n\n\n\n\nconst _prop = buildProp({\n  type: definePropType(Boolean),\n  default: null\n});\nconst _event = buildProp({\n  type: definePropType(Function)\n});\nconst createModelToggleComposable = (name) => {\n  const useModelToggleProps2 = {\n    [name]: _prop,\n    [`onUpdate:${name}`]: _event\n  };\n  const useModelToggleEmits2 = [`update:${name}`];\n  const useModelToggle2 = ({\n    indicator,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide\n  }) => {\n    const instance = runtime_core_esm_bundler_getCurrentInstance();\n    const props = instance.props;\n    const { emit } = instance;\n    const updateEventKey = `update:${name}`;\n    const hasUpdateHandler = runtime_core_esm_bundler_computed(() => shared_esm_bundler_isFunction(props[`onUpdate:${name}`]));\n    const isModelBindingAbsent = runtime_core_esm_bundler_computed(() => props[name] === null);\n    const doShow = () => {\n      if (indicator.value === true) {\n        return;\n      }\n      indicator.value = true;\n      if (shared_esm_bundler_isFunction(onShow)) {\n        onShow();\n      }\n    };\n    const doHide = () => {\n      if (indicator.value === false) {\n        return;\n      }\n      indicator.value = false;\n      if (shared_esm_bundler_isFunction(onHide)) {\n        onHide();\n      }\n    };\n    const show = () => {\n      if (props.disabled === true || shared_esm_bundler_isFunction(shouldProceed) && !shouldProceed())\n        return;\n      const shouldEmit = hasUpdateHandler.value && shared_isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow();\n      }\n    };\n    const hide = () => {\n      if (props.disabled === true || !shared_isClient)\n        return;\n      const shouldEmit = hasUpdateHandler.value && shared_isClient;\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide();\n      }\n    };\n    const onChange = (val) => {\n      if (!shared_isBoolean(val))\n        return;\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n    const toggle = () => {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n    runtime_core_esm_bundler_watch(() => props[name], onChange);\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      runtime_core_esm_bundler_watch(() => ({\n        ...instance.proxy.$route\n      }), () => {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n    runtime_core_esm_bundler_onMounted(() => {\n      onChange(props[name]);\n    });\n    return {\n      hide,\n      show,\n      toggle\n    };\n  };\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } = createModelToggleComposable("modelValue");\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/arrow.mjs\n\n\n\n\n\n\n\nconst arrow_sfc_main = defineComponent({\n  name: "ElPopperArrow",\n  props: usePopperArrowProps,\n  setup(props) {\n    const ns = useNamespace("popper");\n    const arrowRef = reactivity_esm_bundler_ref(null);\n    const popperContentInjection = runtime_core_esm_bundler_inject(POPPER_CONTENT_INJECTION_KEY, void 0);\n    runtime_core_esm_bundler_watch(() => props.arrowOffset, (val) => {\n      popperContentInjection.arrowOffset.value = val;\n    });\n    runtime_core_esm_bundler_onMounted(() => {\n      popperContentInjection.arrowRef.value = reactivity_esm_bundler_unref(arrowRef);\n    });\n    runtime_core_esm_bundler_onBeforeUnmount(() => {\n      popperContentInjection.arrowRef.value = null;\n    });\n    return {\n      ns,\n      arrowRef\n    };\n  }\n});\nfunction arrow_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n    ref: "arrowRef",\n    class: normalizeClass(_ctx.ns.e("arrow")),\n    "data-popper-arrow": ""\n  }, null, 2);\n}\nvar ElPopperArrow = /* @__PURE__ */ _export_sfc(arrow_sfc_main, [["render", arrow_sfc_render]]);\n\n\n//# sourceMappingURL=arrow.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-id/index.mjs\n\n\n\n\n\nconst defaultIdInjection = {\n  prefix: Math.floor(Math.random() * 1e4),\n  current: 0\n};\nconst ID_INJECTION_KEY = Symbol("elIdInjection");\nconst useId = (deterministicId) => {\n  const idInjection = runtime_core_esm_bundler_inject(ID_INJECTION_KEY, defaultIdInjection);\n  if (!shared_isClient && idInjection === defaultIdInjection) {\n    error_debugWarn("IdInjection", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed\nusage: app.provide(ID_INJECTION_KEY, {\n  prefix: number,\n  current: number,\n})`);\n  }\n  const idRef = runtime_core_esm_bundler_computed(() => reactivity_esm_bundler_unref(deterministicId) || `el-id-${idInjection.prefix}-${idInjection.current++}`);\n  return idRef;\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/src/tooltip2.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst { useModelToggleProps: tooltip2_useModelToggleProps, useModelToggle: tooltip2_useModelToggle, useModelToggleEmits: tooltip2_useModelToggleEmits } = createModelToggleComposable("visible");\nconst tooltip2_sfc_main = defineComponent({\n  name: "ElTooltip",\n  components: {\n    ElPopper: ElPopper,\n    ElPopperArrow: ElPopperArrow,\n    ElTooltipContent: ElTooltipContent,\n    ElTooltipTrigger: ElTooltipTrigger\n  },\n  props: {\n    ...tooltip2_useModelToggleProps,\n    ...useTooltipContentProps,\n    ...useTooltipTriggerProps,\n    ...usePopperArrowProps,\n    ...useTooltipProps\n  },\n  emits: [...tooltip2_useModelToggleEmits, "before-show", "before-hide", "show", "hide"],\n  setup(props, { emit }) {\n    usePopperContainer();\n    const compatShowAfter = runtime_core_esm_bundler_computed(() => {\n      if (!isUndefined(props.openDelay)) {\n        error_debugWarn("ElTooltip", "open-delay is about to be deprecated in the next major version, please use `show-after` instead");\n      }\n      return props.openDelay || props.showAfter;\n    });\n    const compatShowArrow = runtime_core_esm_bundler_computed(() => {\n      if (!isUndefined(props.visibleArrow)) {\n        error_debugWarn("ElTooltip", "`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead");\n      }\n      return shared_isBoolean(props.visibleArrow) ? props.visibleArrow : props.showArrow;\n    });\n    const id = useId();\n    const popperRef = reactivity_esm_bundler_ref(null);\n    const updatePopper = () => {\n      var _a;\n      const popperComponent = reactivity_esm_bundler_unref(popperRef);\n      if (popperComponent) {\n        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();\n      }\n    };\n    const open = reactivity_esm_bundler_ref(false);\n    const { show, hide } = tooltip2_useModelToggle({\n      indicator: open\n    });\n    const { onOpen, onClose } = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: reactivity_esm_bundler_toRef(props, "hideAfter"),\n      open: show,\n      close: hide\n    });\n    const controlled = runtime_core_esm_bundler_computed(() => shared_isBoolean(props.visible));\n    runtime_core_esm_bundler_provide(TOOLTIP_INJECTION_KEY, {\n      controlled,\n      id,\n      open: reactivity_esm_bundler_readonly(open),\n      trigger: reactivity_esm_bundler_toRef(props, "trigger"),\n      onOpen,\n      onClose,\n      onToggle: () => {\n        if (reactivity_esm_bundler_unref(open)) {\n          onClose();\n        } else {\n          onOpen();\n        }\n      },\n      onShow: () => {\n        emit("show");\n      },\n      onHide: () => {\n        emit("hide");\n      },\n      onBeforeShow: () => {\n        emit("before-show");\n      },\n      onBeforeHide: () => {\n        emit("before-hide");\n      },\n      updatePopper\n    });\n    return {\n      compatShowAfter,\n      compatShowArrow,\n      popperRef,\n      open,\n      hide,\n      updatePopper,\n      onOpen,\n      onClose\n    };\n  }\n});\nconst tooltip2_hoisted_1 = ["innerHTML"];\nconst tooltip2_hoisted_2 = { key: 1 };\nfunction tooltip2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip_trigger = resolveComponent("el-tooltip-trigger");\n  const _component_el_popper_arrow = resolveComponent("el-popper-arrow");\n  const _component_el_tooltip_content = resolveComponent("el-tooltip-content");\n  const _component_el_popper = resolveComponent("el-popper");\n  return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_popper, { ref: "popperRef" }, {\n    default: withCtx(() => [\n      createVNode(_component_el_tooltip_trigger, {\n        disabled: _ctx.disabled,\n        trigger: _ctx.trigger,\n        "virtual-ref": _ctx.virtualRef,\n        "virtual-triggering": _ctx.virtualTriggering\n      }, {\n        default: withCtx(() => [\n          _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n        ]),\n        _: 3\n      }, 8, ["disabled", "trigger", "virtual-ref", "virtual-triggering"]),\n      createVNode(_component_el_tooltip_content, {\n        "aria-label": _ctx.ariaLabel,\n        "boundaries-padding": _ctx.boundariesPadding,\n        content: _ctx.content,\n        disabled: _ctx.disabled,\n        effect: _ctx.effect,\n        enterable: _ctx.enterable,\n        "fallback-placements": _ctx.fallbackPlacements,\n        "hide-after": _ctx.hideAfter,\n        "gpu-acceleration": _ctx.gpuAcceleration,\n        offset: _ctx.offset,\n        persistent: _ctx.persistent,\n        "popper-class": _ctx.popperClass,\n        "popper-style": _ctx.popperStyle,\n        placement: _ctx.placement,\n        "popper-options": _ctx.popperOptions,\n        pure: _ctx.pure,\n        "raw-content": _ctx.rawContent,\n        "reference-el": _ctx.referenceEl,\n        "show-after": _ctx.compatShowAfter,\n        strategy: _ctx.strategy,\n        teleported: _ctx.teleported,\n        transition: _ctx.transition,\n        "z-index": _ctx.zIndex,\n        "append-to": _ctx.appendTo\n      }, {\n        default: withCtx(() => [\n          renderSlot(_ctx.$slots, "content", {}, () => [\n            _ctx.rawContent ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n              key: 0,\n              innerHTML: _ctx.content\n            }, null, 8, tooltip2_hoisted_1)) : (runtime_core_esm_bundler_openBlock(), createElementBlock("span", tooltip2_hoisted_2, toDisplayString(_ctx.content), 1))\n          ]),\n          _ctx.compatShowArrow ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_popper_arrow, {\n            key: 0,\n            "arrow-offset": _ctx.arrowOffset\n          }, null, 8, ["arrow-offset"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n        ]),\n        _: 3\n      }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "show-after", "strategy", "teleported", "transition", "z-index", "append-to"])\n    ]),\n    _: 3\n  }, 512);\n}\nvar Tooltip = /* @__PURE__ */ _export_sfc(tooltip2_sfc_main, [["render", tooltip2_sfc_render]]);\n\n\n//# sourceMappingURL=tooltip2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tooltip/index.mjs\n\n\n\n\n\n\nconst ElTooltip = withInstall(Tooltip);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/util.mjs\nconst BAR_MAP = {\n  vertical: {\n    offset: "offsetHeight",\n    scroll: "scrollTop",\n    scrollSize: "scrollHeight",\n    size: "height",\n    key: "vertical",\n    axis: "Y",\n    client: "clientY",\n    direction: "top"\n  },\n  horizontal: {\n    offset: "offsetWidth",\n    scroll: "scrollLeft",\n    scrollSize: "scrollWidth",\n    size: "width",\n    key: "horizontal",\n    axis: "X",\n    client: "clientX",\n    direction: "left"\n  }\n};\nconst renderThumbStyle = ({ move, size, bar }) => ({\n  [bar.size]: size,\n  transform: `translate${bar.axis}(${move}%)`\n});\n\n\n//# sourceMappingURL=util.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/thumb.mjs\n\n\n\nconst thumbProps = props_buildProps({\n  vertical: Boolean,\n  size: String,\n  move: Number,\n  ratio: {\n    type: Number,\n    required: true\n  },\n  always: Boolean\n});\n\n\n//# sourceMappingURL=thumb.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/tokens/scrollbar.mjs\nconst scrollbarContextKey = Symbol("scrollbarContextKey");\n\n\n//# sourceMappingURL=scrollbar.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/thumb2.mjs\n\n\n\n\n\n\n\n\n\n\n\n\nconst COMPONENT_NAME = "Thumb";\nconst thumb2_sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: thumbProps,\n  setup(props) {\n    const scrollbar = runtime_core_esm_bundler_inject(scrollbarContextKey);\n    const ns = useNamespace("scrollbar");\n    if (!scrollbar)\n      throwError(COMPONENT_NAME, "can not inject scrollbar context");\n    const instance = reactivity_esm_bundler_ref();\n    const thumb = reactivity_esm_bundler_ref();\n    const thumbState = reactivity_esm_bundler_ref({});\n    const visible = reactivity_esm_bundler_ref(false);\n    let cursorDown = false;\n    let cursorLeave = false;\n    let originalOnSelectStart = shared_isClient ? document.onselectstart : null;\n    const bar = runtime_core_esm_bundler_computed(() => BAR_MAP[props.vertical ? "vertical" : "horizontal"]);\n    const thumbStyle = runtime_core_esm_bundler_computed(() => renderThumbStyle({\n      size: props.size,\n      move: props.move,\n      bar: bar.value\n    }));\n    const offsetRatio = runtime_core_esm_bundler_computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);\n    const clickThumbHandler = (e) => {\n      var _a;\n      e.stopPropagation();\n      if (e.ctrlKey || [1, 2].includes(e.button))\n        return;\n      (_a = window.getSelection()) == null ? void 0 : _a.removeAllRanges();\n      startDrag(e);\n      const el = e.currentTarget;\n      if (!el)\n        return;\n      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);\n    };\n    const clickTrackHandler = (e) => {\n      if (!thumb.value || !instance.value || !scrollbar.wrapElement)\n        return;\n      const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);\n      const thumbHalf = thumb.value[bar.value.offset] / 2;\n      const thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n    const startDrag = (e) => {\n      e.stopImmediatePropagation();\n      cursorDown = true;\n      document.addEventListener("mousemove", mouseMoveDocumentHandler);\n      document.addEventListener("mouseup", mouseUpDocumentHandler);\n      originalOnSelectStart = document.onselectstart;\n      document.onselectstart = () => false;\n    };\n    const mouseMoveDocumentHandler = (e) => {\n      if (!instance.value || !thumb.value)\n        return;\n      if (cursorDown === false)\n        return;\n      const prevPage = thumbState.value[bar.value.axis];\n      if (!prevPage)\n        return;\n      const offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;\n      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;\n      const thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];\n      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;\n    };\n    const mouseUpDocumentHandler = () => {\n      cursorDown = false;\n      thumbState.value[bar.value.axis] = 0;\n      document.removeEventListener("mousemove", mouseMoveDocumentHandler);\n      document.removeEventListener("mouseup", mouseUpDocumentHandler);\n      restoreOnselectstart();\n      if (cursorLeave)\n        visible.value = false;\n    };\n    const mouseMoveScrollbarHandler = () => {\n      cursorLeave = false;\n      visible.value = !!props.size;\n    };\n    const mouseLeaveScrollbarHandler = () => {\n      cursorLeave = true;\n      visible.value = cursorDown;\n    };\n    runtime_core_esm_bundler_onBeforeUnmount(() => {\n      restoreOnselectstart();\n      document.removeEventListener("mouseup", mouseUpDocumentHandler);\n    });\n    const restoreOnselectstart = () => {\n      if (document.onselectstart !== originalOnSelectStart)\n        document.onselectstart = originalOnSelectStart;\n    };\n    useEventListener(reactivity_esm_bundler_toRef(scrollbar, "scrollbarElement"), "mousemove", mouseMoveScrollbarHandler);\n    useEventListener(reactivity_esm_bundler_toRef(scrollbar, "scrollbarElement"), "mouseleave", mouseLeaveScrollbarHandler);\n    return {\n      ns,\n      instance,\n      thumb,\n      bar,\n      thumbStyle,\n      visible,\n      clickTrackHandler,\n      clickThumbHandler\n    };\n  }\n});\nfunction thumb2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(Transition, {\n    name: _ctx.ns.b("fade")\n  }, {\n    default: withCtx(() => [\n      withDirectives(createBaseVNode("div", {\n        ref: "instance",\n        class: normalizeClass([_ctx.ns.e("bar"), _ctx.ns.is(_ctx.bar.key)]),\n        onMousedown: _cache[1] || (_cache[1] = (...args) => _ctx.clickTrackHandler && _ctx.clickTrackHandler(...args))\n      }, [\n        createBaseVNode("div", {\n          ref: "thumb",\n          class: normalizeClass(_ctx.ns.e("thumb")),\n          style: normalizeStyle(_ctx.thumbStyle),\n          onMousedown: _cache[0] || (_cache[0] = (...args) => _ctx.clickThumbHandler && _ctx.clickThumbHandler(...args))\n        }, null, 38)\n      ], 34), [\n        [vShow, _ctx.always || _ctx.visible]\n      ])\n    ]),\n    _: 1\n  }, 8, ["name"]);\n}\nvar Thumb = /* @__PURE__ */ _export_sfc(thumb2_sfc_main, [["render", thumb2_sfc_render]]);\n\n\n//# sourceMappingURL=thumb2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/bar.mjs\n\n\n\nconst barProps = props_buildProps({\n  always: {\n    type: Boolean,\n    default: true\n  },\n  width: {\n    type: String,\n    default: ""\n  },\n  height: {\n    type: String,\n    default: ""\n  },\n  ratioX: {\n    type: Number,\n    default: 1\n  },\n  ratioY: {\n    type: Number,\n    default: 1\n  }\n});\n\n\n//# sourceMappingURL=bar.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/bar2.mjs\n\n\n\n\n\nconst bar2_sfc_main = defineComponent({\n  components: {\n    Thumb: Thumb\n  },\n  props: barProps,\n  setup(props) {\n    const moveX = reactivity_esm_bundler_ref(0);\n    const moveY = reactivity_esm_bundler_ref(0);\n    const GAP = 4;\n    const handleScroll = (wrap) => {\n      if (wrap) {\n        const offsetHeight = wrap.offsetHeight - GAP;\n        const offsetWidth = wrap.offsetWidth - GAP;\n        moveY.value = wrap.scrollTop * 100 / offsetHeight * props.ratioY;\n        moveX.value = wrap.scrollLeft * 100 / offsetWidth * props.ratioX;\n      }\n    };\n    return {\n      handleScroll,\n      moveX,\n      moveY\n    };\n  }\n});\nfunction bar2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_thumb = resolveComponent("thumb");\n  return runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, null, [\n    createVNode(_component_thumb, {\n      move: _ctx.moveX,\n      ratio: _ctx.ratioX,\n      size: _ctx.width,\n      always: _ctx.always\n    }, null, 8, ["move", "ratio", "size", "always"]),\n    createVNode(_component_thumb, {\n      move: _ctx.moveY,\n      ratio: _ctx.ratioY,\n      size: _ctx.height,\n      vertical: "",\n      always: _ctx.always\n    }, null, 8, ["move", "ratio", "size", "always"])\n  ], 64);\n}\nvar Bar = /* @__PURE__ */ _export_sfc(bar2_sfc_main, [["render", bar2_sfc_render]]);\n\n\n//# sourceMappingURL=bar2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/scrollbar.mjs\n\n\n\n\nconst scrollbarProps = props_buildProps({\n  height: {\n    type: [String, Number],\n    default: ""\n  },\n  maxHeight: {\n    type: [String, Number],\n    default: ""\n  },\n  native: {\n    type: Boolean,\n    default: false\n  },\n  wrapStyle: {\n    type: definePropType([String, Object, Array]),\n    default: ""\n  },\n  wrapClass: {\n    type: [String, Array],\n    default: ""\n  },\n  viewClass: {\n    type: [String, Array],\n    default: ""\n  },\n  viewStyle: {\n    type: [String, Array],\n    default: ""\n  },\n  noresize: Boolean,\n  tag: {\n    type: String,\n    default: "div"\n  },\n  always: {\n    type: Boolean,\n    default: false\n  },\n  minSize: {\n    type: Number,\n    default: 20\n  }\n});\nconst scrollbarEmits = {\n  scroll: ({\n    scrollTop,\n    scrollLeft\n  }) => shared_isNumber(scrollTop) && shared_isNumber(scrollLeft)\n};\n\n\n//# sourceMappingURL=scrollbar.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/src/scrollbar2.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst scrollbar2_sfc_main = defineComponent({\n  name: "ElScrollbar",\n  components: {\n    Bar: Bar\n  },\n  props: scrollbarProps,\n  emits: scrollbarEmits,\n  setup(props, { emit }) {\n    const ns = useNamespace("scrollbar");\n    let stopResizeObserver = void 0;\n    let stopResizeListener = void 0;\n    const scrollbar$ = reactivity_esm_bundler_ref();\n    const wrap$ = reactivity_esm_bundler_ref();\n    const resize$ = reactivity_esm_bundler_ref();\n    const sizeWidth = reactivity_esm_bundler_ref("0");\n    const sizeHeight = reactivity_esm_bundler_ref("0");\n    const barRef = reactivity_esm_bundler_ref();\n    const moveX = reactivity_esm_bundler_ref(0);\n    const moveY = reactivity_esm_bundler_ref(0);\n    const ratioY = reactivity_esm_bundler_ref(1);\n    const ratioX = reactivity_esm_bundler_ref(1);\n    const SCOPE = "ElScrollbar";\n    const GAP = 4;\n    const style = runtime_core_esm_bundler_computed(() => {\n      const style2 = {};\n      if (props.height)\n        style2.height = addUnit(props.height);\n      if (props.maxHeight)\n        style2.maxHeight = addUnit(props.maxHeight);\n      return [props.wrapStyle, style2];\n    });\n    const handleScroll = () => {\n      var _a;\n      if (wrap$.value) {\n        (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);\n        emit("scroll", {\n          scrollTop: wrap$.value.scrollTop,\n          scrollLeft: wrap$.value.scrollLeft\n        });\n      }\n    };\n    const setScrollTop = (value) => {\n      if (!shared_isNumber(value)) {\n        error_debugWarn(SCOPE, "value must be a number");\n        return;\n      }\n      wrap$.value.scrollTop = value;\n    };\n    const setScrollLeft = (value) => {\n      if (!shared_isNumber(value)) {\n        error_debugWarn(SCOPE, "value must be a number");\n        return;\n      }\n      wrap$.value.scrollLeft = value;\n    };\n    const update = () => {\n      if (!wrap$.value)\n        return;\n      const offsetHeight = wrap$.value.offsetHeight - GAP;\n      const offsetWidth = wrap$.value.offsetWidth - GAP;\n      const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight;\n      const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth;\n      const height = Math.max(originalHeight, props.minSize);\n      const width = Math.max(originalWidth, props.minSize);\n      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));\n      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));\n      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : "";\n      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : "";\n    };\n    runtime_core_esm_bundler_watch(() => props.noresize, (noresize) => {\n      if (noresize) {\n        stopResizeObserver == null ? void 0 : stopResizeObserver();\n        stopResizeListener == null ? void 0 : stopResizeListener();\n      } else {\n        ;\n        ({ stop: stopResizeObserver } = useResizeObserver(resize$, update));\n        stopResizeListener = useEventListener("resize", update);\n      }\n    }, { immediate: true });\n    runtime_core_esm_bundler_watch(() => [props.maxHeight, props.height], () => {\n      if (!props.native)\n        runtime_core_esm_bundler_nextTick(() => {\n          var _a;\n          update();\n          if (wrap$.value) {\n            (_a = barRef.value) == null ? void 0 : _a.handleScroll(wrap$.value);\n          }\n        });\n    });\n    runtime_core_esm_bundler_provide(scrollbarContextKey, reactivity_esm_bundler_reactive({\n      scrollbarElement: scrollbar$,\n      wrapElement: wrap$\n    }));\n    runtime_core_esm_bundler_onMounted(() => {\n      if (!props.native)\n        runtime_core_esm_bundler_nextTick(() => update());\n    });\n    return {\n      ns,\n      scrollbar$,\n      wrap$,\n      resize$,\n      barRef,\n      moveX,\n      moveY,\n      ratioX,\n      ratioY,\n      sizeWidth,\n      sizeHeight,\n      style,\n      update,\n      handleScroll,\n      setScrollTop,\n      setScrollLeft\n    };\n  }\n});\nfunction scrollbar2_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_bar = resolveComponent("bar");\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n    ref: "scrollbar$",\n    class: normalizeClass(_ctx.ns.b())\n  }, [\n    createBaseVNode("div", {\n      ref: "wrap$",\n      class: normalizeClass([\n        _ctx.wrapClass,\n        _ctx.ns.e("wrap"),\n        { [_ctx.ns.em("wrap", "hidden-default")]: !_ctx.native }\n      ]),\n      style: normalizeStyle(_ctx.style),\n      onScroll: _cache[0] || (_cache[0] = (...args) => _ctx.handleScroll && _ctx.handleScroll(...args))\n    }, [\n      (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.tag), {\n        ref: "resize$",\n        class: normalizeClass([_ctx.ns.e("view"), _ctx.viewClass]),\n        style: normalizeStyle(_ctx.viewStyle)\n      }, {\n        default: withCtx(() => [\n          renderSlot(_ctx.$slots, "default")\n        ]),\n        _: 3\n      }, 8, ["class", "style"]))\n    ], 38),\n    !_ctx.native ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_bar, {\n      key: 0,\n      ref: "barRef",\n      height: _ctx.sizeHeight,\n      width: _ctx.sizeWidth,\n      always: _ctx.always,\n      "ratio-x": _ctx.ratioX,\n      "ratio-y": _ctx.ratioY\n    }, null, 8, ["height", "width", "always", "ratio-x", "ratio-y"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n  ], 2);\n}\nvar Scrollbar = /* @__PURE__ */ _export_sfc(scrollbar2_sfc_main, [["render", scrollbar2_sfc_render]]);\n\n\n//# sourceMappingURL=scrollbar2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/scrollbar/index.mjs\n\n\n\n\n\n\n\nconst ElScrollbar = withInstall(Scrollbar);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tag/src/tag.mjs\n\n\n\nconst tagProps = props_buildProps({\n  closable: Boolean,\n  type: {\n    type: String,\n    values: ["success", "info", "warning", "danger", ""],\n    default: ""\n  },\n  hit: Boolean,\n  disableTransitions: Boolean,\n  color: {\n    type: String,\n    default: ""\n  },\n  size: {\n    type: String,\n    values: ["large", "default", "small"]\n  },\n  effect: {\n    type: String,\n    values: ["dark", "light", "plain"],\n    default: "light"\n  }\n});\nconst tagEmits = {\n  close: (evt) => evt instanceof MouseEvent,\n  click: (evt) => evt instanceof MouseEvent\n};\n\n\n//# sourceMappingURL=tag.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tag/src/tag2.mjs\n\n\n\n\n\n\n\n\nconst tag2_default_ = {\n  name: "ElTag"\n};\nconst tag2_sfc_main = /* @__PURE__ */ defineComponent({\n  ...tag2_default_,\n  props: tagProps,\n  emits: tagEmits,\n  setup(__props, { emit }) {\n    const props = __props;\n    const tagSize = useSize();\n    const ns = useNamespace("tag");\n    const classes = runtime_core_esm_bundler_computed(() => {\n      const { type, hit, effect, closable } = props;\n      return [\n        ns.b(),\n        ns.is("closable", closable),\n        ns.m(type),\n        ns.m(tagSize.value),\n        ns.m(effect),\n        ns.is("hit", hit)\n      ];\n    });\n    const handleClose = (event) => {\n      event.stopPropagation();\n      emit("close", event);\n    };\n    const handleClick = (event) => {\n      emit("click", event);\n    };\n    return (_ctx, _cache) => {\n      return !_ctx.disableTransitions ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n        key: 0,\n        class: normalizeClass(reactivity_esm_bundler_unref(classes)),\n        style: normalizeStyle({ backgroundColor: _ctx.color }),\n        onClick: handleClick\n      }, [\n        createBaseVNode("span", {\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("content"))\n        }, [\n          renderSlot(_ctx.$slots, "default")\n        ], 2),\n        _ctx.closable ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(reactivity_esm_bundler_unref(ElIcon), {\n          key: 0,\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("close")),\n          onClick: handleClose\n        }, {\n          default: withCtx(() => [\n            createVNode(reactivity_esm_bundler_unref(close_close))\n          ]),\n          _: 1\n        }, 8, ["class"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n      ], 6)) : (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(Transition, {\n        key: 1,\n        name: `${reactivity_esm_bundler_unref(ns).namespace.value}-zoom-in-center`\n      }, {\n        default: withCtx(() => [\n          createBaseVNode("span", {\n            class: normalizeClass(reactivity_esm_bundler_unref(classes)),\n            style: normalizeStyle({ backgroundColor: _ctx.color }),\n            onClick: handleClick\n          }, [\n            createBaseVNode("span", {\n              class: normalizeClass(reactivity_esm_bundler_unref(ns).e("content"))\n            }, [\n              renderSlot(_ctx.$slots, "default")\n            ], 2),\n            _ctx.closable ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(reactivity_esm_bundler_unref(ElIcon), {\n              key: 0,\n              class: normalizeClass(reactivity_esm_bundler_unref(ns).e("close")),\n              onClick: handleClose\n            }, {\n              default: withCtx(() => [\n                createVNode(reactivity_esm_bundler_unref(close_close))\n              ]),\n              _: 1\n            }, 8, ["class"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n          ], 6)\n        ]),\n        _: 3\n      }, 8, ["name"]));\n    };\n  }\n});\n\n\n//# sourceMappingURL=tag2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/tag/index.mjs\n\n\n\n\n\nconst ElTag = withInstall(tag2_sfc_main);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/@element-plus/icons-vue/dist/es/arrow-up.mjs\n\n\n\nconst arrow_up_sfc_main = defineComponent({\n  name: "ArrowUp"\n});\nconst arrow_up_hoisted_1 = {\n  class: "icon",\n  width: "200",\n  height: "200",\n  viewBox: "0 0 1024 1024",\n  xmlns: "http://www.w3.org/2000/svg"\n};\nconst arrow_up_hoisted_2 = /* @__PURE__ */ createBaseVNode("path", {\n  fill: "currentColor",\n  d: "M488.832 344.32l-339.84 356.672a32 32 0 000 44.16l.384.384a29.44 29.44 0 0042.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0042.688 0l.384-.384a32 32 0 000-44.16L535.168 344.32a32 32 0 00-46.336 0z"\n}, null, -1);\nconst arrow_up_hoisted_3 = [\n  arrow_up_hoisted_2\n];\nfunction arrow_up_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("svg", arrow_up_hoisted_1, arrow_up_hoisted_3);\n}\nvar arrowUp = /* @__PURE__ */ plugin_vue_export_helper_export_sfc(arrow_up_sfc_main, [["render", arrow_up_sfc_render]]);\n\n\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isArray.js\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray(\'abc\');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray_isArray = Array.isArray;\n\n/* harmony default export */ var lodash_es_isArray = (isArray_isArray);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_freeGlobal.js\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == \'object\' && global && global.Object === Object && global;\n\n/* harmony default export */ var _freeGlobal = (freeGlobal);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_root.js\n\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == \'object\' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = _freeGlobal || freeSelf || Function(\'return this\')();\n\n/* harmony default export */ var _root = (root);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_Symbol.js\n\n\n/** Built-in value references. */\nvar _Symbol_Symbol = _root.Symbol;\n\n/* harmony default export */ var _Symbol = (_Symbol_Symbol);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_getRawTag.js\n\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ var _getRawTag = (getRawTag);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js\n/** Used for built-in method references. */\nvar _objectToString_objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar _objectToString_nativeObjectToString = _objectToString_objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction _objectToString_objectToString(value) {\n  return _objectToString_nativeObjectToString.call(value);\n}\n\n/* harmony default export */ var _objectToString = (_objectToString_objectToString);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js\n\n\n\n\n/** `Object#toString` result references. */\nvar nullTag = \'[object Null]\',\n    undefinedTag = \'[object Undefined]\';\n\n/** Built-in value references. */\nvar _baseGetTag_symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value))\n    ? _getRawTag(value)\n    : _objectToString(value);\n}\n\n/* harmony default export */ var _baseGetTag = (baseGetTag);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isObjectLike.js\n/**\n * Checks if `value` is object-like. A value is object-like if it\'s not `null`\n * and has a `typeof` result of "object".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == \'object\';\n}\n\n/* harmony default export */ var lodash_es_isObjectLike = (isObjectLike);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isSymbol.js\n\n\n\n/** `Object#toString` result references. */\nvar symbolTag = \'[object Symbol]\';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol(\'abc\');\n * // => false\n */\nfunction isSymbol_isSymbol(value) {\n  return typeof value == \'symbol\' ||\n    (lodash_es_isObjectLike(value) && _baseGetTag(value) == symbolTag);\n}\n\n/* harmony default export */ var lodash_es_isSymbol = (isSymbol_isSymbol);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_isKey.js\n\n\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|(["\'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (lodash_es_isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == \'number\' || type == \'symbol\' || type == \'boolean\' ||\n      value == null || lodash_es_isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/* harmony default export */ var _isKey = (isKey);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isObject.js\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String(\'\')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject_isObject(value) {\n  var type = typeof value;\n  return value != null && (type == \'object\' || type == \'function\');\n}\n\n/* harmony default export */ var lodash_es_isObject = (isObject_isObject);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isFunction.js\n\n\n\n/** `Object#toString` result references. */\nvar asyncTag = \'[object AsyncFunction]\',\n    funcTag = \'[object Function]\',\n    genTag = \'[object GeneratorFunction]\',\n    proxyTag = \'[object Proxy]\';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction_isFunction(value) {\n  if (!lodash_es_isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns \'object\' for typed arrays and other constructors.\n  var tag = _baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/* harmony default export */ var lodash_es_isFunction = (isFunction_isFunction);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_coreJsData.js\n\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = _root["__core-js_shared__"];\n\n/* harmony default export */ var _coreJsData = (coreJsData);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_isMasked.js\n\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || \'\');\n  return uid ? (\'Symbol(src)_1.\' + uid) : \'\';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/* harmony default export */ var _isMasked = (isMasked);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_toSource.js\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + \'\');\n    } catch (e) {}\n  }\n  return \'\';\n}\n\n/* harmony default export */ var _toSource = (toSource);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsNative.js\n\n\n\n\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar _baseIsNative_funcProto = Function.prototype,\n    _baseIsNative_objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar _baseIsNative_funcToString = _baseIsNative_funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar _baseIsNative_hasOwnProperty = _baseIsNative_objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp(\'^\' +\n  _baseIsNative_funcToString.call(_baseIsNative_hasOwnProperty).replace(reRegExpChar, \'\\\\$&\')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \'$1.*?\') + \'$\'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!lodash_es_isObject(value) || _isMasked(value)) {\n    return false;\n  }\n  var pattern = lodash_es_isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(_toSource(value));\n}\n\n/* harmony default export */ var _baseIsNative = (baseIsNative);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_getValue.js\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction _getValue_getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/* harmony default export */ var _getValue = (_getValue_getValue);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_getNative.js\n\n\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it\'s native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = _getValue(object, key);\n  return _baseIsNative(value) ? value : undefined;\n}\n\n/* harmony default export */ var _getNative = (getNative);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeCreate.js\n\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = _getNative(Object, \'create\');\n\n/* harmony default export */ var _nativeCreate = (nativeCreate);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashClear.js\n\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/* harmony default export */ var _hashClear = (hashClear);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashDelete.js\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/* harmony default export */ var _hashDelete = (hashDelete);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashGet.js\n\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = \'__lodash_hash_undefined__\';\n\n/** Used for built-in method references. */\nvar _hashGet_objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _hashGet_hasOwnProperty = _hashGet_objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (_nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return _hashGet_hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/* harmony default export */ var _hashGet = (hashGet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashHas.js\n\n\n/** Used for built-in method references. */\nvar _hashHas_objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _hashHas_hasOwnProperty = _hashHas_objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return _nativeCreate ? (data[key] !== undefined) : _hashHas_hasOwnProperty.call(data, key);\n}\n\n/* harmony default export */ var _hashHas = (hashHas);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashSet.js\n\n\n/** Used to stand-in for `undefined` hash values. */\nvar _hashSet_HASH_UNDEFINED = \'__lodash_hash_undefined__\';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (_nativeCreate && value === undefined) ? _hashSet_HASH_UNDEFINED : value;\n  return this;\n}\n\n/* harmony default export */ var _hashSet = (hashSet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_Hash.js\n\n\n\n\n\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = _hashClear;\nHash.prototype[\'delete\'] = _hashDelete;\nHash.prototype.get = _hashGet;\nHash.prototype.has = _hashHas;\nHash.prototype.set = _hashSet;\n\n/* harmony default export */ var _Hash = (Hash);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheClear.js\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/* harmony default export */ var _listCacheClear = (listCacheClear);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/eq.js\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { \'a\': 1 };\n * var other = { \'a\': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq(\'a\', \'a\');\n * // => true\n *\n * _.eq(\'a\', Object(\'a\'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/* harmony default export */ var lodash_es_eq = (eq);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_assocIndexOf.js\n\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (lodash_es_eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/* harmony default export */ var _assocIndexOf = (assocIndexOf);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheDelete.js\n\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/* harmony default export */ var _listCacheDelete = (listCacheDelete);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheGet.js\n\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/* harmony default export */ var _listCacheGet = (listCacheGet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheHas.js\n\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return _assocIndexOf(this.__data__, key) > -1;\n}\n\n/* harmony default export */ var _listCacheHas = (listCacheHas);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheSet.js\n\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = _assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n/* harmony default export */ var _listCacheSet = (listCacheSet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_ListCache.js\n\n\n\n\n\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = _listCacheClear;\nListCache.prototype[\'delete\'] = _listCacheDelete;\nListCache.prototype.get = _listCacheGet;\nListCache.prototype.has = _listCacheHas;\nListCache.prototype.set = _listCacheSet;\n\n/* harmony default export */ var _ListCache = (ListCache);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_Map.js\n\n\n\n/* Built-in method references that are verified to be native. */\nvar _Map_Map = _getNative(_root, \'Map\');\n\n/* harmony default export */ var _Map = (_Map_Map);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheClear.js\n\n\n\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    \'hash\': new _Hash,\n    \'map\': new (_Map || _ListCache),\n    \'string\': new _Hash\n  };\n}\n\n/* harmony default export */ var _mapCacheClear = (mapCacheClear);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_isKeyable.js\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == \'string\' || type == \'number\' || type == \'symbol\' || type == \'boolean\')\n    ? (value !== \'__proto__\')\n    : (value === null);\n}\n\n/* harmony default export */ var _isKeyable = (isKeyable);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_getMapData.js\n\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return _isKeyable(key)\n    ? data[typeof key == \'string\' ? \'string\' : \'hash\']\n    : data.map;\n}\n\n/* harmony default export */ var _getMapData = (getMapData);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheDelete.js\n\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = _getMapData(this, key)[\'delete\'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/* harmony default export */ var _mapCacheDelete = (mapCacheDelete);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheGet.js\n\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return _getMapData(this, key).get(key);\n}\n\n/* harmony default export */ var _mapCacheGet = (mapCacheGet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheHas.js\n\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return _getMapData(this, key).has(key);\n}\n\n/* harmony default export */ var _mapCacheHas = (mapCacheHas);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheSet.js\n\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = _getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n/* harmony default export */ var _mapCacheSet = (mapCacheSet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_MapCache.js\n\n\n\n\n\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = _mapCacheClear;\nMapCache.prototype[\'delete\'] = _mapCacheDelete;\nMapCache.prototype.get = _mapCacheGet;\nMapCache.prototype.has = _mapCacheHas;\nMapCache.prototype.set = _mapCacheSet;\n\n/* harmony default export */ var _MapCache = (MapCache);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/memoize.js\n\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = \'Expected a function\';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { \'a\': 1, \'b\': 2 };\n * var other = { \'c\': 3, \'d\': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, [\'a\', \'b\']);\n * values(object);\n * // => [\'a\', \'b\']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != \'function\' || (resolver != null && typeof resolver != \'function\')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || _MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = _MapCache;\n\n/* harmony default export */ var lodash_es_memoize = (memoize);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_memoizeCapped.js\n\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function\'s\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = lodash_es_memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\n/* harmony default export */ var _memoizeCapped = (memoizeCapped);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_stringToPath.js\n\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = _memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push(\'\');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, \'$1\') : (number || match));\n  });\n  return result;\n});\n\n/* harmony default export */ var _stringToPath = (stringToPath);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayMap.js\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\n/* harmony default export */ var _arrayMap = (arrayMap);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseToString.js\n\n\n\n\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = _Symbol ? _Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn\'t convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == \'string\') {\n    return value;\n  }\n  if (lodash_es_isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return _arrayMap(value, baseToString) + \'\';\n  }\n  if (lodash_es_isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : \'\';\n  }\n  var result = (value + \'\');\n  return (result == \'0\' && (1 / value) == -INFINITY) ? \'-0\' : result;\n}\n\n/* harmony default export */ var _baseToString = (baseToString);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/toString.js\n\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => \'\'\n *\n * _.toString(-0);\n * // => \'-0\'\n *\n * _.toString([1, 2, 3]);\n * // => \'1,2,3\'\n */\nfunction toString_toString(value) {\n  return value == null ? \'\' : _baseToString(value);\n}\n\n/* harmony default export */ var lodash_es_toString = (toString_toString);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_castPath.js\n\n\n\n\n\n/**\n * Casts `value` to a path array if it\'s not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (lodash_es_isArray(value)) {\n    return value;\n  }\n  return _isKey(value, object) ? [value] : _stringToPath(lodash_es_toString(value));\n}\n\n/* harmony default export */ var _castPath = (castPath);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_toKey.js\n\n\n/** Used as references for various `Number` constants. */\nvar _toKey_INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it\'s not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == \'string\' || lodash_es_isSymbol(value)) {\n    return value;\n  }\n  var result = (value + \'\');\n  return (result == \'0\' && (1 / value) == -_toKey_INFINITY) ? \'-0\' : result;\n}\n\n/* harmony default export */ var _toKey = (toKey);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGet.js\n\n\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = _castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[_toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/* harmony default export */ var _baseGet = (baseGet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/get.js\n\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { \'a\': [{ \'b\': { \'c\': 3 } }] };\n *\n * _.get(object, \'a[0].b.c\');\n * // => 3\n *\n * _.get(object, [\'a\', \'0\', \'b\', \'c\']);\n * // => 3\n *\n * _.get(object, \'a.b.c\', \'default\');\n * // => \'default\'\n */\nfunction get_get(object, path, defaultValue) {\n  var result = object == null ? undefined : _baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\n/* harmony default export */ var lodash_es_get = (get_get);\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/token.mjs\nconst selectGroupKey = "ElSelectGroup";\nconst selectKey = "ElSelect";\n\n\n//# sourceMappingURL=token.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/strings.mjs\n\n\nconst escapeStringRegexp = (string = "") => string.replace(/[|\\\\{}()[\\]^$+*?.]/g, "\\\\$&").replace(/-/g, "\\\\x2d");\n\n\n//# sourceMappingURL=strings.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/useOption.mjs\n\n\n\n\n\n\nfunction useOption(props, states) {\n  const select = runtime_core_esm_bundler_inject(selectKey);\n  const selectGroup = runtime_core_esm_bundler_inject(selectGroupKey, { disabled: false });\n  const isObject = runtime_core_esm_bundler_computed(() => {\n    return Object.prototype.toString.call(props.value).toLowerCase() === "[object object]";\n  });\n  const itemSelected = runtime_core_esm_bundler_computed(() => {\n    if (!select.props.multiple) {\n      return isEqual(props.value, select.props.modelValue);\n    } else {\n      return contains(select.props.modelValue, props.value);\n    }\n  });\n  const limitReached = runtime_core_esm_bundler_computed(() => {\n    if (select.props.multiple) {\n      const modelValue = select.props.modelValue || [];\n      return !itemSelected.value && modelValue.length >= select.props.multipleLimit && select.props.multipleLimit > 0;\n    } else {\n      return false;\n    }\n  });\n  const currentLabel = runtime_core_esm_bundler_computed(() => {\n    return props.label || (isObject.value ? "" : props.value);\n  });\n  const currentValue = runtime_core_esm_bundler_computed(() => {\n    return props.value || props.label || "";\n  });\n  const isDisabled = runtime_core_esm_bundler_computed(() => {\n    return props.disabled || states.groupDisabled || limitReached.value;\n  });\n  const instance = runtime_core_esm_bundler_getCurrentInstance();\n  const contains = (arr = [], target) => {\n    if (!isObject.value) {\n      return arr && arr.indexOf(target) > -1;\n    } else {\n      const valueKey = select.props.valueKey;\n      return arr && arr.some((item) => {\n        return lodash_es_get(item, valueKey) === lodash_es_get(target, valueKey);\n      });\n    }\n  };\n  const isEqual = (a, b) => {\n    if (!isObject.value) {\n      return a === b;\n    } else {\n      const { valueKey } = select.props;\n      return lodash_es_get(a, valueKey) === lodash_es_get(b, valueKey);\n    }\n  };\n  const hoverItem = () => {\n    if (!props.disabled && !selectGroup.disabled) {\n      select.hoverIndex = select.optionsArray.indexOf(instance.proxy);\n    }\n  };\n  runtime_core_esm_bundler_watch(() => currentLabel.value, () => {\n    if (!props.created && !select.props.remote)\n      select.setSelected();\n  });\n  runtime_core_esm_bundler_watch(() => props.value, (val, oldVal) => {\n    const { remote, valueKey } = select.props;\n    if (!props.created && !remote) {\n      if (valueKey && typeof val === "object" && typeof oldVal === "object" && val[valueKey] === oldVal[valueKey]) {\n        return;\n      }\n      select.setSelected();\n    }\n  });\n  runtime_core_esm_bundler_watch(() => selectGroup.disabled, () => {\n    states.groupDisabled = selectGroup.disabled;\n  }, { immediate: true });\n  const { queryChange } = reactivity_esm_bundler_toRaw(select);\n  runtime_core_esm_bundler_watch(queryChange, (changes) => {\n    const { query } = reactivity_esm_bundler_unref(changes);\n    const regexp = new RegExp(escapeStringRegexp(query), "i");\n    states.visible = regexp.test(currentLabel.value) || props.created;\n    if (!states.visible) {\n      select.filteredOptionsCount--;\n    }\n  });\n  return {\n    select,\n    currentLabel,\n    currentValue,\n    itemSelected,\n    isDisabled,\n    hoverItem\n  };\n}\n\n\n//# sourceMappingURL=useOption.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/option.mjs\n\n\n\n\n\n\nconst option_sfc_main = defineComponent({\n  name: "ElOption",\n  componentName: "ElOption",\n  props: {\n    value: {\n      required: true,\n      type: [String, Number, Boolean, Object]\n    },\n    label: [String, Number],\n    created: Boolean,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const ns = useNamespace("select");\n    const states = reactivity_esm_bundler_reactive({\n      index: -1,\n      groupDisabled: false,\n      visible: true,\n      hitState: false,\n      hover: false\n    });\n    const { currentLabel, itemSelected, isDisabled, select, hoverItem } = useOption(props, states);\n    const { visible, hover } = reactivity_esm_bundler_toRefs(states);\n    const vm = runtime_core_esm_bundler_getCurrentInstance().proxy;\n    const key = vm.value;\n    select.onOptionCreate(vm);\n    runtime_core_esm_bundler_onBeforeUnmount(() => {\n      const { selected } = select;\n      const selectedOptions = select.props.multiple ? selected : [selected];\n      const doesExist = select.cachedOptions.has(key);\n      const doesSelected = selectedOptions.some((item) => {\n        return item.value === vm.value;\n      });\n      if (doesExist && !doesSelected) {\n        select.cachedOptions.delete(key);\n      }\n      select.onOptionDestroy(key);\n    });\n    function selectOptionClick() {\n      if (props.disabled !== true && states.groupDisabled !== true) {\n        select.handleOptionSelect(vm, true);\n      }\n    }\n    return {\n      ns,\n      currentLabel,\n      itemSelected,\n      isDisabled,\n      select,\n      hoverItem,\n      visible,\n      hover,\n      selectOptionClick,\n      states\n    };\n  }\n});\nfunction option_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((runtime_core_esm_bundler_openBlock(), createElementBlock("li", {\n    class: normalizeClass([\n      _ctx.ns.be("dropdown", "item"),\n      _ctx.ns.is("disabled", _ctx.isDisabled),\n      {\n        selected: _ctx.itemSelected,\n        hover: _ctx.hover\n      }\n    ]),\n    onMouseenter: _cache[0] || (_cache[0] = (...args) => _ctx.hoverItem && _ctx.hoverItem(...args)),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.selectOptionClick && _ctx.selectOptionClick(...args), ["stop"]))\n  }, [\n    renderSlot(_ctx.$slots, "default", {}, () => [\n      createBaseVNode("span", null, toDisplayString(_ctx.currentLabel), 1)\n    ])\n  ], 34)), [\n    [vShow, _ctx.visible]\n  ]);\n}\nvar Option = /* @__PURE__ */ _export_sfc(option_sfc_main, [["render", option_sfc_render]]);\n\n\n//# sourceMappingURL=option.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/resize-event.mjs\n\n\nconst resizeHandler = function(entries) {\n  for (const entry of entries) {\n    const listeners = entry.target.__resizeListeners__ || [];\n    if (listeners.length) {\n      listeners.forEach((fn) => {\n        fn();\n      });\n    }\n  }\n};\nconst addResizeListener = function(element, fn) {\n  if (!shared_isClient || !element)\n    return;\n  if (!element.__resizeListeners__) {\n    element.__resizeListeners__ = [];\n    element.__ro__ = new ResizeObserver(resizeHandler);\n    element.__ro__.observe(element);\n  }\n  element.__resizeListeners__.push(fn);\n};\nconst removeResizeListener = function(element, fn) {\n  var _a;\n  if (!element || !element.__resizeListeners__)\n    return;\n  element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);\n  if (!element.__resizeListeners__.length) {\n    (_a = element.__ro__) == null ? void 0 : _a.disconnect();\n  }\n};\n\n\n//# sourceMappingURL=resize-event.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/select-dropdown.mjs\n\n\n\n\n\n\n\n\nconst select_dropdown_sfc_main = defineComponent({\n  name: "ElSelectDropdown",\n  componentName: "ElSelectDropdown",\n  setup() {\n    const select = runtime_core_esm_bundler_inject(selectKey);\n    const ns = useNamespace("select");\n    const popperClass = runtime_core_esm_bundler_computed(() => select.props.popperClass);\n    const isMultiple = runtime_core_esm_bundler_computed(() => select.props.multiple);\n    const isFitInputWidth = runtime_core_esm_bundler_computed(() => select.props.fitInputWidth);\n    const minWidth = reactivity_esm_bundler_ref("");\n    function updateMinWidth() {\n      var _a;\n      minWidth.value = `${(_a = select.selectWrapper) == null ? void 0 : _a.getBoundingClientRect().width}px`;\n    }\n    runtime_core_esm_bundler_onMounted(() => {\n      updateMinWidth();\n      addResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    runtime_core_esm_bundler_onBeforeUnmount(() => {\n      removeResizeListener(select.selectWrapper, updateMinWidth);\n    });\n    return {\n      ns,\n      minWidth,\n      popperClass,\n      isMultiple,\n      isFitInputWidth\n    };\n  }\n});\nfunction select_dropdown_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n    class: normalizeClass([_ctx.ns.b("dropdown"), _ctx.ns.is("multiple", _ctx.isMultiple), _ctx.popperClass]),\n    style: normalizeStyle({ [_ctx.isFitInputWidth ? "width" : "minWidth"]: _ctx.minWidth })\n  }, [\n    renderSlot(_ctx.$slots, "default")\n  ], 6);\n}\nvar ElSelectMenu = /* @__PURE__ */ _export_sfc(select_dropdown_sfc_main, [["render", select_dropdown_sfc_render]]);\n\n\n//# sourceMappingURL=select-dropdown.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackClear.js\n\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new _ListCache;\n  this.size = 0;\n}\n\n/* harmony default export */ var _stackClear = (stackClear);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackDelete.js\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data[\'delete\'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/* harmony default export */ var _stackDelete = (stackDelete);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackGet.js\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/* harmony default export */ var _stackGet = (stackGet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackHas.js\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/* harmony default export */ var _stackHas = (stackHas);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackSet.js\n\n\n\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof _ListCache) {\n    var pairs = data.__data__;\n    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new _MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n/* harmony default export */ var _stackSet = (stackSet);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_Stack.js\n\n\n\n\n\n\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new _ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = _stackClear;\nStack.prototype[\'delete\'] = _stackDelete;\nStack.prototype.get = _stackGet;\nStack.prototype.has = _stackHas;\nStack.prototype.set = _stackSet;\n\n/* harmony default export */ var _Stack = (Stack);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_setCacheAdd.js\n/** Used to stand-in for `undefined` hash values. */\nvar _setCacheAdd_HASH_UNDEFINED = \'__lodash_hash_undefined__\';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, _setCacheAdd_HASH_UNDEFINED);\n  return this;\n}\n\n/* harmony default export */ var _setCacheAdd = (setCacheAdd);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_setCacheHas.js\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n/* harmony default export */ var _setCacheHas = (setCacheHas);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_SetCache.js\n\n\n\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new _MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = _setCacheAdd;\nSetCache.prototype.has = _setCacheHas;\n\n/* harmony default export */ var _SetCache = (SetCache);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_arraySome.js\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/* harmony default export */ var _arraySome = (arraySome);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_cacheHas.js\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/* harmony default export */ var _cacheHas = (cacheHas);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_equalArrays.js\n\n\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Check that cyclic values are equal.\n  var arrStacked = stack.get(array);\n  var othStacked = stack.get(other);\n  if (arrStacked && othStacked) {\n    return arrStacked == other && othStacked == array;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new _SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!_arraySome(other, function(othValue, othIndex) {\n            if (!_cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack[\'delete\'](array);\n  stack[\'delete\'](other);\n  return result;\n}\n\n/* harmony default export */ var _equalArrays = (equalArrays);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_Uint8Array.js\n\n\n/** Built-in value references. */\nvar _Uint8Array_Uint8Array = _root.Uint8Array;\n\n/* harmony default export */ var _Uint8Array = (_Uint8Array_Uint8Array);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapToArray.js\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/* harmony default export */ var _mapToArray = (mapToArray);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_setToArray.js\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/* harmony default export */ var _setToArray = (setToArray);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_equalByTag.js\n\n\n\n\n\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar _equalByTag_COMPARE_PARTIAL_FLAG = 1,\n    _equalByTag_COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = \'[object Boolean]\',\n    dateTag = \'[object Date]\',\n    errorTag = \'[object Error]\',\n    mapTag = \'[object Map]\',\n    numberTag = \'[object Number]\',\n    regexpTag = \'[object RegExp]\',\n    setTag = \'[object Set]\',\n    stringTag = \'[object String]\',\n    _equalByTag_symbolTag = \'[object Symbol]\';\n\nvar arrayBufferTag = \'[object ArrayBuffer]\',\n    dataViewTag = \'[object DataView]\';\n\n/** Used to convert symbols to primitives and strings. */\nvar _equalByTag_symbolProto = _Symbol ? _Symbol.prototype : undefined,\n    symbolValueOf = _equalByTag_symbolProto ? _equalByTag_symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new _Uint8Array(object), new _Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return lodash_es_eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + \'\');\n\n    case mapTag:\n      var convert = _mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & _equalByTag_COMPARE_PARTIAL_FLAG;\n      convert || (convert = _setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= _equalByTag_COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = _equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack[\'delete\'](object);\n      return result;\n\n    case _equalByTag_symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/* harmony default export */ var _equalByTag = (equalByTag);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayPush.js\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/* harmony default export */ var _arrayPush = (arrayPush);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetAllKeys.js\n\n\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return lodash_es_isArray(object) ? result : _arrayPush(result, symbolsFunc(object));\n}\n\n/* harmony default export */ var _baseGetAllKeys = (baseGetAllKeys);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayFilter.js\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ var _arrayFilter = (arrayFilter);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/stubArray.js\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/* harmony default export */ var lodash_es_stubArray = (stubArray);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbols.js\n\n\n\n/** Used for built-in method references. */\nvar _getSymbols_objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = _getSymbols_objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? lodash_es_stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return _arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/* harmony default export */ var _getSymbols = (getSymbols);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseTimes.js\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/* harmony default export */ var _baseTimes = (baseTimes);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsArguments.js\n\n\n\n/** `Object#toString` result references. */\nvar argsTag = \'[object Arguments]\';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return lodash_es_isObjectLike(value) && _baseGetTag(value) == argsTag;\n}\n\n/* harmony default export */ var _baseIsArguments = (baseIsArguments);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isArguments.js\n\n\n\n/** Used for built-in method references. */\nvar isArguments_objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar isArguments_hasOwnProperty = isArguments_objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar isArguments_propertyIsEnumerable = isArguments_objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {\n  return lodash_es_isObjectLike(value) && isArguments_hasOwnProperty.call(value, \'callee\') &&\n    !isArguments_propertyIsEnumerable.call(value, \'callee\');\n};\n\n/* harmony default export */ var lodash_es_isArguments = (isArguments);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/stubFalse.js\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\n/* harmony default export */ var lodash_es_stubFalse = (stubFalse);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isBuffer.js\n\n\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == \'object\' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == \'object\' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? _root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || lodash_es_stubFalse;\n\n/* harmony default export */ var lodash_es_isBuffer = (isBuffer);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_isIndex.js\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == \'number\' ||\n      (type != \'symbol\' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\n/* harmony default export */ var _isIndex = (isIndex);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isLength.js\n/** Used as references for various `Number` constants. */\nvar isLength_MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength(\'3\');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == \'number\' &&\n    value > -1 && value % 1 == 0 && value <= isLength_MAX_SAFE_INTEGER;\n}\n\n/* harmony default export */ var lodash_es_isLength = (isLength);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsTypedArray.js\n\n\n\n\n/** `Object#toString` result references. */\nvar _baseIsTypedArray_argsTag = \'[object Arguments]\',\n    arrayTag = \'[object Array]\',\n    _baseIsTypedArray_boolTag = \'[object Boolean]\',\n    _baseIsTypedArray_dateTag = \'[object Date]\',\n    _baseIsTypedArray_errorTag = \'[object Error]\',\n    _baseIsTypedArray_funcTag = \'[object Function]\',\n    _baseIsTypedArray_mapTag = \'[object Map]\',\n    _baseIsTypedArray_numberTag = \'[object Number]\',\n    objectTag = \'[object Object]\',\n    _baseIsTypedArray_regexpTag = \'[object RegExp]\',\n    _baseIsTypedArray_setTag = \'[object Set]\',\n    _baseIsTypedArray_stringTag = \'[object String]\',\n    weakMapTag = \'[object WeakMap]\';\n\nvar _baseIsTypedArray_arrayBufferTag = \'[object ArrayBuffer]\',\n    _baseIsTypedArray_dataViewTag = \'[object DataView]\',\n    float32Tag = \'[object Float32Array]\',\n    float64Tag = \'[object Float64Array]\',\n    int8Tag = \'[object Int8Array]\',\n    int16Tag = \'[object Int16Array]\',\n    int32Tag = \'[object Int32Array]\',\n    uint8Tag = \'[object Uint8Array]\',\n    uint8ClampedTag = \'[object Uint8ClampedArray]\',\n    uint16Tag = \'[object Uint16Array]\',\n    uint32Tag = \'[object Uint32Array]\';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[_baseIsTypedArray_argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[_baseIsTypedArray_arrayBufferTag] = typedArrayTags[_baseIsTypedArray_boolTag] =\ntypedArrayTags[_baseIsTypedArray_dataViewTag] = typedArrayTags[_baseIsTypedArray_dateTag] =\ntypedArrayTags[_baseIsTypedArray_errorTag] = typedArrayTags[_baseIsTypedArray_funcTag] =\ntypedArrayTags[_baseIsTypedArray_mapTag] = typedArrayTags[_baseIsTypedArray_numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[_baseIsTypedArray_regexpTag] =\ntypedArrayTags[_baseIsTypedArray_setTag] = typedArrayTags[_baseIsTypedArray_stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return lodash_es_isObjectLike(value) &&\n    lodash_es_isLength(value.length) && !!typedArrayTags[_baseGetTag(value)];\n}\n\n/* harmony default export */ var _baseIsTypedArray = (baseIsTypedArray);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseUnary.js\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/* harmony default export */ var _baseUnary = (baseUnary);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_nodeUtil.js\n\n\n/** Detect free variable `exports`. */\nvar _nodeUtil_freeExports = typeof exports == \'object\' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar _nodeUtil_freeModule = _nodeUtil_freeExports && typeof module == \'object\' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar _nodeUtil_moduleExports = _nodeUtil_freeModule && _nodeUtil_freeModule.exports === _nodeUtil_freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = _nodeUtil_moduleExports && _freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = _nodeUtil_freeModule && _nodeUtil_freeModule.require && _nodeUtil_freeModule.require(\'util\').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding(\'util\')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding(\'util\');\n  } catch (e) {}\n}());\n\n/* harmony default export */ var _nodeUtil = (nodeUtil);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isTypedArray.js\n\n\n\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;\n\n/* harmony default export */ var lodash_es_isTypedArray = (isTypedArray);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayLikeKeys.js\n\n\n\n\n\n\n\n/** Used for built-in method references. */\nvar _arrayLikeKeys_objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _arrayLikeKeys_hasOwnProperty = _arrayLikeKeys_objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = lodash_es_isArray(value),\n      isArg = !isArr && lodash_es_isArguments(value),\n      isBuff = !isArr && !isArg && lodash_es_isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && lodash_es_isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? _baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || _arrayLikeKeys_hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == \'length\' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == \'offset\' || key == \'parent\')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == \'buffer\' || key == \'byteLength\' || key == \'byteOffset\')) ||\n           // Skip index properties.\n           _isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ var _arrayLikeKeys = (arrayLikeKeys);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_isPrototype.js\n/** Used for built-in method references. */\nvar _isPrototype_objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == \'function\' && Ctor.prototype) || _isPrototype_objectProto;\n\n  return value === proto;\n}\n\n/* harmony default export */ var _isPrototype = (isPrototype);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/* harmony default export */ var _overArg = (overArg);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeys.js\n\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = _overArg(Object.keys, Object);\n\n/* harmony default export */ var _nativeKeys = (nativeKeys);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeys.js\n\n\n\n/** Used for built-in method references. */\nvar _baseKeys_objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _baseKeys_hasOwnProperty = _baseKeys_objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn\'t treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!_isPrototype(object)) {\n    return _nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (_baseKeys_hasOwnProperty.call(object, key) && key != \'constructor\') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/* harmony default export */ var _baseKeys = (baseKeys);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isArrayLike.js\n\n\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it\'s\n * not a function and has a `value.length` that\'s an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike(\'abc\');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && lodash_es_isLength(value.length) && !lodash_es_isFunction(value);\n}\n\n/* harmony default export */ var lodash_es_isArrayLike = (isArrayLike);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/keys.js\n\n\n\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => [\'a\', \'b\'] (iteration order is not guaranteed)\n *\n * _.keys(\'hi\');\n * // => [\'0\', \'1\']\n */\nfunction keys_keys(object) {\n  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object) : _baseKeys(object);\n}\n\n/* harmony default export */ var lodash_es_keys = (keys_keys);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeys.js\n\n\n\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return _baseGetAllKeys(object, lodash_es_keys, _getSymbols);\n}\n\n/* harmony default export */ var _getAllKeys = (getAllKeys);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_equalObjects.js\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar _equalObjects_COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar _equalObjects_objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _equalObjects_hasOwnProperty = _equalObjects_objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & _equalObjects_COMPARE_PARTIAL_FLAG,\n      objProps = _getAllKeys(object),\n      objLength = objProps.length,\n      othProps = _getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : _equalObjects_hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Check that cyclic values are equal.\n  var objStacked = stack.get(object);\n  var othStacked = stack.get(other);\n  if (objStacked && othStacked) {\n    return objStacked == other && othStacked == object;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == \'constructor\');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        (\'constructor\' in object && \'constructor\' in other) &&\n        !(typeof objCtor == \'function\' && objCtor instanceof objCtor &&\n          typeof othCtor == \'function\' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack[\'delete\'](object);\n  stack[\'delete\'](other);\n  return result;\n}\n\n/* harmony default export */ var _equalObjects = (equalObjects);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_DataView.js\n\n\n\n/* Built-in method references that are verified to be native. */\nvar DataView = _getNative(_root, \'DataView\');\n\n/* harmony default export */ var _DataView = (DataView);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_Promise.js\n\n\n\n/* Built-in method references that are verified to be native. */\nvar _Promise_Promise = _getNative(_root, \'Promise\');\n\n/* harmony default export */ var _Promise = (_Promise_Promise);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_Set.js\n\n\n\n/* Built-in method references that are verified to be native. */\nvar _Set_Set = _getNative(_root, \'Set\');\n\n/* harmony default export */ var _Set = (_Set_Set);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_WeakMap.js\n\n\n\n/* Built-in method references that are verified to be native. */\nvar _WeakMap_WeakMap = _getNative(_root, \'WeakMap\');\n\n/* harmony default export */ var _WeakMap = (_WeakMap_WeakMap);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_getTag.js\n\n\n\n\n\n\n\n\n/** `Object#toString` result references. */\nvar _getTag_mapTag = \'[object Map]\',\n    _getTag_objectTag = \'[object Object]\',\n    promiseTag = \'[object Promise]\',\n    _getTag_setTag = \'[object Set]\',\n    _getTag_weakMapTag = \'[object WeakMap]\';\n\nvar _getTag_dataViewTag = \'[object DataView]\';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = _toSource(_DataView),\n    mapCtorString = _toSource(_Map),\n    promiseCtorString = _toSource(_Promise),\n    setCtorString = _toSource(_Set),\n    weakMapCtorString = _toSource(_WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = _baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != _getTag_dataViewTag) ||\n    (_Map && getTag(new _Map) != _getTag_mapTag) ||\n    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||\n    (_Set && getTag(new _Set) != _getTag_setTag) ||\n    (_WeakMap && getTag(new _WeakMap) != _getTag_weakMapTag)) {\n  getTag = function(value) {\n    var result = _baseGetTag(value),\n        Ctor = result == _getTag_objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? _toSource(Ctor) : \'\';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return _getTag_dataViewTag;\n        case mapCtorString: return _getTag_mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return _getTag_setTag;\n        case weakMapCtorString: return _getTag_weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/* harmony default export */ var _getTag = (getTag);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsEqualDeep.js\n\n\n\n\n\n\n\n\n\n/** Used to compose bitmasks for value comparisons. */\nvar _baseIsEqualDeep_COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar _baseIsEqualDeep_argsTag = \'[object Arguments]\',\n    _baseIsEqualDeep_arrayTag = \'[object Array]\',\n    _baseIsEqualDeep_objectTag = \'[object Object]\';\n\n/** Used for built-in method references. */\nvar _baseIsEqualDeep_objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar _baseIsEqualDeep_hasOwnProperty = _baseIsEqualDeep_objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = lodash_es_isArray(object),\n      othIsArr = lodash_es_isArray(other),\n      objTag = objIsArr ? _baseIsEqualDeep_arrayTag : _getTag(object),\n      othTag = othIsArr ? _baseIsEqualDeep_arrayTag : _getTag(other);\n\n  objTag = objTag == _baseIsEqualDeep_argsTag ? _baseIsEqualDeep_objectTag : objTag;\n  othTag = othTag == _baseIsEqualDeep_argsTag ? _baseIsEqualDeep_objectTag : othTag;\n\n  var objIsObj = objTag == _baseIsEqualDeep_objectTag,\n      othIsObj = othTag == _baseIsEqualDeep_objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && lodash_es_isBuffer(object)) {\n    if (!lodash_es_isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new _Stack);\n    return (objIsArr || lodash_es_isTypedArray(object))\n      ? _equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : _equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & _baseIsEqualDeep_COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && _baseIsEqualDeep_hasOwnProperty.call(object, \'__wrapped__\'),\n        othIsWrapped = othIsObj && _baseIsEqualDeep_hasOwnProperty.call(other, \'__wrapped__\');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new _Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new _Stack);\n  return _equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/* harmony default export */ var _baseIsEqualDeep = (baseIsEqualDeep);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsEqual.js\n\n\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!lodash_es_isObjectLike(value) && !lodash_es_isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return _baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/* harmony default export */ var _baseIsEqual = (baseIsEqual);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/isEqual.js\n\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { \'a\': 1 };\n * var other = { \'a\': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return _baseIsEqual(value, other);\n}\n\n/* harmony default export */ var lodash_es_isEqual = (isEqual);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/now.js\n\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now_now = function() {\n  return _root.Date.now();\n};\n\n/* harmony default export */ var lodash_es_now = (now_now);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_trimmedEndIndex.js\n/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\n/* harmony default export */ var _trimmedEndIndex = (trimmedEndIndex);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseTrim.js\n\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, _trimmedEndIndex(string) + 1).replace(reTrimStart, \'\')\n    : string;\n}\n\n/* harmony default export */ var _baseTrim = (baseTrim);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/toNumber.js\n\n\n\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber(\'3.2\');\n * // => 3.2\n */\nfunction toNumber_toNumber(value) {\n  if (typeof value == \'number\') {\n    return value;\n  }\n  if (lodash_es_isSymbol(value)) {\n    return NAN;\n  }\n  if (lodash_es_isObject(value)) {\n    var other = typeof value.valueOf == \'function\' ? value.valueOf() : value;\n    value = lodash_es_isObject(other) ? (other + \'\') : other;\n  }\n  if (typeof value != \'string\') {\n    return value === 0 ? value : +value;\n  }\n  value = _baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\n/* harmony default export */ var lodash_es_toNumber = (toNumber_toNumber);\n\n;// CONCATENATED MODULE: ./node_modules/lodash-es/debounce.js\n\n\n\n\n/** Error message constants. */\nvar debounce_FUNC_ERROR_TEXT = \'Expected a function\';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho\'s article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it\'s invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on(\'resize\', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on(\'click\', _.debounce(sendMail, 300, {\n *   \'leading\': true,\n *   \'trailing\': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { \'maxWait\': 1000 });\n * var source = new EventSource(\'/stream\');\n * jQuery(source).on(\'message\', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on(\'popstate\', debounced.cancel);\n */\nfunction debounce_debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != \'function\') {\n    throw new TypeError(debounce_FUNC_ERROR_TEXT);\n  }\n  wait = lodash_es_toNumber(wait) || 0;\n  if (lodash_es_isObject(options)) {\n    leading = !!options.leading;\n    maxing = \'maxWait\' in options;\n    maxWait = maxing ? nativeMax(lodash_es_toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = \'trailing\' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we\'re at the\n    // trailing edge, the system time has gone backwards and we\'re treating\n    // it as the trailing edge, or we\'ve hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = lodash_es_now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(lodash_es_now());\n  }\n\n  function debounced() {\n    var time = lodash_es_now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/* harmony default export */ var lodash_es_debounce = (debounce_debounce);\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/locale/lang/en.mjs\nvar English = {\n  name: "en",\n  el: {\n    colorpicker: {\n      confirm: "OK",\n      clear: "Clear"\n    },\n    datepicker: {\n      now: "Now",\n      today: "Today",\n      cancel: "Cancel",\n      clear: "Clear",\n      confirm: "OK",\n      selectDate: "Select date",\n      selectTime: "Select time",\n      startDate: "Start Date",\n      startTime: "Start Time",\n      endDate: "End Date",\n      endTime: "End Time",\n      prevYear: "Previous Year",\n      nextYear: "Next Year",\n      prevMonth: "Previous Month",\n      nextMonth: "Next Month",\n      year: "",\n      month1: "January",\n      month2: "February",\n      month3: "March",\n      month4: "April",\n      month5: "May",\n      month6: "June",\n      month7: "July",\n      month8: "August",\n      month9: "September",\n      month10: "October",\n      month11: "November",\n      month12: "December",\n      week: "week",\n      weeks: {\n        sun: "Sun",\n        mon: "Mon",\n        tue: "Tue",\n        wed: "Wed",\n        thu: "Thu",\n        fri: "Fri",\n        sat: "Sat"\n      },\n      months: {\n        jan: "Jan",\n        feb: "Feb",\n        mar: "Mar",\n        apr: "Apr",\n        may: "May",\n        jun: "Jun",\n        jul: "Jul",\n        aug: "Aug",\n        sep: "Sep",\n        oct: "Oct",\n        nov: "Nov",\n        dec: "Dec"\n      }\n    },\n    select: {\n      loading: "Loading",\n      noMatch: "No matching data",\n      noData: "No data",\n      placeholder: "Select"\n    },\n    cascader: {\n      noMatch: "No matching data",\n      loading: "Loading",\n      placeholder: "Select",\n      noData: "No data"\n    },\n    pagination: {\n      goto: "Go to",\n      pagesize: "/page",\n      total: "Total {total}",\n      pageClassifier: "",\n      deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"\n    },\n    messagebox: {\n      title: "Message",\n      confirm: "OK",\n      cancel: "Cancel",\n      error: "Illegal input"\n    },\n    upload: {\n      deleteTip: "press delete to remove",\n      delete: "Delete",\n      preview: "Preview",\n      continue: "Continue"\n    },\n    table: {\n      emptyText: "No Data",\n      confirmFilter: "Confirm",\n      resetFilter: "Reset",\n      clearFilter: "All",\n      sumText: "Sum"\n    },\n    tree: {\n      emptyText: "No Data"\n    },\n    transfer: {\n      noMatch: "No matching data",\n      noData: "No data",\n      titles: ["List 1", "List 2"],\n      filterPlaceholder: "Enter keyword",\n      noCheckedFormat: "{total} items",\n      hasCheckedFormat: "{checked}/{total} checked"\n    },\n    image: {\n      error: "FAILED"\n    },\n    pageHeader: {\n      title: "Back"\n    },\n    popconfirm: {\n      confirmButtonText: "Yes",\n      cancelButtonText: "No"\n    }\n  }\n};\n\n\n//# sourceMappingURL=en.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-locale/index.mjs\n\n\n\n\n\nconst buildTranslator = (locale) => (path, option) => translate(path, option, reactivity_esm_bundler_unref(locale));\nconst translate = (path, option, locale) => lodash_es_get(locale, path, path).replace(/\\{(\\w+)\\}/g, (_, key) => {\n  var _a;\n  return `${(_a = option == null ? void 0 : option[key]) != null ? _a : `{${key}}`}`;\n});\nconst buildLocaleContext = (locale) => {\n  const lang = runtime_core_esm_bundler_computed(() => reactivity_esm_bundler_unref(locale).name);\n  const localeRef = reactivity_esm_bundler_isRef(locale) ? locale : reactivity_esm_bundler_ref(locale);\n  return {\n    lang,\n    locale: localeRef,\n    t: buildTranslator(locale)\n  };\n};\nconst useLocale = () => {\n  const locale = useGlobalConfig("locale");\n  return buildLocaleContext(runtime_core_esm_bundler_computed(() => locale.value || English));\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/scroll.mjs\n\n\n\nconst isScroll = (el, isVertical) => {\n  if (!isClient)\n    return false;\n  const key = {\n    undefined: "overflow",\n    true: "overflow-y",\n    false: "overflow-x"\n  }[String(isVertical)];\n  const overflow = getStyle(el, key);\n  return ["scroll", "auto", "overlay"].some((s) => overflow.includes(s));\n};\nconst getScrollContainer = (el, isVertical) => {\n  if (!isClient)\n    return;\n  let parent = el;\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent))\n      return window;\n    if (isScroll(parent, isVertical))\n      return parent;\n    parent = parent.parentNode;\n  }\n  return parent;\n};\nlet scrollBarWidth;\nconst getScrollBarWidth = () => {\n  var _a;\n  if (!shared_isClient)\n    return 0;\n  if (scrollBarWidth !== void 0)\n    return scrollBarWidth;\n  const outer = document.createElement("div");\n  outer.className = "el-scrollbar__wrap";\n  outer.style.visibility = "hidden";\n  outer.style.width = "100px";\n  outer.style.position = "absolute";\n  outer.style.top = "-9999px";\n  document.body.appendChild(outer);\n  const widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = "scroll";\n  const inner = document.createElement("div");\n  inner.style.width = "100%";\n  outer.appendChild(inner);\n  const widthWithScroll = inner.offsetWidth;\n  (_a = outer.parentNode) == null ? void 0 : _a.removeChild(outer);\n  scrollBarWidth = widthNoScroll - widthWithScroll;\n  return scrollBarWidth;\n};\nfunction scrollIntoView(container, selected) {\n  if (!shared_isClient)\n    return;\n  if (!selected) {\n    container.scrollTop = 0;\n    return;\n  }\n  const offsetParents = [];\n  let pointer = selected.offsetParent;\n  while (pointer !== null && container !== pointer && container.contains(pointer)) {\n    offsetParents.push(pointer);\n    pointer = pointer.offsetParent;\n  }\n  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);\n  const bottom = top + selected.offsetHeight;\n  const viewRectTop = container.scrollTop;\n  const viewRectBottom = viewRectTop + container.clientHeight;\n  if (top < viewRectTop) {\n    container.scrollTop = top;\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight;\n  }\n}\n\n\n//# sourceMappingURL=scroll.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/useSelect.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction useSelectStates(props) {\n  const { t } = useLocale();\n  return reactivity_esm_bundler_reactive({\n    options: /* @__PURE__ */ new Map(),\n    cachedOptions: /* @__PURE__ */ new Map(),\n    createdLabel: null,\n    createdSelected: false,\n    selected: props.multiple ? [] : {},\n    inputLength: 20,\n    inputWidth: 0,\n    initialInputHeight: 0,\n    optionsCount: 0,\n    filteredOptionsCount: 0,\n    visible: false,\n    softFocus: false,\n    selectedLabel: "",\n    hoverIndex: -1,\n    query: "",\n    previousQuery: null,\n    inputHovering: false,\n    cachedPlaceHolder: "",\n    currentPlaceholder: t("el.select.placeholder"),\n    menuVisibleOnFocus: false,\n    isOnComposition: false,\n    isSilentBlur: false,\n    prefixWidth: 11,\n    tagInMultiLine: false\n  });\n}\nconst useSelect = (props, states, ctx) => {\n  const { t } = useLocale();\n  const ns = useNamespace("select");\n  const reference = reactivity_esm_bundler_ref(null);\n  const input = reactivity_esm_bundler_ref(null);\n  const tooltipRef = reactivity_esm_bundler_ref(null);\n  const tags = reactivity_esm_bundler_ref(null);\n  const selectWrapper = reactivity_esm_bundler_ref(null);\n  const scrollbar = reactivity_esm_bundler_ref(null);\n  const hoverOption = reactivity_esm_bundler_ref(-1);\n  const queryChange = reactivity_esm_bundler_shallowRef({ query: "" });\n  const groupQueryChange = reactivity_esm_bundler_shallowRef("");\n  const elForm = runtime_core_esm_bundler_inject(elFormKey, {});\n  const elFormItem = runtime_core_esm_bundler_inject(elFormItemKey, {});\n  const readonly = runtime_core_esm_bundler_computed(() => !props.filterable || props.multiple || !states.visible);\n  const selectDisabled = runtime_core_esm_bundler_computed(() => props.disabled || elForm.disabled);\n  const showClose = runtime_core_esm_bundler_computed(() => {\n    const hasValue = props.multiple ? Array.isArray(props.modelValue) && props.modelValue.length > 0 : props.modelValue !== void 0 && props.modelValue !== null && props.modelValue !== "";\n    const criteria = props.clearable && !selectDisabled.value && states.inputHovering && hasValue;\n    return criteria;\n  });\n  const iconComponent = runtime_core_esm_bundler_computed(() => props.remote && props.filterable ? "" : props.suffixIcon);\n  const iconReverse = runtime_core_esm_bundler_computed(() => ns.is("reverse", iconComponent.value && states.visible));\n  const debounce$1 = runtime_core_esm_bundler_computed(() => props.remote ? 300 : 0);\n  const emptyText = runtime_core_esm_bundler_computed(() => {\n    if (props.loading) {\n      return props.loadingText || t("el.select.loading");\n    } else {\n      if (props.remote && states.query === "" && states.options.size === 0)\n        return false;\n      if (props.filterable && states.query && states.options.size > 0 && states.filteredOptionsCount === 0) {\n        return props.noMatchText || t("el.select.noMatch");\n      }\n      if (states.options.size === 0) {\n        return props.noDataText || t("el.select.noData");\n      }\n    }\n    return null;\n  });\n  const optionsArray = runtime_core_esm_bundler_computed(() => Array.from(states.options.values()));\n  const cachedOptionsArray = runtime_core_esm_bundler_computed(() => Array.from(states.cachedOptions.values()));\n  const showNewOption = runtime_core_esm_bundler_computed(() => {\n    const hasExistingOption = optionsArray.value.filter((option) => {\n      return !option.created;\n    }).some((option) => {\n      return option.currentLabel === states.query;\n    });\n    return props.filterable && props.allowCreate && states.query !== "" && !hasExistingOption;\n  });\n  const selectSize = useSize();\n  const collapseTagSize = runtime_core_esm_bundler_computed(() => ["small"].indexOf(selectSize.value) > -1 ? "small" : "default");\n  const dropMenuVisible = runtime_core_esm_bundler_computed({\n    get() {\n      return states.visible && emptyText.value !== false;\n    },\n    set(val) {\n      states.visible = val;\n    }\n  });\n  runtime_core_esm_bundler_watch(() => selectDisabled.value, () => {\n    runtime_core_esm_bundler_nextTick(() => {\n      resetInputHeight();\n    });\n  });\n  runtime_core_esm_bundler_watch(() => props.placeholder, (val) => {\n    states.cachedPlaceHolder = states.currentPlaceholder = val;\n  });\n  runtime_core_esm_bundler_watch(() => props.modelValue, (val, oldVal) => {\n    var _a;\n    if (props.multiple) {\n      resetInputHeight();\n      if (val && val.length > 0 || input.value && states.query !== "") {\n        states.currentPlaceholder = "";\n      } else {\n        states.currentPlaceholder = states.cachedPlaceHolder;\n      }\n      if (props.filterable && !props.reserveKeyword) {\n        states.query = "";\n        handleQueryChange(states.query);\n      }\n    }\n    setSelected();\n    if (props.filterable && !props.multiple) {\n      states.inputLength = 20;\n    }\n    if (!lodash_es_isEqual(val, oldVal)) {\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, "change");\n    }\n  }, {\n    flush: "post",\n    deep: true\n  });\n  runtime_core_esm_bundler_watch(() => states.visible, (val) => {\n    var _a, _b, _c;\n    if (!val) {\n      input.value && input.value.blur();\n      states.query = "";\n      states.previousQuery = null;\n      states.selectedLabel = "";\n      states.inputLength = 20;\n      states.menuVisibleOnFocus = false;\n      resetHoverIndex();\n      runtime_core_esm_bundler_nextTick(() => {\n        if (input.value && input.value.value === "" && states.selected.length === 0) {\n          states.currentPlaceholder = states.cachedPlaceHolder;\n        }\n      });\n      if (!props.multiple) {\n        if (states.selected) {\n          if (props.filterable && props.allowCreate && states.createdSelected && states.createdLabel) {\n            states.selectedLabel = states.createdLabel;\n          } else {\n            states.selectedLabel = states.selected.currentLabel;\n          }\n          if (props.filterable)\n            states.query = states.selectedLabel;\n        }\n        if (props.filterable) {\n          states.currentPlaceholder = states.cachedPlaceHolder;\n        }\n      }\n    } else {\n      (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      if (props.filterable) {\n        states.filteredOptionsCount = states.optionsCount;\n        states.query = props.remote ? "" : states.selectedLabel;\n        if (props.multiple) {\n          (_c = input.value) == null ? void 0 : _c.focus();\n        } else {\n          if (states.selectedLabel) {\n            states.currentPlaceholder = states.selectedLabel;\n            states.selectedLabel = "";\n          }\n        }\n        handleQueryChange(states.query);\n        if (!props.multiple && !props.remote) {\n          queryChange.value.query = "";\n          triggerRef(queryChange);\n          triggerRef(groupQueryChange);\n        }\n      }\n    }\n    ctx.emit("visible-change", val);\n  });\n  runtime_core_esm_bundler_watch(() => states.options.entries(), () => {\n    var _a, _b, _c;\n    if (!shared_isClient)\n      return;\n    (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n    if (props.multiple) {\n      resetInputHeight();\n    }\n    const inputs = ((_c = selectWrapper.value) == null ? void 0 : _c.querySelectorAll("input")) || [];\n    if (Array.from(inputs).indexOf(document.activeElement) === -1) {\n      setSelected();\n    }\n    if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {\n      checkDefaultFirstOption();\n    }\n  }, {\n    flush: "post"\n  });\n  runtime_core_esm_bundler_watch(() => states.hoverIndex, (val) => {\n    if (typeof val === "number" && val > -1) {\n      hoverOption.value = optionsArray.value[val] || {};\n    }\n    optionsArray.value.forEach((option) => {\n      option.hover = hoverOption.value === option;\n    });\n  });\n  const resetInputHeight = () => {\n    if (props.collapseTags && !props.filterable)\n      return;\n    runtime_core_esm_bundler_nextTick(() => {\n      var _a, _b;\n      if (!reference.value)\n        return;\n      const inputChildNodes = reference.value.$el.childNodes;\n      const input2 = Array.from(inputChildNodes).filter((item) => item.tagName === "INPUT")[0];\n      const _tags = tags.value;\n      const sizeInMap = states.initialInputHeight || 40;\n      input2.style.height = states.selected.length === 0 ? `${sizeInMap}px` : `${Math.max(_tags ? _tags.clientHeight + (_tags.clientHeight > sizeInMap ? 6 : 0) : 0, sizeInMap)}px`;\n      states.tagInMultiLine = parseFloat(input2.style.height) >= sizeInMap;\n      if (states.visible && emptyText.value !== false) {\n        (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      }\n    });\n  };\n  const handleQueryChange = (val) => {\n    if (states.previousQuery === val || states.isOnComposition)\n      return;\n    if (states.previousQuery === null && (typeof props.filterMethod === "function" || typeof props.remoteMethod === "function")) {\n      states.previousQuery = val;\n      return;\n    }\n    states.previousQuery = val;\n    runtime_core_esm_bundler_nextTick(() => {\n      var _a, _b;\n      if (states.visible)\n        (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n    });\n    states.hoverIndex = -1;\n    if (props.multiple && props.filterable) {\n      runtime_core_esm_bundler_nextTick(() => {\n        const length = input.value.value.length * 15 + 20;\n        states.inputLength = props.collapseTags ? Math.min(50, length) : length;\n        managePlaceholder();\n        resetInputHeight();\n      });\n    }\n    if (props.remote && typeof props.remoteMethod === "function") {\n      states.hoverIndex = -1;\n      props.remoteMethod(val);\n    } else if (typeof props.filterMethod === "function") {\n      props.filterMethod(val);\n      triggerRef(groupQueryChange);\n    } else {\n      states.filteredOptionsCount = states.optionsCount;\n      queryChange.value.query = val;\n      triggerRef(queryChange);\n      triggerRef(groupQueryChange);\n    }\n    if (props.defaultFirstOption && (props.filterable || props.remote) && states.filteredOptionsCount) {\n      checkDefaultFirstOption();\n    }\n  };\n  const managePlaceholder = () => {\n    if (states.currentPlaceholder !== "") {\n      states.currentPlaceholder = input.value.value ? "" : states.cachedPlaceHolder;\n    }\n  };\n  const checkDefaultFirstOption = () => {\n    const optionsInDropdown = optionsArray.value.filter((n) => n.visible && !n.disabled && !n.states.groupDisabled);\n    const userCreatedOption = optionsInDropdown.filter((n) => n.created)[0];\n    const firstOriginOption = optionsInDropdown[0];\n    states.hoverIndex = getValueIndex(optionsArray.value, userCreatedOption || firstOriginOption);\n  };\n  const setSelected = () => {\n    var _a;\n    if (!props.multiple) {\n      const option = getOption(props.modelValue);\n      if ((_a = option.props) == null ? void 0 : _a.created) {\n        states.createdLabel = option.props.value;\n        states.createdSelected = true;\n      } else {\n        states.createdSelected = false;\n      }\n      states.selectedLabel = option.currentLabel;\n      states.selected = option;\n      if (props.filterable)\n        states.query = states.selectedLabel;\n      return;\n    }\n    const result = [];\n    if (Array.isArray(props.modelValue)) {\n      props.modelValue.forEach((value) => {\n        result.push(getOption(value));\n      });\n    }\n    states.selected = result;\n    runtime_core_esm_bundler_nextTick(() => {\n      resetInputHeight();\n    });\n  };\n  const getOption = (value) => {\n    let option;\n    const isObjectValue = shared_esm_bundler_toRawType(value).toLowerCase() === "object";\n    const isNull = shared_esm_bundler_toRawType(value).toLowerCase() === "null";\n    const isUndefined = shared_esm_bundler_toRawType(value).toLowerCase() === "undefined";\n    for (let i = states.cachedOptions.size - 1; i >= 0; i--) {\n      const cachedOption = cachedOptionsArray.value[i];\n      const isEqualValue = isObjectValue ? lodash_es_get(cachedOption.value, props.valueKey) === lodash_es_get(value, props.valueKey) : cachedOption.value === value;\n      if (isEqualValue) {\n        option = {\n          value,\n          currentLabel: cachedOption.currentLabel,\n          isDisabled: cachedOption.isDisabled\n        };\n        break;\n      }\n    }\n    if (option)\n      return option;\n    const label = isObjectValue ? value.label : !isNull && !isUndefined ? value : "";\n    const newOption = {\n      value,\n      currentLabel: label\n    };\n    if (props.multiple) {\n      ;\n      newOption.hitState = false;\n    }\n    return newOption;\n  };\n  const resetHoverIndex = () => {\n    setTimeout(() => {\n      const valueKey = props.valueKey;\n      if (!props.multiple) {\n        states.hoverIndex = optionsArray.value.findIndex((item) => {\n          return getValueKey(item) === getValueKey(states.selected);\n        });\n      } else {\n        if (states.selected.length > 0) {\n          states.hoverIndex = Math.min.apply(null, states.selected.map((selected) => {\n            return optionsArray.value.findIndex((item) => {\n              return lodash_es_get(item, valueKey) === lodash_es_get(selected, valueKey);\n            });\n          }));\n        } else {\n          states.hoverIndex = -1;\n        }\n      }\n    }, 300);\n  };\n  const handleResize = () => {\n    var _a, _b;\n    resetInputWidth();\n    (_b = (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n    if (props.multiple && !props.filterable)\n      resetInputHeight();\n  };\n  const resetInputWidth = () => {\n    var _a;\n    states.inputWidth = (_a = reference.value) == null ? void 0 : _a.$el.getBoundingClientRect().width;\n  };\n  const onInputChange = () => {\n    if (props.filterable && states.query !== states.selectedLabel) {\n      states.query = states.selectedLabel;\n      handleQueryChange(states.query);\n    }\n  };\n  const debouncedOnInputChange = lodash_es_debounce(() => {\n    onInputChange();\n  }, debounce$1.value);\n  const debouncedQueryChange = lodash_es_debounce((e) => {\n    handleQueryChange(e.target.value);\n  }, debounce$1.value);\n  const emitChange = (val) => {\n    if (!lodash_es_isEqual(props.modelValue, val)) {\n      ctx.emit(CHANGE_EVENT, val);\n    }\n  };\n  const deletePrevTag = (e) => {\n    if (e.target.value.length <= 0 && !toggleLastOptionHitState()) {\n      const value = props.modelValue.slice();\n      value.pop();\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n    }\n    if (e.target.value.length === 1 && props.modelValue.length === 0) {\n      states.currentPlaceholder = states.cachedPlaceHolder;\n    }\n  };\n  const deleteTag = (event, tag) => {\n    const index = states.selected.indexOf(tag);\n    if (index > -1 && !selectDisabled.value) {\n      const value = props.modelValue.slice();\n      value.splice(index, 1);\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n      ctx.emit("remove-tag", tag.value);\n    }\n    event.stopPropagation();\n  };\n  const deleteSelected = (event) => {\n    event.stopPropagation();\n    const value = props.multiple ? [] : "";\n    if (typeof value !== "string") {\n      for (const item of states.selected) {\n        if (item.isDisabled)\n          value.push(item.value);\n      }\n    }\n    ctx.emit(UPDATE_MODEL_EVENT, value);\n    emitChange(value);\n    states.visible = false;\n    ctx.emit("clear");\n  };\n  const handleOptionSelect = (option, byClick) => {\n    var _a;\n    if (props.multiple) {\n      const value = (props.modelValue || []).slice();\n      const optionIndex = getValueIndex(value, option.value);\n      if (optionIndex > -1) {\n        value.splice(optionIndex, 1);\n      } else if (props.multipleLimit <= 0 || value.length < props.multipleLimit) {\n        value.push(option.value);\n      }\n      ctx.emit(UPDATE_MODEL_EVENT, value);\n      emitChange(value);\n      if (option.created) {\n        states.query = "";\n        handleQueryChange("");\n        states.inputLength = 20;\n      }\n      if (props.filterable)\n        (_a = input.value) == null ? void 0 : _a.focus();\n    } else {\n      ctx.emit(UPDATE_MODEL_EVENT, option.value);\n      emitChange(option.value);\n      states.visible = false;\n    }\n    states.isSilentBlur = byClick;\n    setSoftFocus();\n    if (states.visible)\n      return;\n    runtime_core_esm_bundler_nextTick(() => {\n      scrollToOption(option);\n    });\n  };\n  const getValueIndex = (arr = [], value) => {\n    if (!shared_esm_bundler_isObject(value))\n      return arr.indexOf(value);\n    const valueKey = props.valueKey;\n    let index = -1;\n    arr.some((item, i) => {\n      if (lodash_es_get(item, valueKey) === lodash_es_get(value, valueKey)) {\n        index = i;\n        return true;\n      }\n      return false;\n    });\n    return index;\n  };\n  const setSoftFocus = () => {\n    states.softFocus = true;\n    const _input = input.value || reference.value;\n    if (_input) {\n      _input == null ? void 0 : _input.focus();\n    }\n  };\n  const scrollToOption = (option) => {\n    var _a, _b, _c, _d, _e;\n    const targetOption = Array.isArray(option) ? option[0] : option;\n    let target = null;\n    if (targetOption == null ? void 0 : targetOption.value) {\n      const options = optionsArray.value.filter((item) => item.value === targetOption.value);\n      if (options.length > 0) {\n        target = options[0].$el;\n      }\n    }\n    if (tooltipRef.value && target) {\n      const menu = (_d = (_c = (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef) == null ? void 0 : _c.querySelector) == null ? void 0 : _d.call(_c, ".el-select-dropdown__wrap");\n      if (menu) {\n        scrollIntoView(menu, target);\n      }\n    }\n    (_e = scrollbar.value) == null ? void 0 : _e.handleScroll();\n  };\n  const onOptionCreate = (vm) => {\n    states.optionsCount++;\n    states.filteredOptionsCount++;\n    states.options.set(vm.value, vm);\n    states.cachedOptions.set(vm.value, vm);\n  };\n  const onOptionDestroy = (key) => {\n    states.optionsCount--;\n    states.filteredOptionsCount--;\n    states.options.delete(key);\n  };\n  const resetInputState = (e) => {\n    if (e.code !== EVENT_CODE.backspace)\n      toggleLastOptionHitState(false);\n    states.inputLength = input.value.value.length * 15 + 20;\n    resetInputHeight();\n  };\n  const toggleLastOptionHitState = (hit) => {\n    if (!Array.isArray(states.selected))\n      return;\n    const option = states.selected[states.selected.length - 1];\n    if (!option)\n      return;\n    if (hit === true || hit === false) {\n      option.hitState = hit;\n      return hit;\n    }\n    option.hitState = !option.hitState;\n    return option.hitState;\n  };\n  const handleComposition = (event) => {\n    const text = event.target.value;\n    if (event.type === "compositionend") {\n      states.isOnComposition = false;\n      runtime_core_esm_bundler_nextTick(() => handleQueryChange(text));\n    } else {\n      const lastCharacter = text[text.length - 1] || "";\n      states.isOnComposition = !isKorean(lastCharacter);\n    }\n  };\n  const handleMenuEnter = () => {\n    runtime_core_esm_bundler_nextTick(() => scrollToOption(states.selected));\n  };\n  const handleFocus = (event) => {\n    if (!states.softFocus) {\n      if (props.automaticDropdown || props.filterable) {\n        states.visible = true;\n        if (props.filterable) {\n          states.menuVisibleOnFocus = true;\n        }\n      }\n      ctx.emit("focus", event);\n    } else {\n      states.softFocus = false;\n    }\n  };\n  const blur = () => {\n    var _a;\n    states.visible = false;\n    (_a = reference.value) == null ? void 0 : _a.blur();\n  };\n  const handleBlur = (event) => {\n    runtime_core_esm_bundler_nextTick(() => {\n      if (states.isSilentBlur) {\n        states.isSilentBlur = false;\n      } else {\n        ctx.emit("blur", event);\n      }\n    });\n    states.softFocus = false;\n  };\n  const handleClearClick = (event) => {\n    deleteSelected(event);\n  };\n  const handleClose = () => {\n    states.visible = false;\n  };\n  const toggleMenu = () => {\n    var _a;\n    if (props.automaticDropdown)\n      return;\n    if (!selectDisabled.value) {\n      if (states.menuVisibleOnFocus) {\n        states.menuVisibleOnFocus = false;\n      } else {\n        states.visible = !states.visible;\n      }\n      if (states.visible) {\n        ;\n        (_a = input.value || reference.value) == null ? void 0 : _a.focus();\n      }\n    }\n  };\n  const selectOption = () => {\n    if (!states.visible) {\n      toggleMenu();\n    } else {\n      if (optionsArray.value[states.hoverIndex]) {\n        handleOptionSelect(optionsArray.value[states.hoverIndex], void 0);\n      }\n    }\n  };\n  const getValueKey = (item) => {\n    return shared_esm_bundler_isObject(item.value) ? lodash_es_get(item.value, props.valueKey) : item.value;\n  };\n  const optionsAllDisabled = runtime_core_esm_bundler_computed(() => optionsArray.value.filter((option) => option.visible).every((option) => option.disabled));\n  const navigateOptions = (direction) => {\n    if (!states.visible) {\n      states.visible = true;\n      return;\n    }\n    if (states.options.size === 0 || states.filteredOptionsCount === 0)\n      return;\n    if (states.isOnComposition)\n      return;\n    if (!optionsAllDisabled.value) {\n      if (direction === "next") {\n        states.hoverIndex++;\n        if (states.hoverIndex === states.options.size) {\n          states.hoverIndex = 0;\n        }\n      } else if (direction === "prev") {\n        states.hoverIndex--;\n        if (states.hoverIndex < 0) {\n          states.hoverIndex = states.options.size - 1;\n        }\n      }\n      const option = optionsArray.value[states.hoverIndex];\n      if (option.disabled === true || option.states.groupDisabled === true || !option.visible) {\n        navigateOptions(direction);\n      }\n      runtime_core_esm_bundler_nextTick(() => scrollToOption(hoverOption.value));\n    }\n  };\n  return {\n    optionsArray,\n    selectSize,\n    handleResize,\n    debouncedOnInputChange,\n    debouncedQueryChange,\n    deletePrevTag,\n    deleteTag,\n    deleteSelected,\n    handleOptionSelect,\n    scrollToOption,\n    readonly,\n    resetInputHeight,\n    showClose,\n    iconComponent,\n    iconReverse,\n    showNewOption,\n    collapseTagSize,\n    setSelected,\n    managePlaceholder,\n    selectDisabled,\n    emptyText,\n    toggleLastOptionHitState,\n    resetInputState,\n    handleComposition,\n    onOptionCreate,\n    onOptionDestroy,\n    handleMenuEnter,\n    handleFocus,\n    blur,\n    handleBlur,\n    handleClearClick,\n    handleClose,\n    toggleMenu,\n    selectOption,\n    getValueKey,\n    navigateOptions,\n    dropMenuVisible,\n    queryChange,\n    groupQueryChange,\n    reference,\n    input,\n    tooltipRef,\n    tags,\n    selectWrapper,\n    scrollbar\n  };\n};\n\n\n//# sourceMappingURL=useSelect.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/directives/click-outside/index.mjs\n\n\n\n\nconst nodeList = /* @__PURE__ */ new Map();\nlet startClick;\nif (shared_isClient) {\n  document.addEventListener("mousedown", (e) => startClick = e);\n  document.addEventListener("mouseup", (e) => {\n    for (const handlers of nodeList.values()) {\n      for (const { documentHandler } of handlers) {\n        documentHandler(e, startClick);\n      }\n    }\n  });\n}\nfunction createDocumentHandler(el, binding) {\n  let excludes = [];\n  if (Array.isArray(binding.arg)) {\n    excludes = binding.arg;\n  } else if (isElement(binding.arg)) {\n    excludes.push(binding.arg);\n  }\n  return function(mouseup, mousedown) {\n    const popperRef = binding.instance.popperRef;\n    const mouseUpTarget = mouseup.target;\n    const mouseDownTarget = mousedown == null ? void 0 : mousedown.target;\n    const isBound = !binding || !binding.instance;\n    const isTargetExists = !mouseUpTarget || !mouseDownTarget;\n    const isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);\n    const isSelf = el === mouseUpTarget;\n    const isTargetExcluded = excludes.length && excludes.some((item) => item == null ? void 0 : item.contains(mouseUpTarget)) || excludes.length && excludes.includes(mouseDownTarget);\n    const isContainedByPopper = popperRef && (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget));\n    if (isBound || isTargetExists || isContainedByEl || isSelf || isTargetExcluded || isContainedByPopper) {\n      return;\n    }\n    binding.value(mouseup, mousedown);\n  };\n}\nconst ClickOutside = {\n  beforeMount(el, binding) {\n    if (!nodeList.has(el)) {\n      nodeList.set(el, []);\n    }\n    nodeList.get(el).push({\n      documentHandler: createDocumentHandler(el, binding),\n      bindingFn: binding.value\n    });\n  },\n  updated(el, binding) {\n    if (!nodeList.has(el)) {\n      nodeList.set(el, []);\n    }\n    const handlers = nodeList.get(el);\n    const oldHandlerIndex = handlers.findIndex((item) => item.bindingFn === binding.oldValue);\n    const newHandler = {\n      documentHandler: createDocumentHandler(el, binding),\n      bindingFn: binding.value\n    };\n    if (oldHandlerIndex >= 0) {\n      handlers.splice(oldHandlerIndex, 1, newHandler);\n    } else {\n      handlers.push(newHandler);\n    }\n  },\n  unmounted(el) {\n    nodeList.delete(el);\n  }\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/validator.mjs\n\n\n\n\nconst isValidComponentSize = (val) => ["", ...componentSizes].includes(val);\nconst isValidDatePickType = (val) => [...datePickTypes].includes(val);\n\n\n//# sourceMappingURL=validator.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-focus/index.mjs\nconst use_focus_useFocus = (el) => {\n  return {\n    focus: () => {\n      var _a, _b;\n      (_b = (_a = el.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    }\n  };\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-deprecated/index.mjs\n\n\n\n\nconst useDeprecated = ({ from, replacement, scope, version, ref }, condition) => {\n  runtime_core_esm_bundler_watch(() => reactivity_esm_bundler_unref(condition), (val) => {\n    if (val) {\n      error_debugWarn(scope, `API ${from} is about to be deprecated in version ${version}, please use ${replacement} instead.\nFor more detail, please visit: ${ref}\n`);\n    }\n  }, {\n    immediate: true\n  });\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/popper/src/deprecation.mjs\n\n\n\n\n\n\nfunction useDeprecateAppendToBody(scope, from) {\n  const vm = runtime_core_esm_bundler_getCurrentInstance();\n  const compatTeleported = runtime_core_esm_bundler_computed(() => {\n    return shared_isBoolean(vm.props[from]) ? vm.props[from] : vm.props.teleported;\n  });\n  useDeprecated({\n    scope,\n    from,\n    replacement: "teleported",\n    version: "2.1.0",\n    ref: "https://element-plus.org/en-US/component/tooltip.html#attributes"\n  }, runtime_core_esm_bundler_computed(() => shared_isBoolean(vm.props[from])));\n  return {\n    compatTeleported\n  };\n}\n\n\n//# sourceMappingURL=deprecation.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/select.mjs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst select_COMPONENT_NAME = "ElSelect";\nconst select_sfc_main = defineComponent({\n  name: select_COMPONENT_NAME,\n  componentName: select_COMPONENT_NAME,\n  components: {\n    ElInput: ElInput,\n    ElSelectMenu: ElSelectMenu,\n    ElOption: Option,\n    ElTag: ElTag,\n    ElScrollbar: ElScrollbar,\n    ElTooltip: ElTooltip,\n    ElIcon: ElIcon\n  },\n  directives: { ClickOutside: ClickOutside },\n  props: {\n    name: String,\n    id: String,\n    modelValue: {\n      type: [Array, String, Number, Boolean, Object],\n      default: void 0\n    },\n    autocomplete: {\n      type: String,\n      default: "off"\n    },\n    automaticDropdown: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    effect: {\n      type: String,\n      default: "light"\n    },\n    disabled: Boolean,\n    clearable: Boolean,\n    filterable: Boolean,\n    allowCreate: Boolean,\n    loading: Boolean,\n    popperClass: {\n      type: String,\n      default: ""\n    },\n    remote: Boolean,\n    loadingText: String,\n    noMatchText: String,\n    noDataText: String,\n    remoteMethod: Function,\n    filterMethod: Function,\n    multiple: Boolean,\n    multipleLimit: {\n      type: Number,\n      default: 0\n    },\n    placeholder: {\n      type: String\n    },\n    defaultFirstOption: Boolean,\n    reserveKeyword: {\n      type: Boolean,\n      default: true\n    },\n    valueKey: {\n      type: String,\n      default: "value"\n    },\n    collapseTags: Boolean,\n    popperAppendToBody: {\n      type: Boolean,\n      default: void 0\n    },\n    teleported: useTooltipContentProps.teleported,\n    clearIcon: {\n      type: [String, Object],\n      default: circleClose\n    },\n    fitInputWidth: {\n      type: Boolean,\n      default: false\n    },\n    suffixIcon: {\n      type: [String, Object],\n      default: arrowUp\n    },\n    tagType: { ...tagProps.type, default: "info" }\n  },\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    "remove-tag",\n    "clear",\n    "visible-change",\n    "focus",\n    "blur"\n  ],\n  setup(props, ctx) {\n    const nsSelect = useNamespace("select");\n    const nsInput = useNamespace("input");\n    const { t } = useLocale();\n    const states = useSelectStates(props);\n    const {\n      optionsArray,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      setSelected,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      onOptionCreate,\n      onOptionDestroy,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      reference,\n      input,\n      tooltipRef,\n      tags,\n      selectWrapper,\n      scrollbar,\n      queryChange,\n      groupQueryChange\n    } = useSelect(props, states, ctx);\n    const { focus } = use_focus_useFocus(reference);\n    const {\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      cachedOptions,\n      optionsCount,\n      prefixWidth,\n      tagInMultiLine\n    } = reactivity_esm_bundler_toRefs(states);\n    const wrapperKls = runtime_core_esm_bundler_computed(() => {\n      const classList = [nsSelect.b()];\n      const _selectSize = reactivity_esm_bundler_unref(selectSize);\n      if (_selectSize) {\n        classList.push(nsSelect.m(_selectSize));\n      }\n      if (props.disabled) {\n        classList.push(nsSelect.m("disabled"));\n      }\n      return classList;\n    });\n    const selectTagsStyle = runtime_core_esm_bundler_computed(() => ({\n      maxWidth: `${reactivity_esm_bundler_unref(inputWidth) - 32}px`,\n      width: "100%"\n    }));\n    runtime_core_esm_bundler_provide(selectKey, reactivity_esm_bundler_reactive({\n      props,\n      options,\n      optionsArray,\n      cachedOptions,\n      optionsCount,\n      filteredOptionsCount,\n      hoverIndex,\n      handleOptionSelect,\n      onOptionCreate,\n      onOptionDestroy,\n      selectWrapper,\n      selected,\n      setSelected,\n      queryChange,\n      groupQueryChange\n    }));\n    runtime_core_esm_bundler_onMounted(() => {\n      states.cachedPlaceHolder = currentPlaceholder.value = props.placeholder || t("el.select.placeholder");\n      if (props.multiple && Array.isArray(props.modelValue) && props.modelValue.length > 0) {\n        currentPlaceholder.value = "";\n      }\n      addResizeListener(selectWrapper.value, handleResize);\n      if (reference.value && reference.value.$el) {\n        const sizeMap = {\n          large: 36,\n          default: 32,\n          small: 28\n        };\n        const input2 = reference.value.input;\n        states.initialInputHeight = input2.getBoundingClientRect().height || sizeMap[selectSize.value];\n      }\n      if (props.remote && props.multiple) {\n        resetInputHeight();\n      }\n      runtime_core_esm_bundler_nextTick(() => {\n        if (!reference.value)\n          return;\n        if (reference.value.$el) {\n          inputWidth.value = reference.value.$el.getBoundingClientRect().width;\n        }\n        if (ctx.slots.prefix) {\n          const inputChildNodes = reference.value.$el.childNodes;\n          const input2 = Array.from(inputChildNodes).filter((item) => item.tagName === "INPUT")[0];\n          const prefix = reference.value.$el.querySelector(`.${nsInput.e("prefix")}`);\n          prefixWidth.value = Math.max(prefix.getBoundingClientRect().width + 5, 30);\n          if (states.prefixWidth) {\n            input2.style.paddingLeft = `${Math.max(states.prefixWidth, 30)}px`;\n          }\n        }\n      });\n      setSelected();\n    });\n    runtime_core_esm_bundler_onBeforeUnmount(() => {\n      removeResizeListener(selectWrapper.value, handleResize);\n    });\n    if (props.multiple && !Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, []);\n    }\n    if (!props.multiple && Array.isArray(props.modelValue)) {\n      ctx.emit(UPDATE_MODEL_EVENT, "");\n    }\n    const popperPaneRef = runtime_core_esm_bundler_computed(() => {\n      var _a, _b;\n      return (_b = (_a = tooltipRef.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    const { compatTeleported } = useDeprecateAppendToBody(select_COMPONENT_NAME, "popperAppendToBody");\n    return {\n      tagInMultiLine,\n      prefixWidth,\n      selectSize,\n      readonly,\n      handleResize,\n      collapseTagSize,\n      debouncedOnInputChange,\n      debouncedQueryChange,\n      deletePrevTag,\n      deleteTag,\n      deleteSelected,\n      handleOptionSelect,\n      scrollToOption,\n      inputWidth,\n      selected,\n      inputLength,\n      filteredOptionsCount,\n      visible,\n      softFocus,\n      selectedLabel,\n      hoverIndex,\n      query,\n      inputHovering,\n      currentPlaceholder,\n      menuVisibleOnFocus,\n      isOnComposition,\n      isSilentBlur,\n      options,\n      resetInputHeight,\n      managePlaceholder,\n      showClose,\n      selectDisabled,\n      iconComponent,\n      iconReverse,\n      showNewOption,\n      emptyText,\n      toggleLastOptionHitState,\n      resetInputState,\n      handleComposition,\n      handleMenuEnter,\n      handleFocus,\n      blur,\n      handleBlur,\n      handleClearClick,\n      handleClose,\n      toggleMenu,\n      selectOption,\n      getValueKey,\n      navigateOptions,\n      dropMenuVisible,\n      focus,\n      reference,\n      input,\n      tooltipRef,\n      popperPaneRef,\n      tags,\n      selectWrapper,\n      scrollbar,\n      wrapperKls,\n      selectTagsStyle,\n      compatTeleported,\n      nsSelect\n    };\n  }\n});\nconst select_hoisted_1 = { class: "select-trigger" };\nconst select_hoisted_2 = ["disabled", "autocomplete"];\nconst select_hoisted_3 = { style: { "height": "100%", "display": "flex", "justify-content": "center", "align-items": "center" } };\nfunction select_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tag = resolveComponent("el-tag");\n  const _component_el_icon = resolveComponent("el-icon");\n  const _component_el_input = resolveComponent("el-input");\n  const _component_el_option = resolveComponent("el-option");\n  const _component_el_scrollbar = resolveComponent("el-scrollbar");\n  const _component_el_select_menu = resolveComponent("el-select-menu");\n  const _component_el_tooltip = resolveComponent("el-tooltip");\n  const _directive_click_outside = resolveDirective("click-outside");\n  return withDirectives((runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n    ref: "selectWrapper",\n    class: normalizeClass(_ctx.wrapperKls),\n    onClick: _cache[24] || (_cache[24] = withModifiers((...args) => _ctx.toggleMenu && _ctx.toggleMenu(...args), ["stop"]))\n  }, [\n    createVNode(_component_el_tooltip, {\n      ref: "tooltipRef",\n      visible: _ctx.dropMenuVisible,\n      "onUpdate:visible": _cache[23] || (_cache[23] = ($event) => _ctx.dropMenuVisible = $event),\n      placement: "bottom-start",\n      teleported: _ctx.compatTeleported,\n      "popper-class": [_ctx.nsSelect.e("popper"), _ctx.popperClass],\n      "fallback-placements": ["bottom-start", "top-start", "right", "left"],\n      effect: _ctx.effect,\n      pure: "",\n      trigger: "click",\n      transition: `${_ctx.nsSelect.namespace.value}-zoom-in-top`,\n      "stop-popper-mouse-event": false,\n      "gpu-acceleration": false,\n      persistent: "",\n      onShow: _ctx.handleMenuEnter\n    }, {\n      default: withCtx(() => [\n        createBaseVNode("div", select_hoisted_1, [\n          _ctx.multiple ? (runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n            key: 0,\n            ref: "tags",\n            class: normalizeClass(_ctx.nsSelect.e("tags")),\n            style: normalizeStyle(_ctx.selectTagsStyle)\n          }, [\n            _ctx.collapseTags && _ctx.selected.length ? (runtime_core_esm_bundler_openBlock(), createElementBlock("span", {\n              key: 0,\n              style: normalizeStyle({\n                marginLeft: _ctx.prefixWidth && _ctx.selected.length ? `${_ctx.prefixWidth}px` : ""\n              })\n            }, [\n              createVNode(_component_el_tag, {\n                closable: !_ctx.selectDisabled && !_ctx.selected[0].isDisabled,\n                size: _ctx.collapseTagSize,\n                hit: _ctx.selected[0].hitState,\n                type: _ctx.tagType,\n                "disable-transitions": "",\n                onClose: _cache[0] || (_cache[0] = ($event) => _ctx.deleteTag($event, _ctx.selected[0]))\n              }, {\n                default: withCtx(() => [\n                  createBaseVNode("span", {\n                    class: normalizeClass(_ctx.nsSelect.e("tags-text")),\n                    style: normalizeStyle({ maxWidth: _ctx.inputWidth - 123 + "px" })\n                  }, toDisplayString(_ctx.selected[0].currentLabel), 7)\n                ]),\n                _: 1\n              }, 8, ["closable", "size", "hit", "type"]),\n              _ctx.selected.length > 1 ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_tag, {\n                key: 0,\n                closable: false,\n                size: _ctx.collapseTagSize,\n                type: _ctx.tagType,\n                "disable-transitions": ""\n              }, {\n                default: withCtx(() => [\n                  createBaseVNode("span", {\n                    class: normalizeClass(_ctx.nsSelect.e("tags-text"))\n                  }, "+ " + toDisplayString(_ctx.selected.length - 1), 3)\n                ]),\n                _: 1\n              }, 8, ["size", "type"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n            ], 4)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n            runtime_core_esm_bundler_createCommentVNode(" <div> "),\n            !_ctx.collapseTags ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(Transition, {\n              key: 1,\n              onAfterLeave: _ctx.resetInputHeight\n            }, {\n              default: withCtx(() => [\n                createBaseVNode("span", {\n                  style: normalizeStyle({\n                    marginLeft: _ctx.prefixWidth && _ctx.selected.length ? `${_ctx.prefixWidth}px` : ""\n                  })\n                }, [\n                  (runtime_core_esm_bundler_openBlock(true), createElementBlock(runtime_core_esm_bundler_Fragment, null, renderList(_ctx.selected, (item) => {\n                    return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_tag, {\n                      key: _ctx.getValueKey(item),\n                      closable: !_ctx.selectDisabled && !item.isDisabled,\n                      size: _ctx.collapseTagSize,\n                      hit: item.hitState,\n                      type: _ctx.tagType,\n                      "disable-transitions": "",\n                      onClose: ($event) => _ctx.deleteTag($event, item)\n                    }, {\n                      default: withCtx(() => [\n                        createBaseVNode("span", {\n                          class: normalizeClass(_ctx.nsSelect.e("tags-text")),\n                          style: normalizeStyle({ maxWidth: _ctx.inputWidth - 75 + "px" })\n                        }, toDisplayString(item.currentLabel), 7)\n                      ]),\n                      _: 2\n                    }, 1032, ["closable", "size", "hit", "type", "onClose"]);\n                  }), 128))\n                ], 4)\n              ]),\n              _: 1\n            }, 8, ["onAfterLeave"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n            runtime_core_esm_bundler_createCommentVNode(" </div> "),\n            _ctx.filterable ? withDirectives((runtime_core_esm_bundler_openBlock(), createElementBlock("input", {\n              key: 2,\n              ref: "input",\n              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => _ctx.query = $event),\n              type: "text",\n              class: normalizeClass([_ctx.nsSelect.e("input"), _ctx.nsSelect.is(_ctx.selectSize)]),\n              disabled: _ctx.selectDisabled,\n              autocomplete: _ctx.autocomplete,\n              style: normalizeStyle({\n                marginLeft: _ctx.prefixWidth && !_ctx.selected.length || _ctx.tagInMultiLine ? `${_ctx.prefixWidth}px` : "",\n                flexGrow: 1,\n                width: `${_ctx.inputLength / (_ctx.inputWidth - 32)}%`,\n                maxWidth: `${_ctx.inputWidth - 42}px`\n              }),\n              onFocus: _cache[2] || (_cache[2] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args)),\n              onBlur: _cache[3] || (_cache[3] = (...args) => _ctx.handleBlur && _ctx.handleBlur(...args)),\n              onKeyup: _cache[4] || (_cache[4] = (...args) => _ctx.managePlaceholder && _ctx.managePlaceholder(...args)),\n              onKeydown: [\n                _cache[5] || (_cache[5] = (...args) => _ctx.resetInputState && _ctx.resetInputState(...args)),\n                _cache[6] || (_cache[6] = withKeys(withModifiers(($event) => _ctx.navigateOptions("next"), ["prevent"]), ["down"])),\n                _cache[7] || (_cache[7] = withKeys(withModifiers(($event) => _ctx.navigateOptions("prev"), ["prevent"]), ["up"])),\n                _cache[8] || (_cache[8] = withKeys(withModifiers(($event) => _ctx.visible = false, ["stop", "prevent"]), ["esc"])),\n                _cache[9] || (_cache[9] = withKeys(withModifiers((...args) => _ctx.selectOption && _ctx.selectOption(...args), ["stop", "prevent"]), ["enter"])),\n                _cache[10] || (_cache[10] = withKeys((...args) => _ctx.deletePrevTag && _ctx.deletePrevTag(...args), ["delete"])),\n                _cache[11] || (_cache[11] = withKeys(($event) => _ctx.visible = false, ["tab"]))\n              ],\n              onCompositionstart: _cache[12] || (_cache[12] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n              onCompositionupdate: _cache[13] || (_cache[13] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n              onCompositionend: _cache[14] || (_cache[14] = (...args) => _ctx.handleComposition && _ctx.handleComposition(...args)),\n              onInput: _cache[15] || (_cache[15] = (...args) => _ctx.debouncedQueryChange && _ctx.debouncedQueryChange(...args))\n            }, null, 46, select_hoisted_2)), [\n              [vModelText, _ctx.query]\n            ]) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n          ], 6)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n          createVNode(_component_el_input, {\n            id: _ctx.id,\n            ref: "reference",\n            modelValue: _ctx.selectedLabel,\n            "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => _ctx.selectedLabel = $event),\n            type: "text",\n            placeholder: _ctx.currentPlaceholder,\n            name: _ctx.name,\n            autocomplete: _ctx.autocomplete,\n            size: _ctx.selectSize,\n            disabled: _ctx.selectDisabled,\n            readonly: _ctx.readonly,\n            "validate-event": false,\n            class: normalizeClass([_ctx.nsSelect.is("focus", _ctx.visible)]),\n            tabindex: _ctx.multiple && _ctx.filterable ? -1 : void 0,\n            onFocus: _ctx.handleFocus,\n            onBlur: _ctx.handleBlur,\n            onInput: _ctx.debouncedOnInputChange,\n            onPaste: _ctx.debouncedOnInputChange,\n            onCompositionstart: _ctx.handleComposition,\n            onCompositionupdate: _ctx.handleComposition,\n            onCompositionend: _ctx.handleComposition,\n            onKeydown: [\n              _cache[17] || (_cache[17] = withKeys(withModifiers(($event) => _ctx.navigateOptions("next"), ["stop", "prevent"]), ["down"])),\n              _cache[18] || (_cache[18] = withKeys(withModifiers(($event) => _ctx.navigateOptions("prev"), ["stop", "prevent"]), ["up"])),\n              withKeys(withModifiers(_ctx.selectOption, ["stop", "prevent"]), ["enter"]),\n              _cache[19] || (_cache[19] = withKeys(withModifiers(($event) => _ctx.visible = false, ["stop", "prevent"]), ["esc"])),\n              _cache[20] || (_cache[20] = withKeys(($event) => _ctx.visible = false, ["tab"]))\n            ],\n            onMouseenter: _cache[21] || (_cache[21] = ($event) => _ctx.inputHovering = true),\n            onMouseleave: _cache[22] || (_cache[22] = ($event) => _ctx.inputHovering = false)\n          }, createSlots({\n            suffix: withCtx(() => [\n              _ctx.iconComponent ? withDirectives((runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n                key: 0,\n                class: normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon"), _ctx.iconReverse])\n              }, {\n                default: withCtx(() => [\n                  (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.iconComponent)))\n                ]),\n                _: 1\n              }, 8, ["class"])), [\n                [vShow, !_ctx.showClose]\n              ]) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n              _ctx.showClose && _ctx.clearIcon ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_icon, {\n                key: 1,\n                class: normalizeClass([_ctx.nsSelect.e("caret"), _ctx.nsSelect.e("icon")]),\n                onClick: _ctx.handleClearClick\n              }, {\n                default: withCtx(() => [\n                  (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.clearIcon)))\n                ]),\n                _: 1\n              }, 8, ["class", "onClick"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n            ]),\n            _: 2\n          }, [\n            _ctx.$slots.prefix ? {\n              name: "prefix",\n              fn: withCtx(() => [\n                createBaseVNode("div", select_hoisted_3, [\n                  renderSlot(_ctx.$slots, "prefix")\n                ])\n              ])\n            } : void 0\n          ]), 1032, ["id", "modelValue", "placeholder", "name", "autocomplete", "size", "disabled", "readonly", "class", "tabindex", "onFocus", "onBlur", "onInput", "onPaste", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onKeydown"])\n        ])\n      ]),\n      content: withCtx(() => [\n        createVNode(_component_el_select_menu, null, {\n          default: withCtx(() => [\n            withDirectives(createVNode(_component_el_scrollbar, {\n              ref: "scrollbar",\n              tag: "ul",\n              "wrap-class": _ctx.nsSelect.be("dropdown", "wrap"),\n              "view-class": _ctx.nsSelect.be("dropdown", "list"),\n              class: normalizeClass([\n                _ctx.nsSelect.is("empty", !_ctx.allowCreate && _ctx.query && _ctx.filteredOptionsCount === 0)\n              ])\n            }, {\n              default: withCtx(() => [\n                _ctx.showNewOption ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_option, {\n                  key: 0,\n                  value: _ctx.query,\n                  created: true\n                }, null, 8, ["value"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n                renderSlot(_ctx.$slots, "default")\n              ]),\n              _: 3\n            }, 8, ["wrap-class", "view-class", "class"]), [\n              [vShow, _ctx.options.size > 0 && !_ctx.loading]\n            ]),\n            _ctx.emptyText && (!_ctx.allowCreate || _ctx.loading || _ctx.allowCreate && _ctx.options.size === 0) ? (runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, { key: 0 }, [\n              _ctx.$slots.empty ? renderSlot(_ctx.$slots, "empty", { key: 0 }) : (runtime_core_esm_bundler_openBlock(), createElementBlock("p", {\n                key: 1,\n                class: normalizeClass(_ctx.nsSelect.be("dropdown", "empty"))\n              }, toDisplayString(_ctx.emptyText), 3))\n            ], 2112)) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n          ]),\n          _: 3\n        })\n      ]),\n      _: 3\n    }, 8, ["visible", "teleported", "popper-class", "effect", "transition", "onShow"])\n  ], 2)), [\n    [_directive_click_outside, _ctx.handleClose, _ctx.popperPaneRef]\n  ]);\n}\nvar Select = /* @__PURE__ */ _export_sfc(select_sfc_main, [["render", select_sfc_render]]);\n\n\n//# sourceMappingURL=select.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/src/option-group.mjs\n\n\n\n\n\n\nconst option_group_sfc_main = defineComponent({\n  name: "ElOptionGroup",\n  componentName: "ElOptionGroup",\n  props: {\n    label: String,\n    disabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  setup(props) {\n    const ns = useNamespace("select");\n    const visible = reactivity_esm_bundler_ref(true);\n    const instance = runtime_core_esm_bundler_getCurrentInstance();\n    const children = reactivity_esm_bundler_ref([]);\n    runtime_core_esm_bundler_provide(selectGroupKey, reactivity_esm_bundler_reactive({\n      ...reactivity_esm_bundler_toRefs(props)\n    }));\n    const select = runtime_core_esm_bundler_inject(selectKey);\n    runtime_core_esm_bundler_onMounted(() => {\n      children.value = flattedChildren(instance.subTree);\n    });\n    const flattedChildren = (node) => {\n      const children2 = [];\n      if (Array.isArray(node.children)) {\n        node.children.forEach((child) => {\n          var _a;\n          if (child.type && child.type.name === "ElOption" && child.component && child.component.proxy) {\n            children2.push(child.component.proxy);\n          } else if ((_a = child.children) == null ? void 0 : _a.length) {\n            children2.push(...flattedChildren(child));\n          }\n        });\n      }\n      return children2;\n    };\n    const { groupQueryChange } = reactivity_esm_bundler_toRaw(select);\n    runtime_core_esm_bundler_watch(groupQueryChange, () => {\n      visible.value = children.value.some((option) => option.visible === true);\n    });\n    return {\n      visible,\n      ns\n    };\n  }\n});\nfunction option_group_sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return withDirectives((runtime_core_esm_bundler_openBlock(), createElementBlock("ul", {\n    class: normalizeClass(_ctx.ns.be("group", "wrap"))\n  }, [\n    createBaseVNode("li", {\n      class: normalizeClass(_ctx.ns.be("group", "title"))\n    }, toDisplayString(_ctx.label), 3),\n    createBaseVNode("li", null, [\n      createBaseVNode("ul", {\n        class: normalizeClass(_ctx.ns.b("group"))\n      }, [\n        renderSlot(_ctx.$slots, "default")\n      ], 2)\n    ])\n  ], 2)), [\n    [vShow, _ctx.visible]\n  ]);\n}\nvar OptionGroup = /* @__PURE__ */ _export_sfc(option_group_sfc_main, [["render", option_group_sfc_render]]);\n\n\n//# sourceMappingURL=option-group.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/select/index.mjs\n\n\n\n\n\n\n\nconst ElSelect = withInstall(Select, {\n  Option: Option,\n  OptionGroup: OptionGroup\n});\nconst ElOption = withNoopInstall(Option);\nconst ElOptionGroup = withNoopInstall(OptionGroup);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[3].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[5]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/CartPageUpsell/UpsellModal.vue?vue&type=template&id=4dfab33f\n/* unplugin-vue-components disabled */\n\n\n\n\nvar UpsellModalvue_type_template_id_4dfab33f_hoisted_1 = /*#__PURE__*/createBaseVNode("meta", {\n  name: "viewport",\n  content: "width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"\n}, null, -1);\n\nvar UpsellModalvue_type_template_id_4dfab33f_hoisted_2 = {\n  "class": "description"\n};\n\nvar UpsellModalvue_type_template_id_4dfab33f_hoisted_3 = /*#__PURE__*/createBaseVNode("p", {\n  "class": "offer-fine-print"\n}, " No discount code needed! This offer stacks with other discounts & promotions. ", -1);\n\nvar UpsellModalvue_type_template_id_4dfab33f_hoisted_4 = {\n  "class": "cta-buttons"\n};\n\nvar _hoisted_5 = /*#__PURE__*/createTextVNode(" Let\'s Do It ");\n\nvar _hoisted_6 = /*#__PURE__*/createTextVNode(" No Thanks ");\n\nfunction UpsellModalvue_type_template_id_4dfab33f_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_option = ElOption;\n\n  var _component_el_select = ElSelect;\n\n  var _component_el_button = ElButton;\n\n  var _component_offer_modal = resolveComponent("offer-modal");\n\n  return runtime_core_esm_bundler_openBlock(), createElementBlock(runtime_core_esm_bundler_Fragment, null, [UpsellModalvue_type_template_id_4dfab33f_hoisted_1, _ctx.upsellTo ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_offer_modal, {\n    key: 0,\n    visible: _ctx.upsellModalOpened,\n    title: "Limited Time Offer!",\n    image: _ctx.upsellTo.featured_image ? _ctx.upsellTo.featured_image.src : \'\',\n    "countdown-to": $options.countdownTo,\n    onClose: _cache[2] || (_cache[2] = function ($event) {\n      return $options.closeModal();\n    })\n  }, {\n    content: withCtx(function () {\n      return [createBaseVNode("p", UpsellModalvue_type_template_id_4dfab33f_hoisted_2, [createTextVNode(" Boost to " + toDisplayString($options.preWord) + " ", 1), createBaseVNode("strong", null, toDisplayString(_ctx.upsellTo.title), 1), createTextVNode(" for only " + toDisplayString($options.usdCurrency(_ctx.upsellTo.savings)) + " more! ", 1)]), UpsellModalvue_type_template_id_4dfab33f_hoisted_3, createVNode(_component_el_select, {\n        "model-value": _ctx.upsellTo.variant_id,\n        placeholder: "Select",\n        "class": "upsell-options-select",\n        onChange: _ctx.setUpsellToId\n      }, {\n        "default": withCtx(function () {\n          return [(runtime_core_esm_bundler_openBlock(true), createElementBlock(runtime_core_esm_bundler_Fragment, null, renderList(_ctx.upsellOptions, function (option) {\n            return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_option, {\n              key: option.variant_id,\n              label: $options.generateLabelString(option),\n              value: option.variant_id,\n              disabled: _ctx.loading\n            }, null, 8, ["label", "value", "disabled"]);\n          }), 128))];\n        }),\n        _: 1\n      }, 8, ["model-value", "onChange"])];\n    }),\n    footer: withCtx(function () {\n      return [createBaseVNode("div", UpsellModalvue_type_template_id_4dfab33f_hoisted_4, [createVNode(_component_el_button, {\n        type: "primary",\n        disabled: _ctx.loading,\n        onClick: _cache[0] || (_cache[0] = function ($event) {\n          return $options.handleConfirm();\n        })\n      }, {\n        "default": withCtx(function () {\n          return [_hoisted_5];\n        }),\n        _: 1\n      }, 8, ["disabled"]), createVNode(_component_el_button, {\n        disabled: _ctx.loading,\n        onClick: _cache[1] || (_cache[1] = function ($event) {\n          return $options.handleDeny();\n        })\n      }, {\n        "default": withCtx(function () {\n          return [_hoisted_6];\n        }),\n        _: 1\n      }, 8, ["disabled"])])];\n    }),\n    _: 1\n  }, 8, ["visible", "image", "countdown-to"])) : runtime_core_esm_bundler_createCommentVNode("", true)], 64);\n}\n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/UpsellModal.vue?vue&type=template&id=4dfab33f\n/* unplugin-vue-components disabled */\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/dialog.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/overlay.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/overlay/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/style/index.mjs\n\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/row.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/row/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/col.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/col/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-same-target/index.mjs\n\n\nconst useSameTarget = (handleClick) => {\n  if (!handleClick) {\n    return { onClick: shared_esm_bundler_NOOP, onMousedown: shared_esm_bundler_NOOP, onMouseup: shared_esm_bundler_NOOP };\n  }\n  let mousedownTarget = false;\n  let mouseupTarget = false;\n  const onClick = (e) => {\n    if (mousedownTarget && mouseupTarget) {\n      handleClick(e);\n    }\n    mousedownTarget = mouseupTarget = false;\n  };\n  const onMousedown = (e) => {\n    mousedownTarget = e.target === e.currentTarget;\n  };\n  const onMouseup = (e) => {\n    mouseupTarget = e.target === e.currentTarget;\n  };\n  return { onClick, onMousedown, onMouseup };\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/vue/vnode.mjs\n\n\n\n\n\nconst vnode_SCOPE = "utils/vue/vnode";\nvar PatchFlags = /* @__PURE__ */ ((PatchFlags2) => {\n  PatchFlags2[PatchFlags2["TEXT"] = 1] = "TEXT";\n  PatchFlags2[PatchFlags2["CLASS"] = 2] = "CLASS";\n  PatchFlags2[PatchFlags2["STYLE"] = 4] = "STYLE";\n  PatchFlags2[PatchFlags2["PROPS"] = 8] = "PROPS";\n  PatchFlags2[PatchFlags2["FULL_PROPS"] = 16] = "FULL_PROPS";\n  PatchFlags2[PatchFlags2["HYDRATE_EVENTS"] = 32] = "HYDRATE_EVENTS";\n  PatchFlags2[PatchFlags2["STABLE_FRAGMENT"] = 64] = "STABLE_FRAGMENT";\n  PatchFlags2[PatchFlags2["KEYED_FRAGMENT"] = 128] = "KEYED_FRAGMENT";\n  PatchFlags2[PatchFlags2["UNKEYED_FRAGMENT"] = 256] = "UNKEYED_FRAGMENT";\n  PatchFlags2[PatchFlags2["NEED_PATCH"] = 512] = "NEED_PATCH";\n  PatchFlags2[PatchFlags2["DYNAMIC_SLOTS"] = 1024] = "DYNAMIC_SLOTS";\n  PatchFlags2[PatchFlags2["HOISTED"] = -1] = "HOISTED";\n  PatchFlags2[PatchFlags2["BAIL"] = -2] = "BAIL";\n  return PatchFlags2;\n})(PatchFlags || {});\nfunction isFragment(node) {\n  return isVNode(node) && node.type === Fragment;\n}\nfunction vnode_isText(node) {\n  return isVNode(node) && node.type === Text;\n}\nfunction vnode_isComment(node) {\n  return isVNode(node) && node.type === Comment;\n}\nconst TEMPLATE = "template";\nfunction isTemplate(node) {\n  return isVNode(node) && node.type === TEMPLATE;\n}\nfunction isValidElementNode(node) {\n  return isVNode(node) && !isFragment(node) && !vnode_isComment(node);\n}\nfunction getChildren(node, depth) {\n  if (vnode_isComment(node))\n    return;\n  if (isFragment(node) || isTemplate(node)) {\n    return depth > 0 ? getFirstValidNode(node.children, depth - 1) : void 0;\n  }\n  return node;\n}\nconst getFirstValidNode = (nodes, maxDepth = 3) => {\n  if (Array.isArray(nodes)) {\n    return getChildren(nodes[0], maxDepth);\n  } else {\n    return getChildren(nodes, maxDepth);\n  }\n};\nfunction renderIf(condition, ...args) {\n  return condition ? renderBlock(...args) : createCommentVNode("v-if", true);\n}\nfunction renderBlock(...args) {\n  return openBlock(), createBlock(...args);\n}\nconst getNormalizedProps = (node) => {\n  if (!isVNode(node)) {\n    debugWarn(vnode_SCOPE, "[getNormalizedProps] must be a VNode");\n    return {};\n  }\n  const raw = node.props || {};\n  const type = (isVNode(node.type) ? node.type.props : void 0) || {};\n  const props = {};\n  Object.keys(type).forEach((key) => {\n    if (hasOwn(type[key], "default")) {\n      props[key] = type[key].default;\n    }\n  });\n  Object.keys(raw).forEach((key) => {\n    props[camelize(key)] = raw[key];\n  });\n  return props;\n};\n\n\n//# sourceMappingURL=vnode.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/overlay/src/overlay.mjs\n\n\n\n\n\n\n\n\nconst overlayProps = props_buildProps({\n  mask: {\n    type: Boolean,\n    default: true\n  },\n  customMaskEvent: {\n    type: Boolean,\n    default: false\n  },\n  overlayClass: {\n    type: definePropType([\n      String,\n      Array,\n      Object\n    ])\n  },\n  zIndex: {\n    type: definePropType([String, Number])\n  }\n});\nconst overlayEmits = {\n  click: (evt) => evt instanceof MouseEvent\n};\nvar Overlay = defineComponent({\n  name: "ElOverlay",\n  props: overlayProps,\n  emits: overlayEmits,\n  setup(props, { slots, emit }) {\n    const ns = useNamespace("overlay");\n    const onMaskClick = (e) => {\n      emit("click", e);\n    };\n    const { onClick, onMousedown, onMouseup } = useSameTarget(props.customMaskEvent ? void 0 : onMaskClick);\n    return () => {\n      return props.mask ? createVNode("div", {\n        class: [ns.b(), props.overlayClass],\n        style: {\n          zIndex: props.zIndex\n        },\n        onClick,\n        onMousedown,\n        onMouseup\n      }, [renderSlot(slots, "default")], PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS, ["onClick", "onMouseup", "onMousedown"]) : h("div", {\n        class: props.overlayClass,\n        style: {\n          zIndex: props.zIndex,\n          position: "fixed",\n          top: "0px",\n          right: "0px",\n          bottom: "0px",\n          left: "0px"\n        }\n      }, [renderSlot(slots, "default")]);\n    };\n  }\n});\n\n\n//# sourceMappingURL=overlay.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/overlay/index.mjs\n\n\n\nconst ElOverlay = Overlay;\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog-content.mjs\n\n\n\n\nconst dialogContentProps = props_buildProps({\n  center: {\n    type: Boolean,\n    default: false\n  },\n  closeIcon: {\n    type: iconPropType,\n    default: ""\n  },\n  customClass: {\n    type: String,\n    default: ""\n  },\n  draggable: {\n    type: Boolean,\n    default: false\n  },\n  fullscreen: {\n    type: Boolean,\n    default: false\n  },\n  showClose: {\n    type: Boolean,\n    default: true\n  },\n  title: {\n    type: String,\n    default: ""\n  }\n});\nconst dialogContentEmits = {\n  close: () => true\n};\n\n\n//# sourceMappingURL=dialog-content.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/token.mjs\nconst elDialogInjectionKey = Symbol("elDialogInjectionKey");\n\n\n//# sourceMappingURL=token.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog-content2.mjs\n\n\n\n\n\n\n\nconst dialog_content2_hoisted_1 = ["aria-label"];\nconst dialog_content2_default_ = { name: "ElDialogContent" };\nconst dialog_content2_sfc_main = /* @__PURE__ */ defineComponent({\n  ...dialog_content2_default_,\n  props: dialogContentProps,\n  emits: dialogContentEmits,\n  setup(__props) {\n    const { Close } = CloseComponents;\n    const { dialogRef, headerRef, ns, style } = runtime_core_esm_bundler_inject(elDialogInjectionKey);\n    return (_ctx, _cache) => {\n      return runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n        ref_key: "dialogRef",\n        ref: dialogRef,\n        class: normalizeClass([\n          reactivity_esm_bundler_unref(ns).b(),\n          reactivity_esm_bundler_unref(ns).is("fullscreen", _ctx.fullscreen),\n          reactivity_esm_bundler_unref(ns).is("draggable", _ctx.draggable),\n          { [reactivity_esm_bundler_unref(ns).m("center")]: _ctx.center },\n          _ctx.customClass\n        ]),\n        "aria-modal": "true",\n        role: "dialog",\n        "aria-label": _ctx.title || "dialog",\n        style: normalizeStyle(reactivity_esm_bundler_unref(style)),\n        onClick: _cache[1] || (_cache[1] = withModifiers(() => {\n        }, ["stop"]))\n      }, [\n        createBaseVNode("div", {\n          ref_key: "headerRef",\n          ref: headerRef,\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("header"))\n        }, [\n          renderSlot(_ctx.$slots, "title", {}, () => [\n            createBaseVNode("span", {\n              class: normalizeClass(reactivity_esm_bundler_unref(ns).e("title"))\n            }, toDisplayString(_ctx.title), 3)\n          ])\n        ], 2),\n        createBaseVNode("div", {\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("body"))\n        }, [\n          renderSlot(_ctx.$slots, "default")\n        ], 2),\n        _ctx.$slots.footer ? (runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n          key: 0,\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("footer"))\n        }, [\n          renderSlot(_ctx.$slots, "footer")\n        ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n        _ctx.showClose ? (runtime_core_esm_bundler_openBlock(), createElementBlock("button", {\n          key: 1,\n          "aria-label": "close",\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("headerbtn")),\n          type: "button",\n          onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("close"))\n        }, [\n          createVNode(reactivity_esm_bundler_unref(ElIcon), {\n            class: normalizeClass(reactivity_esm_bundler_unref(ns).e("close"))\n          }, {\n            default: withCtx(() => [\n              (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(resolveDynamicComponent(_ctx.closeIcon || reactivity_esm_bundler_unref(Close))))\n            ]),\n            _: 1\n          }, 8, ["class"])\n        ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n      ], 14, dialog_content2_hoisted_1);\n    };\n  }\n});\n\n\n//# sourceMappingURL=dialog-content2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog.mjs\n\n\n\n\n\n\nconst dialogProps = props_buildProps({\n  ...dialogContentProps,\n  appendToBody: {\n    type: Boolean,\n    default: false\n  },\n  beforeClose: {\n    type: definePropType(Function)\n  },\n  destroyOnClose: {\n    type: Boolean,\n    default: false\n  },\n  closeOnClickModal: {\n    type: Boolean,\n    default: true\n  },\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true\n  },\n  lockScroll: {\n    type: Boolean,\n    default: true\n  },\n  modal: {\n    type: Boolean,\n    default: true\n  },\n  openDelay: {\n    type: Number,\n    default: 0\n  },\n  closeDelay: {\n    type: Number,\n    default: 0\n  },\n  top: {\n    type: String\n  },\n  modelValue: {\n    type: Boolean,\n    required: true\n  },\n  modalClass: String,\n  width: {\n    type: [String, Number]\n  },\n  zIndex: {\n    type: Number\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false\n  }\n});\nconst dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: (value) => typeof value === "boolean",\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true\n};\n\n\n//# sourceMappingURL=dialog.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/utils/dom/style.mjs\n\n\n\n\n\n\nconst classNameToArray = (cls = "") => cls.split(" ").filter((item) => !!item.trim());\nconst hasClass = (el, cls) => {\n  if (!el || !cls)\n    return false;\n  if (cls.includes(" "))\n    throw new Error("className should not contain space.");\n  return el.classList.contains(cls);\n};\nconst addClass = (el, cls) => {\n  if (!el || !cls.trim())\n    return;\n  el.classList.add(...classNameToArray(cls));\n};\nconst removeClass = (el, cls) => {\n  if (!el || !cls.trim())\n    return;\n  el.classList.remove(...classNameToArray(cls));\n};\nconst style_getStyle = (element, styleName) => {\n  var _a;\n  if (!shared_isClient || !element || !styleName)\n    return "";\n  let key = shared_esm_bundler_camelize(styleName);\n  if (key === "float")\n    key = "cssFloat";\n  try {\n    const style = element.style[styleName];\n    if (style)\n      return style;\n    const computed = (_a = document.defaultView) == null ? void 0 : _a.getComputedStyle(element, "");\n    return computed ? computed[styleName] : "";\n  } catch (e) {\n    return element.style[styleName];\n  }\n};\nconst style_setStyle = (element, styleName, value) => {\n  if (!element || !styleName)\n    return;\n  if (isObject(styleName)) {\n    entriesOf(styleName).forEach(([prop, value2]) => style_setStyle(element, prop, value2));\n  } else {\n    const key = camelize(styleName);\n    element.style[key] = value;\n  }\n};\nconst removeStyle = (element, style) => {\n  if (!element || !style)\n    return;\n  if (isObject(style)) {\n    keysOf(style).forEach((prop) => removeStyle(element, prop));\n  } else {\n    style_setStyle(element, style, "");\n  }\n};\n\n\n//# sourceMappingURL=style.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-lockscreen/index.mjs\n\n\n\n\n\n\n\nconst useLockscreen = (trigger) => {\n  if (!reactivity_esm_bundler_isRef(trigger)) {\n    throwError("[useLockscreen]", "You need to pass a ref param to this function");\n  }\n  if (!shared_isClient || hasClass(document.body, "el-popup-parent--hidden")) {\n    return;\n  }\n  let scrollBarWidth = 0;\n  let withoutHiddenClass = false;\n  let bodyPaddingRight = "0";\n  let computedBodyPaddingRight = 0;\n  const cleanup = () => {\n    removeClass(document.body, "el-popup-parent--hidden");\n    if (withoutHiddenClass) {\n      document.body.style.paddingRight = bodyPaddingRight;\n    }\n  };\n  runtime_core_esm_bundler_watch(trigger, (val) => {\n    if (!val) {\n      cleanup();\n      return;\n    }\n    withoutHiddenClass = !hasClass(document.body, "el-popup-parent--hidden");\n    if (withoutHiddenClass) {\n      bodyPaddingRight = document.body.style.paddingRight;\n      computedBodyPaddingRight = parseInt(style_getStyle(document.body, "paddingRight"), 10);\n    }\n    scrollBarWidth = getScrollBarWidth();\n    const bodyHasOverflow = document.documentElement.clientHeight < document.body.scrollHeight;\n    const bodyOverflowY = style_getStyle(document.body, "overflowY");\n    if (scrollBarWidth > 0 && (bodyHasOverflow || bodyOverflowY === "scroll") && withoutHiddenClass) {\n      document.body.style.paddingRight = `${computedBodyPaddingRight + scrollBarWidth}px`;\n    }\n    addClass(document.body, "el-popup-parent--hidden");\n  });\n  onScopeDispose(() => cleanup());\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-modal/index.mjs\n\n\n\n\n\nconst modalStack = [];\nconst closeModal = (e) => {\n  if (modalStack.length === 0)\n    return;\n  if (e.code === EVENT_CODE.esc) {\n    e.stopPropagation();\n    const topModal = modalStack[modalStack.length - 1];\n    topModal.handleClose();\n  }\n};\nconst useModal = (instance, visibleRef) => {\n  runtime_core_esm_bundler_watch(visibleRef, (val) => {\n    if (val) {\n      modalStack.push(instance);\n    } else {\n      modalStack.splice(modalStack.findIndex((modal) => modal === instance), 1);\n    }\n  });\n};\nif (shared_isClient)\n  useEventListener(document, "keydown", closeModal);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-restore-active/index.mjs\n\n\nconst useRestoreActive = (toggle, initialFocus) => {\n  let previousActive;\n  runtime_core_esm_bundler_watch(() => toggle.value, (val) => {\n    var _a, _b;\n    if (val) {\n      previousActive = document.activeElement;\n      if (reactivity_esm_bundler_isRef(initialFocus)) {\n        (_b = (_a = initialFocus.value).focus) == null ? void 0 : _b.call(_a);\n      }\n    } else {\n      if (false) {} else {\n        previousActive.focus();\n      }\n    }\n  });\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/use-dialog.mjs\n\n\n\n\n\n\n\n\n\n\n\nconst useDialog = (props, { emit }, targetRef) => {\n  let lastPosition = "";\n  const visible = reactivity_esm_bundler_ref(false);\n  const closed = reactivity_esm_bundler_ref(false);\n  const rendered = reactivity_esm_bundler_ref(false);\n  const { nextZIndex } = useZIndex();\n  const zIndex = reactivity_esm_bundler_ref(props.zIndex || nextZIndex());\n  let openTimer = void 0;\n  let closeTimer = void 0;\n  const normalizeWidth = runtime_core_esm_bundler_computed(() => shared_isNumber(props.width) ? `${props.width}px` : props.width);\n  const style = runtime_core_esm_bundler_computed(() => {\n    const style2 = {};\n    const varPrefix = `--el-dialog`;\n    if (!props.fullscreen) {\n      if (props.top) {\n        style2[`${varPrefix}-margin-top`] = props.top;\n      }\n      if (props.width) {\n        style2[`${varPrefix}-width`] = normalizeWidth.value;\n      }\n    }\n    return style2;\n  });\n  function afterEnter() {\n    emit("opened");\n  }\n  function afterLeave() {\n    emit("closed");\n    emit(UPDATE_MODEL_EVENT, false);\n    if (props.destroyOnClose) {\n      rendered.value = false;\n    }\n  }\n  function beforeLeave() {\n    emit("close");\n  }\n  function open() {\n    closeTimer == null ? void 0 : closeTimer();\n    openTimer == null ? void 0 : openTimer();\n    if (props.openDelay && props.openDelay > 0) {\n      ;\n      ({ stop: openTimer } = shared_useTimeoutFn(() => doOpen(), props.openDelay));\n    } else {\n      doOpen();\n    }\n  }\n  function close() {\n    openTimer == null ? void 0 : openTimer();\n    closeTimer == null ? void 0 : closeTimer();\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;\n      ({ stop: closeTimer } = shared_useTimeoutFn(() => doClose(), props.closeDelay));\n    } else {\n      doClose();\n    }\n  }\n  function hide(shouldCancel) {\n    if (shouldCancel)\n      return;\n    closed.value = true;\n    visible.value = false;\n  }\n  function handleClose() {\n    if (props.beforeClose) {\n      props.beforeClose(hide);\n    } else {\n      close();\n    }\n  }\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose();\n    }\n  }\n  function doOpen() {\n    if (!shared_isClient) {\n      return;\n    }\n    visible.value = true;\n  }\n  function doClose() {\n    visible.value = false;\n  }\n  if (props.lockScroll) {\n    useLockscreen(visible);\n  }\n  if (props.closeOnPressEscape) {\n    useModal({\n      handleClose\n    }, visible);\n  }\n  useRestoreActive(visible);\n  runtime_core_esm_bundler_watch(() => props.modelValue, (val) => {\n    if (val) {\n      closed.value = false;\n      open();\n      rendered.value = true;\n      emit("open");\n      zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex();\n      runtime_core_esm_bundler_nextTick(() => {\n        if (targetRef.value) {\n          targetRef.value.scrollTop = 0;\n        }\n      });\n    } else {\n      if (visible.value) {\n        close();\n      }\n    }\n  });\n  runtime_core_esm_bundler_watch(() => props.fullscreen, (val) => {\n    if (!targetRef.value)\n      return;\n    if (val) {\n      lastPosition = targetRef.value.style.transform;\n      targetRef.value.style.transform = "";\n    } else {\n      targetRef.value.style.transform = lastPosition;\n    }\n  });\n  runtime_core_esm_bundler_onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true;\n      rendered.value = true;\n      open();\n    }\n  });\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex\n  };\n};\n\n\n//# sourceMappingURL=use-dialog.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/hooks/use-draggable/index.mjs\n\n\n\n\nconst use_draggable_useDraggable = (targetRef, dragRef, draggable) => {\n  let transform = {\n    offsetX: 0,\n    offsetY: 0\n  };\n  const onMousedown = (e) => {\n    const downX = e.clientX;\n    const downY = e.clientY;\n    const { offsetX, offsetY } = transform;\n    const targetRect = targetRef.value.getBoundingClientRect();\n    const targetLeft = targetRect.left;\n    const targetTop = targetRect.top;\n    const targetWidth = targetRect.width;\n    const targetHeight = targetRect.height;\n    const clientWidth = document.documentElement.clientWidth;\n    const clientHeight = document.documentElement.clientHeight;\n    const minLeft = -targetLeft + offsetX;\n    const minTop = -targetTop + offsetY;\n    const maxLeft = clientWidth - targetLeft - targetWidth + offsetX;\n    const maxTop = clientHeight - targetTop - targetHeight + offsetY;\n    const onMousemove = (e2) => {\n      const moveX = Math.min(Math.max(offsetX + e2.clientX - downX, minLeft), maxLeft);\n      const moveY = Math.min(Math.max(offsetY + e2.clientY - downY, minTop), maxTop);\n      transform = {\n        offsetX: moveX,\n        offsetY: moveY\n      };\n      targetRef.value.style.transform = `translate(${addUnit(moveX)}, ${addUnit(moveY)})`;\n    };\n    const onMouseup = () => {\n      document.removeEventListener("mousemove", onMousemove);\n      document.removeEventListener("mouseup", onMouseup);\n    };\n    document.addEventListener("mousemove", onMousemove);\n    document.addEventListener("mouseup", onMouseup);\n  };\n  const onDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.addEventListener("mousedown", onMousedown);\n    }\n  };\n  const offDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.removeEventListener("mousedown", onMousedown);\n    }\n  };\n  runtime_core_esm_bundler_onMounted(() => {\n    runtime_core_esm_bundler_watchEffect(() => {\n      if (draggable.value) {\n        onDraggable();\n      } else {\n        offDraggable();\n      }\n    });\n  });\n  runtime_core_esm_bundler_onBeforeUnmount(() => {\n    offDraggable();\n  });\n};\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/src/dialog2.mjs\n\n\n\n\n\n\n\n\n\n\n\nconst dialog2_default_ = {\n  name: "ElDialog"\n};\nconst dialog2_sfc_main = /* @__PURE__ */ defineComponent({\n  ...dialog2_default_,\n  props: dialogProps,\n  emits: dialogEmits,\n  setup(__props, { emit }) {\n    const props = __props;\n    const ns = useNamespace("dialog");\n    const dialogRef = reactivity_esm_bundler_ref(null);\n    const headerRef = reactivity_esm_bundler_ref(null);\n    const dialog = useDialog(props, { emit }, dialogRef);\n    const {\n      visible,\n      afterEnter,\n      afterLeave,\n      beforeLeave,\n      style,\n      handleClose,\n      rendered,\n      zIndex\n    } = dialog;\n    runtime_core_esm_bundler_provide(elDialogInjectionKey, {\n      dialogRef,\n      headerRef,\n      ns,\n      rendered,\n      style\n    });\n    const overlayEvent = useSameTarget(dialog.onModalClick);\n    const draggable = runtime_core_esm_bundler_computed(() => props.draggable && !props.fullscreen);\n    use_draggable_useDraggable(dialogRef, headerRef, draggable);\n    return (_ctx, _cache) => {\n      return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(Teleport, {\n        to: "body",\n        disabled: !_ctx.appendToBody\n      }, [\n        createVNode(Transition, {\n          name: "dialog-fade",\n          onAfterEnter: reactivity_esm_bundler_unref(afterEnter),\n          onAfterLeave: reactivity_esm_bundler_unref(afterLeave),\n          onBeforeLeave: reactivity_esm_bundler_unref(beforeLeave)\n        }, {\n          default: withCtx(() => [\n            withDirectives(createVNode(reactivity_esm_bundler_unref(ElOverlay), {\n              "custom-mask-event": "",\n              mask: _ctx.modal,\n              "overlay-class": _ctx.modalClass,\n              "z-index": reactivity_esm_bundler_unref(zIndex)\n            }, {\n              default: withCtx(() => [\n                createBaseVNode("div", {\n                  class: normalizeClass(`${reactivity_esm_bundler_unref(ns).namespace.value}-overlay-dialog`),\n                  onClick: _cache[0] || (_cache[0] = (...args) => reactivity_esm_bundler_unref(overlayEvent).onClick && reactivity_esm_bundler_unref(overlayEvent).onClick(...args)),\n                  onMousedown: _cache[1] || (_cache[1] = (...args) => reactivity_esm_bundler_unref(overlayEvent).onMousedown && reactivity_esm_bundler_unref(overlayEvent).onMousedown(...args)),\n                  onMouseup: _cache[2] || (_cache[2] = (...args) => reactivity_esm_bundler_unref(overlayEvent).onMouseup && reactivity_esm_bundler_unref(overlayEvent).onMouseup(...args))\n                }, [\n                  reactivity_esm_bundler_unref(rendered) ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(dialog_content2_sfc_main, {\n                    key: 0,\n                    "custom-class": _ctx.customClass,\n                    center: _ctx.center,\n                    "close-icon": _ctx.closeIcon,\n                    draggable: reactivity_esm_bundler_unref(draggable),\n                    fullscreen: _ctx.fullscreen,\n                    "show-close": _ctx.showClose,\n                    style: normalizeStyle(reactivity_esm_bundler_unref(style)),\n                    title: _ctx.title,\n                    onClose: reactivity_esm_bundler_unref(handleClose)\n                  }, {\n                    title: withCtx(() => [\n                      renderSlot(_ctx.$slots, "title")\n                    ]),\n                    footer: withCtx(() => [\n                      renderSlot(_ctx.$slots, "footer")\n                    ]),\n                    default: withCtx(() => [\n                      renderSlot(_ctx.$slots, "default")\n                    ]),\n                    _: 3\n                  }, 8, ["custom-class", "center", "close-icon", "draggable", "fullscreen", "show-close", "style", "title", "onClose"])) : runtime_core_esm_bundler_createCommentVNode("v-if", true)\n                ], 34)\n              ]),\n              _: 3\n            }, 8, ["mask", "overlay-class", "z-index"]), [\n              [vShow, reactivity_esm_bundler_unref(visible)]\n            ])\n          ]),\n          _: 3\n        }, 8, ["onAfterEnter", "onAfterLeave", "onBeforeLeave"])\n      ], 8, ["disabled"]);\n    };\n  }\n});\n\n\n//# sourceMappingURL=dialog2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/dialog/index.mjs\n\n\n\n\n\n\nconst ElDialog = withInstall(dialog2_sfc_main);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/row/src/row.mjs\n\n\n\n\n\n\nconst rowProps = props_buildProps({\n  tag: {\n    type: String,\n    default: "div"\n  },\n  gutter: {\n    type: Number,\n    default: 0\n  },\n  justify: {\n    type: String,\n    values: [\n      "start",\n      "center",\n      "end",\n      "space-around",\n      "space-between",\n      "space-evenly"\n    ],\n    default: "start"\n  },\n  align: {\n    type: String,\n    values: ["top", "middle", "bottom"],\n    default: "top"\n  }\n});\nconst Row = defineComponent({\n  name: "ElRow",\n  props: rowProps,\n  setup(props, { slots }) {\n    const ns = useNamespace("row");\n    const gutter = runtime_core_esm_bundler_computed(() => props.gutter);\n    runtime_core_esm_bundler_provide("ElRow", {\n      gutter\n    });\n    const style = runtime_core_esm_bundler_computed(() => {\n      const styles = {\n        marginLeft: "",\n        marginRight: ""\n      };\n      if (props.gutter) {\n        styles.marginLeft = `-${props.gutter / 2}px`;\n        styles.marginRight = styles.marginLeft;\n      }\n      return styles;\n    });\n    return () => {\n      var _a;\n      return h(props.tag, {\n        class: [\n          ns.b(),\n          ns.is(`justify-${props.justify}`, props.justify !== "start"),\n          ns.is(`align-${props.align}`, props.align !== "top")\n        ],\n        style: style.value\n      }, (_a = slots.default) == null ? void 0 : _a.call(slots));\n    };\n  }\n});\n\n\n//# sourceMappingURL=row.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/row/index.mjs\n\n\n\n\n\nconst ElRow = withInstall(Row);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/col/src/col.mjs\n\n\n\n\n\n\n\nconst colProps = props_buildProps({\n  tag: {\n    type: String,\n    default: "div"\n  },\n  span: {\n    type: Number,\n    default: 24\n  },\n  offset: {\n    type: Number,\n    default: 0\n  },\n  pull: {\n    type: Number,\n    default: 0\n  },\n  push: {\n    type: Number,\n    default: 0\n  },\n  xs: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  sm: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  md: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  lg: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  },\n  xl: {\n    type: definePropType([Number, Object]),\n    default: () => mutable({})\n  }\n});\nvar Col = defineComponent({\n  name: "ElCol",\n  props: colProps,\n  setup(props, { slots }) {\n    const { gutter } = runtime_core_esm_bundler_inject("ElRow", { gutter: { value: 0 } });\n    const ns = useNamespace("col");\n    const style = runtime_core_esm_bundler_computed(() => {\n      if (gutter.value) {\n        return {\n          paddingLeft: `${gutter.value / 2}px`,\n          paddingRight: `${gutter.value / 2}px`\n        };\n      }\n      return {};\n    });\n    const classList = runtime_core_esm_bundler_computed(() => {\n      const classes = [];\n      const pos = ["span", "offset", "pull", "push"];\n      pos.forEach((prop) => {\n        const size = props[prop];\n        if (typeof size === "number") {\n          if (prop === "span")\n            classes.push(ns.b(`${props[prop]}`));\n          else if (size > 0)\n            classes.push(ns.b(`${prop}-${props[prop]}`));\n        }\n      });\n      const sizes = ["xs", "sm", "md", "lg", "xl"];\n      sizes.forEach((size) => {\n        if (typeof props[size] === "number") {\n          classes.push(ns.b(`${size}-${props[size]}`));\n        } else if (typeof props[size] === "object") {\n          const sizeProps = props[size];\n          Object.keys(sizeProps).forEach((prop) => {\n            classes.push(prop !== "span" ? ns.b(`${size}-${prop}-${sizeProps[prop]}`) : ns.b(`${size}-${sizeProps[prop]}`));\n          });\n        }\n      });\n      if (gutter.value) {\n        classes.push("is-guttered");\n      }\n      return classes;\n    });\n    return () => h(props.tag, {\n      class: [ns.b(), classList.value],\n      style: style.value\n    }, [renderSlot(slots, "default")]);\n  }\n});\n\n\n//# sourceMappingURL=col.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/col/index.mjs\n\n\n\n\n\nconst ElCol = withInstall(Col);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[3].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[5]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/reusables/OfferModal.vue?vue&type=template&id=419821d6\n/* unplugin-vue-components disabled */\n\n\n\nvar OfferModalvue_type_template_id_419821d6_hoisted_1 = {\n  "class": "dialog-title hidden-md-and-up"\n};\nvar OfferModalvue_type_template_id_419821d6_hoisted_2 = ["src"];\nvar OfferModalvue_type_template_id_419821d6_hoisted_3 = {\n  "class": "dialog-content"\n};\nvar OfferModalvue_type_template_id_419821d6_hoisted_4 = {\n  "class": "dialog-title hidden-sm-and-down"\n};\n\nvar OfferModalvue_type_template_id_419821d6_hoisted_5 = /*#__PURE__*/createBaseVNode("i", {\n  "class": "el-icon-timer"\n}, null, -1);\n\nvar OfferModalvue_type_template_id_419821d6_hoisted_6 = {\n  "class": "dialog-content"\n};\nvar _hoisted_7 = {\n  "class": "dialog-footer"\n};\nfunction OfferModalvue_type_template_id_419821d6_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_col = ElCol;\n\n  var _component_vue_countdown = resolveComponent("vue-countdown");\n\n  var _component_el_row = ElRow;\n\n  var _component_el_dialog = ElDialog;\n\n  return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_dialog, {\n    "custom-class": "offer-modal",\n    center: "",\n    "model-value": $options.isVisible,\n    "show-close": false,\n    onClose: _cache[1] || (_cache[1] = function ($event) {\n      return _ctx.$emit(\'close\');\n    })\n  }, {\n    title: withCtx(function () {\n      return [createBaseVNode("h1", OfferModalvue_type_template_id_419821d6_hoisted_1, toDisplayString($props.mobileTitle || $props.title), 1), createBaseVNode("i", {\n        "class": "el-icon-close",\n        onClick: _cache[0] || (_cache[0] = function ($event) {\n          return _ctx.$emit(\'close\');\n        })\n      })];\n    }),\n    "default": withCtx(function () {\n      return [createVNode(_component_el_row, {\n        gutter: 15\n      }, {\n        "default": withCtx(function () {\n          return [$props.image ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_col, {\n            key: 0,\n            xs: 24,\n            md: 12\n          }, {\n            "default": withCtx(function () {\n              return [createBaseVNode("img", {\n                src: $props.image,\n                "class": "offer-image"\n              }, null, 8, OfferModalvue_type_template_id_419821d6_hoisted_2)];\n            }),\n            _: 1\n          })) : runtime_core_esm_bundler_createCommentVNode("", true), createVNode(_component_el_col, {\n            xs: 24,\n            md: $props.image ? 12 : 24\n          }, {\n            "default": withCtx(function () {\n              return [createBaseVNode("div", OfferModalvue_type_template_id_419821d6_hoisted_3, [createBaseVNode("h1", OfferModalvue_type_template_id_419821d6_hoisted_4, toDisplayString($props.title), 1), $props.countdownTo ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_vue_countdown, {\n                key: 0,\n                "class": "countdown-timer",\n                time: $props.countdownTo,\n                interval: 1000\n              }, {\n                "default": withCtx(function (_ref) {\n                  var hours = _ref.hours,\n                      minutes = _ref.minutes,\n                      seconds = _ref.seconds;\n                  return [OfferModalvue_type_template_id_419821d6_hoisted_5, createTextVNode(" " + toDisplayString(hours) + " hours, " + toDisplayString(minutes) + " minutes, " + toDisplayString(seconds) + " seconds remaining. ", 1)];\n                }),\n                _: 1\n              }, 8, ["time"])) : runtime_core_esm_bundler_createCommentVNode("", true), createBaseVNode("div", OfferModalvue_type_template_id_419821d6_hoisted_6, [renderSlot(_ctx.$slots, "content")]), createBaseVNode("div", _hoisted_7, [renderSlot(_ctx.$slots, "footer")])])];\n            }),\n            _: 3\n          }, 8, ["md"])];\n        }),\n        _: 3\n      })];\n    }),\n    _: 3\n  }, 8, ["model-value"]);\n}\n;// CONCATENATED MODULE: ./src/vue/components/reusables/OfferModal.vue?vue&type=template&id=419821d6\n/* unplugin-vue-components disabled */\n;// CONCATENATED MODULE: ./node_modules/@chenfengyuan/vue-countdown/dist/vue-countdown.esm.js\n/*! vue-countdown v2.0.0 | (c) 2018-present Chen Fengyuan | MIT */\n\n\nconst MILLISECONDS_SECOND = 1000;\r\nconst MILLISECONDS_MINUTE = 60 * MILLISECONDS_SECOND;\r\nconst MILLISECONDS_HOUR = 60 * MILLISECONDS_MINUTE;\r\nconst MILLISECONDS_DAY = 24 * MILLISECONDS_HOUR;\r\nconst EVENT_ABORT = \'abort\';\r\nconst EVENT_END = \'end\';\r\nconst EVENT_PROGRESS = \'progress\';\r\nconst EVENT_START = \'start\';\r\nconst EVENT_VISIBILITY_CHANGE = \'visibilitychange\';\r\nvar vue_countdown_esm_index = defineComponent({\r\n    name: \'VueCountdown\',\r\n    props: {\r\n        /**\r\n         * Starts the countdown automatically when initialized.\r\n         */\r\n        autoStart: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        /**\r\n         * Emits the countdown events.\r\n         */\r\n        emitEvents: {\r\n            type: Boolean,\r\n            default: true,\r\n        },\r\n        /**\r\n         * The interval time (in milliseconds) of the countdown progress.\r\n         */\r\n        interval: {\r\n            type: Number,\r\n            default: 1000,\r\n            validator: (value) => value >= 0,\r\n        },\r\n        /**\r\n         * Generate the current time of a specific time zone.\r\n         */\r\n        now: {\r\n            type: Function,\r\n            default: () => Date.now(),\r\n        },\r\n        /**\r\n         * The tag name of the component\'s root element.\r\n         */\r\n        tag: {\r\n            type: String,\r\n            default: \'span\',\r\n        },\r\n        /**\r\n         * The time (in milliseconds) to count down from.\r\n         */\r\n        time: {\r\n            type: Number,\r\n            default: 0,\r\n            validator: (value) => value >= 0,\r\n        },\r\n        /**\r\n         * Transforms the output props before render.\r\n         */\r\n        transform: {\r\n            type: Function,\r\n            default: (props) => props,\r\n        },\r\n    },\r\n    emits: [\r\n        EVENT_ABORT,\r\n        EVENT_END,\r\n        EVENT_PROGRESS,\r\n        EVENT_START,\r\n    ],\r\n    data() {\r\n        return {\r\n            /**\r\n             * It is counting down.\r\n             * @type {boolean}\r\n             */\r\n            counting: false,\r\n            /**\r\n             * The absolute end time.\r\n             * @type {number}\r\n             */\r\n            endTime: 0,\r\n            /**\r\n             * The remaining milliseconds.\r\n             * @type {number}\r\n             */\r\n            totalMilliseconds: 0,\r\n            /**\r\n             * The request ID of the requestAnimationFrame.\r\n             * @type {number}\r\n             */\r\n            requestId: 0,\r\n        };\r\n    },\r\n    computed: {\r\n        /**\r\n         * Remaining days.\r\n         * @returns {number} The computed value.\r\n         */\r\n        days() {\r\n            return Math.floor(this.totalMilliseconds / MILLISECONDS_DAY);\r\n        },\r\n        /**\r\n         * Remaining hours.\r\n         * @returns {number} The computed value.\r\n         */\r\n        hours() {\r\n            return Math.floor((this.totalMilliseconds % MILLISECONDS_DAY) / MILLISECONDS_HOUR);\r\n        },\r\n        /**\r\n         * Remaining minutes.\r\n         * @returns {number} The computed value.\r\n         */\r\n        minutes() {\r\n            return Math.floor((this.totalMilliseconds % MILLISECONDS_HOUR) / MILLISECONDS_MINUTE);\r\n        },\r\n        /**\r\n         * Remaining seconds.\r\n         * @returns {number} The computed value.\r\n         */\r\n        seconds() {\r\n            return Math.floor((this.totalMilliseconds % MILLISECONDS_MINUTE) / MILLISECONDS_SECOND);\r\n        },\r\n        /**\r\n         * Remaining milliseconds.\r\n         * @returns {number} The computed value.\r\n         */\r\n        milliseconds() {\r\n            return Math.floor(this.totalMilliseconds % MILLISECONDS_SECOND);\r\n        },\r\n        /**\r\n         * Total remaining days.\r\n         * @returns {number} The computed value.\r\n         */\r\n        totalDays() {\r\n            return this.days;\r\n        },\r\n        /**\r\n         * Total remaining hours.\r\n         * @returns {number} The computed value.\r\n         */\r\n        totalHours() {\r\n            return Math.floor(this.totalMilliseconds / MILLISECONDS_HOUR);\r\n        },\r\n        /**\r\n         * Total remaining minutes.\r\n         * @returns {number} The computed value.\r\n         */\r\n        totalMinutes() {\r\n            return Math.floor(this.totalMilliseconds / MILLISECONDS_MINUTE);\r\n        },\r\n        /**\r\n         * Total remaining seconds.\r\n         * @returns {number} The computed value.\r\n         */\r\n        totalSeconds() {\r\n            return Math.floor(this.totalMilliseconds / MILLISECONDS_SECOND);\r\n        },\r\n    },\r\n    watch: {\r\n        $props: {\r\n            deep: true,\r\n            immediate: true,\r\n            /**\r\n             * Update the countdown when props changed.\r\n             */\r\n            handler() {\r\n                this.totalMilliseconds = this.time;\r\n                this.endTime = this.now() + this.time;\r\n                if (this.autoStart) {\r\n                    this.start();\r\n                }\r\n            },\r\n        },\r\n    },\r\n    mounted() {\r\n        document.addEventListener(EVENT_VISIBILITY_CHANGE, this.handleVisibilityChange);\r\n    },\r\n    beforeUnmount() {\r\n        document.removeEventListener(EVENT_VISIBILITY_CHANGE, this.handleVisibilityChange);\r\n        this.pause();\r\n    },\r\n    methods: {\r\n        /**\r\n         * Starts to countdown.\r\n         * @public\r\n         * @emits Countdown#start\r\n         */\r\n        start() {\r\n            if (this.counting) {\r\n                return;\r\n            }\r\n            this.counting = true;\r\n            if (this.emitEvents) {\r\n                /**\r\n                 * Countdown start event.\r\n                 * @event Countdown#start\r\n                 */\r\n                this.$emit(EVENT_START);\r\n            }\r\n            if (document.visibilityState === \'visible\') {\r\n                this.continue();\r\n            }\r\n        },\r\n        /**\r\n         * Continues the countdown.\r\n         * @private\r\n         */\r\n        continue() {\r\n            if (!this.counting) {\r\n                return;\r\n            }\r\n            const delay = Math.min(this.totalMilliseconds, this.interval);\r\n            if (delay > 0) {\r\n                let init;\r\n                let prev;\r\n                const step = (now) => {\r\n                    if (!init) {\r\n                        init = now;\r\n                    }\r\n                    if (!prev) {\r\n                        prev = now;\r\n                    }\r\n                    const range = now - init;\r\n                    if (range >= delay\r\n                        // Avoid losing time about one second per minute (now - prev ≈ 16ms) (#43)\r\n                        || range + ((now - prev) / 2) >= delay) {\r\n                        this.progress();\r\n                    }\r\n                    else {\r\n                        this.requestId = requestAnimationFrame(step);\r\n                    }\r\n                    prev = now;\r\n                };\r\n                this.requestId = requestAnimationFrame(step);\r\n            }\r\n            else {\r\n                this.end();\r\n            }\r\n        },\r\n        /**\r\n         * Pauses the countdown.\r\n         * @private\r\n         */\r\n        pause() {\r\n            cancelAnimationFrame(this.requestId);\r\n        },\r\n        /**\r\n         * Progresses to countdown.\r\n         * @private\r\n         * @emits Countdown#progress\r\n         */\r\n        progress() {\r\n            if (!this.counting) {\r\n                return;\r\n            }\r\n            this.totalMilliseconds -= this.interval;\r\n            if (this.emitEvents && this.totalMilliseconds > 0) {\r\n                /**\r\n                 * Countdown progress event.\r\n                 * @event Countdown#progress\r\n                 */\r\n                this.$emit(EVENT_PROGRESS, {\r\n                    days: this.days,\r\n                    hours: this.hours,\r\n                    minutes: this.minutes,\r\n                    seconds: this.seconds,\r\n                    milliseconds: this.milliseconds,\r\n                    totalDays: this.totalDays,\r\n                    totalHours: this.totalHours,\r\n                    totalMinutes: this.totalMinutes,\r\n                    totalSeconds: this.totalSeconds,\r\n                    totalMilliseconds: this.totalMilliseconds,\r\n                });\r\n            }\r\n            this.continue();\r\n        },\r\n        /**\r\n         * Aborts the countdown.\r\n         * @public\r\n         * @emits Countdown#abort\r\n         */\r\n        abort() {\r\n            if (!this.counting) {\r\n                return;\r\n            }\r\n            this.pause();\r\n            this.counting = false;\r\n            if (this.emitEvents) {\r\n                /**\r\n                 * Countdown abort event.\r\n                 * @event Countdown#abort\r\n                 */\r\n                this.$emit(EVENT_ABORT);\r\n            }\r\n        },\r\n        /**\r\n         * Ends the countdown.\r\n         * @public\r\n         * @emits Countdown#end\r\n         */\r\n        end() {\r\n            if (!this.counting) {\r\n                return;\r\n            }\r\n            this.pause();\r\n            this.totalMilliseconds = 0;\r\n            this.counting = false;\r\n            if (this.emitEvents) {\r\n                /**\r\n                 * Countdown end event.\r\n                 * @event Countdown#end\r\n                 */\r\n                this.$emit(EVENT_END);\r\n            }\r\n        },\r\n        /**\r\n         * Updates the count.\r\n         * @private\r\n         */\r\n        update() {\r\n            if (this.counting) {\r\n                this.totalMilliseconds = Math.max(0, this.endTime - this.now());\r\n            }\r\n        },\r\n        /**\r\n         * visibility change event handler.\r\n         * @private\r\n         */\r\n        handleVisibilityChange() {\r\n            switch (document.visibilityState) {\r\n                case \'visible\':\r\n                    this.update();\r\n                    this.continue();\r\n                    break;\r\n                case \'hidden\':\r\n                    this.pause();\r\n                    break;\r\n            }\r\n        },\r\n    },\r\n    render() {\r\n        return h(this.tag, this.$slots.default ? [\r\n            this.$slots.default(this.transform({\r\n                days: this.days,\r\n                hours: this.hours,\r\n                minutes: this.minutes,\r\n                seconds: this.seconds,\r\n                milliseconds: this.milliseconds,\r\n                totalDays: this.totalDays,\r\n                totalHours: this.totalHours,\r\n                totalMinutes: this.totalMinutes,\r\n                totalSeconds: this.totalSeconds,\r\n                totalMilliseconds: this.totalMilliseconds,\r\n            })),\r\n        ] : undefined);\r\n    },\r\n});\n\n\n\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[11].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/reusables/OfferModal.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */\n/* harmony default export */ var OfferModalvue_type_script_lang_js = ({\n  components: {\n    VueCountdown: vue_countdown_esm_index\n  },\n  props: {\n    title: {\n      type: String,\n      required: false,\n      "default": ""\n    },\n    mobileTitle: {\n      type: String,\n      required: false,\n      "default": ""\n    },\n    image: {\n      type: String,\n      required: false,\n      "default": ""\n    },\n    visible: {\n      type: Boolean,\n      required: true,\n      "default": false\n    },\n    countdownTo: {\n      type: Number,\n      required: false,\n      "default": 0\n    }\n  },\n  emits: ["close"],\n  computed: {\n    isVisible: function isVisible() {\n      return this.visible;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/vue/components/reusables/OfferModal.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */ \n// EXTERNAL MODULE: ./node_modules/vue-loader/dist/exportHelper.js\nvar exportHelper = __webpack_require__(744);\n;// CONCATENATED MODULE: ./src/vue/components/reusables/OfferModal.vue\n/* unplugin-vue-components disabled */\n\n\n\n;\n\n\nconst __exports__ = /*#__PURE__*/(0,exportHelper/* default */.Z)(OfferModalvue_type_script_lang_js, [[\'render\',OfferModalvue_type_template_id_419821d6_render]])\n\n/* harmony default export */ var OfferModal = (__exports__);\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[11].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/CartPageUpsell/UpsellModal.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */\n\n\n\nfunction UpsellModalvue_type_script_lang_js_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction UpsellModalvue_type_script_lang_js_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? UpsellModalvue_type_script_lang_js_ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : UpsellModalvue_type_script_lang_js_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n/* harmony default export */ var UpsellModalvue_type_script_lang_js = ({\n  components: {\n    OfferModal: OfferModal\n  },\n  computed: UpsellModalvue_type_script_lang_js_objectSpread(UpsellModalvue_type_script_lang_js_objectSpread({}, mapGetters("app", ["loading", "upsellModalOpened", "upsellTo", "upsellFrom", "upsellOptions"])), {}, {\n    countdownTo: function countdownTo() {\n      var d = new Date();\n      d.setHours(24, 0, 0, 0);\n      var delta = d - new Date();\n      return delta >= 60 * 60 * 1000 ? delta : 0;\n    },\n    preWord: function preWord() {\n      var nextLetter = this.upsellTo.title ? this.upsellTo.title.slice(0, 1).toLowerCase() : null;\n      if (["a"].includes(nextLetter)) return "an";\n      return "a";\n    }\n  }),\n  methods: UpsellModalvue_type_script_lang_js_objectSpread(UpsellModalvue_type_script_lang_js_objectSpread({}, mapMutations({\n    setUpsellModalOpened: "app/setUpsellModalOpened",\n    setUpsellToId: "app/setUpsellToId"\n  })), {}, {\n    usdCurrency: function usdCurrency(val) {\n      return "$" + (val / 100).toFixed(2);\n    },\n    generateLabelString: function generateLabelString(option) {\n      return "Add ".concat(option.label, " packets (+").concat(this.usdCurrency(option.savings), ")");\n    },\n    handleConfirm: function handleConfirm() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {\n        return regenerator_default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(_this.upsellTo);\n                _context.prev = 1;\n                _context.next = 4;\n                return _this.$store.dispatch("app/swapItemInCart", _this.upsellTo);\n\n              case 4:\n                ElNotification.success({\n                  title: "Success!"\n                });\n\n                _this.closeModal();\n\n                localStorage.setItem("usedUpsellBanner", true);\n                location.reload();\n                _context.next = 14;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context["catch"](1);\n                console.error(_context.t0);\n                ElNotification.error({\n                  title: "Error",\n                  message: "Try again?"\n                });\n\n              case 14:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 10]]);\n      }))();\n    },\n    handleDeny: function handleDeny() {\n      this.closeModal();\n    },\n    closeModal: function closeModal() {\n      this.setUpsellModalOpened(false);\n    }\n  })\n});\n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/UpsellModal.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */ \n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/UpsellModal.vue\n/* unplugin-vue-components disabled */\n\n\n\n;\n\n\nconst UpsellModal_exports_ = /*#__PURE__*/(0,exportHelper/* default */.Z)(UpsellModalvue_type_script_lang_js, [[\'render\',UpsellModalvue_type_template_id_4dfab33f_render]])\n\n/* harmony default export */ var UpsellModal = (UpsellModal_exports_);\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[3].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[5]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/CartPageUpsell/ViewUpsellButton.vue?vue&type=template&id=61905c7d\n/* unplugin-vue-components disabled */\n\n\nvar ViewUpsellButtonvue_type_template_id_61905c7d_hoisted_1 = /*#__PURE__*/createBaseVNode("i", {\n  "class": "el-icon-sell"\n}, null, -1);\n\nfunction ViewUpsellButtonvue_type_template_id_61905c7d_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_button = ElButton;\n\n  return $options.isVisible ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_button, {\n    key: 0,\n    type: "primary",\n    "class": "view-offer-button",\n    circle: "",\n    onClick: _cache[0] || (_cache[0] = function ($event) {\n      return $options.openUpsellModal();\n    })\n  }, {\n    "default": withCtx(function () {\n      return [ViewUpsellButtonvue_type_template_id_61905c7d_hoisted_1];\n    }),\n    _: 1\n  })) : runtime_core_esm_bundler_createCommentVNode("", true);\n}\n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/ViewUpsellButton.vue?vue&type=template&id=61905c7d\n/* unplugin-vue-components disabled */\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[11].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/CartPageUpsell/ViewUpsellButton.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */\n\nfunction ViewUpsellButtonvue_type_script_lang_js_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction ViewUpsellButtonvue_type_script_lang_js_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ViewUpsellButtonvue_type_script_lang_js_ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ViewUpsellButtonvue_type_script_lang_js_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n/* harmony default export */ var ViewUpsellButtonvue_type_script_lang_js = ({\n  props: {\n    variantId: {\n      type: Number,\n      required: false,\n      "default": 0\n    }\n  },\n  computed: ViewUpsellButtonvue_type_script_lang_js_objectSpread(ViewUpsellButtonvue_type_script_lang_js_objectSpread({}, mapGetters("app", ["upsellOffers", "upsellFrom"])), {}, {\n    isVisible: function isVisible() {\n      if (!this.variantId) return false;\n      return this.upsellOffers && this.upsellOffers[this.variantId] && this.upsellOffers[this.variantId].options.length && this.upsellFrom && this.upsellFrom.id === this.variantId;\n    }\n  }),\n  methods: {\n    openUpsellModal: function openUpsellModal() {\n      if (!this.variantId) return;\n      window.CartPageUpsellApp.showUpsellModal(Number(this.variantId));\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/ViewUpsellButton.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */ \n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/ViewUpsellButton.vue\n/* unplugin-vue-components disabled */\n\n\n\n;\n\n\nconst ViewUpsellButton_exports_ = /*#__PURE__*/(0,exportHelper/* default */.Z)(ViewUpsellButtonvue_type_script_lang_js, [[\'render\',ViewUpsellButtonvue_type_template_id_61905c7d_render]])\n\n/* harmony default export */ var ViewUpsellButton = (ViewUpsellButton_exports_);\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/src/card.scss\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/card/style/index.mjs\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/card/src/card.mjs\n\n\n\nconst cardProps = props_buildProps({\n  header: {\n    type: String,\n    default: ""\n  },\n  bodyStyle: {\n    type: definePropType([String, Object, Array]),\n    default: ""\n  },\n  shadow: {\n    type: String,\n    default: "always"\n  }\n});\n\n\n//# sourceMappingURL=card.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/card/src/card2.mjs\n\n\n\n\n\nconst card2_default_ = {\n  name: "ElCard"\n};\nconst card2_sfc_main = /* @__PURE__ */ defineComponent({\n  ...card2_default_,\n  props: cardProps,\n  setup(__props) {\n    const ns = useNamespace("card");\n    return (_ctx, _cache) => {\n      return runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n        class: normalizeClass([reactivity_esm_bundler_unref(ns).b(), reactivity_esm_bundler_unref(ns).is(`${_ctx.shadow}-shadow`)])\n      }, [\n        _ctx.$slots.header || _ctx.header ? (runtime_core_esm_bundler_openBlock(), createElementBlock("div", {\n          key: 0,\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("header"))\n        }, [\n          renderSlot(_ctx.$slots, "header", {}, () => [\n            createTextVNode(toDisplayString(_ctx.header), 1)\n          ])\n        ], 2)) : runtime_core_esm_bundler_createCommentVNode("v-if", true),\n        createBaseVNode("div", {\n          class: normalizeClass(reactivity_esm_bundler_unref(ns).e("body")),\n          style: normalizeStyle(_ctx.bodyStyle)\n        }, [\n          renderSlot(_ctx.$slots, "default")\n        ], 6)\n      ], 2);\n    };\n  }\n});\n\n\n//# sourceMappingURL=card2.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/element-plus/es/components/card/index.mjs\n\n\n\n\n\nconst ElCard = withInstall(card2_sfc_main);\n\n\n//# sourceMappingURL=index.mjs.map\n\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[3].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[5]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/CartPageUpsell/CrossSellRow.vue?vue&type=template&id=a5d58dc4\n/* unplugin-vue-components disabled */\n\n\n\n\nvar CrossSellRowvue_type_template_id_a5d58dc4_hoisted_1 = {\n  "class": "cross-sell-banner"\n};\nvar CrossSellRowvue_type_template_id_a5d58dc4_hoisted_2 = {\n  "class": "card-body"\n};\nvar CrossSellRowvue_type_template_id_a5d58dc4_hoisted_3 = {\n  "class": "card-header"\n};\n\nvar CrossSellRowvue_type_template_id_a5d58dc4_hoisted_4 = /*#__PURE__*/createBaseVNode("h3", null, "Try both flavors!", -1);\n\nvar CrossSellRowvue_type_template_id_a5d58dc4_hoisted_5 = /*#__PURE__*/createTextVNode(" Add To Cart ");\n\nfunction CrossSellRowvue_type_template_id_a5d58dc4_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_button = ElButton;\n\n  var _component_el_option = ElOption;\n\n  var _component_el_select = ElSelect;\n\n  var _component_el_card = ElCard;\n\n  return runtime_core_esm_bundler_openBlock(), createElementBlock("div", CrossSellRowvue_type_template_id_a5d58dc4_hoisted_1, [_ctx.crossSellTo ? (runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_card, {\n    key: 0,\n    "class": "cross-sell-card"\n  }, {\n    "default": withCtx(function () {\n      return [createBaseVNode("div", CrossSellRowvue_type_template_id_a5d58dc4_hoisted_2, [createBaseVNode("div", CrossSellRowvue_type_template_id_a5d58dc4_hoisted_3, [CrossSellRowvue_type_template_id_a5d58dc4_hoisted_4, createVNode(_component_el_button, {\n        "class": "button",\n        disabled: _ctx.loading,\n        onClick: _cache[0] || (_cache[0] = function ($event) {\n          return $options.handleConfirm();\n        })\n      }, {\n        "default": withCtx(function () {\n          return [CrossSellRowvue_type_template_id_a5d58dc4_hoisted_5];\n        }),\n        _: 1\n      }, 8, ["disabled"])]), createVNode(_component_el_select, {\n        "model-value": _ctx.crossSellTo.variant_id,\n        placeholder: "Select",\n        "class": "cross-sell-options-select",\n        onChange: _ctx.setCrossSellToId\n      }, {\n        "default": withCtx(function () {\n          return [(runtime_core_esm_bundler_openBlock(true), createElementBlock(runtime_core_esm_bundler_Fragment, null, renderList(_ctx.crossSellOptions, function (option) {\n            return runtime_core_esm_bundler_openBlock(), runtime_core_esm_bundler_createBlock(_component_el_option, {\n              key: option.variant_id,\n              label: "".concat(option.title, " (+").concat($options.usdCurrency(option.price), ")"),\n              value: option.variant_id,\n              disabled: _ctx.loading\n            }, null, 8, ["label", "value", "disabled"]);\n          }), 128))];\n        }),\n        _: 1\n      }, 8, ["model-value", "onChange"])])];\n    }),\n    _: 1\n  })) : runtime_core_esm_bundler_createCommentVNode("", true)]);\n}\n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/CrossSellRow.vue?vue&type=template&id=a5d58dc4\n/* unplugin-vue-components disabled */\n;// CONCATENATED MODULE: ./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[11].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[19].use[0]!./node_modules/unplugin/dist/webpack/loaders/transform.js??ruleSet[1].rules[20].use[0]!./node_modules/babel-loader/lib/index.js??clonedRuleSet-5!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./src/vue/components/CartPageUpsell/CrossSellRow.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */\n\n\n\nfunction CrossSellRowvue_type_script_lang_js_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction CrossSellRowvue_type_script_lang_js_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? CrossSellRowvue_type_script_lang_js_ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : CrossSellRowvue_type_script_lang_js_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n/* harmony default export */ var CrossSellRowvue_type_script_lang_js = ({\n  computed: CrossSellRowvue_type_script_lang_js_objectSpread({}, mapGetters("app", ["loading", "crossSellTo", "crossSellOptions"])),\n  methods: CrossSellRowvue_type_script_lang_js_objectSpread(CrossSellRowvue_type_script_lang_js_objectSpread({}, mapMutations({\n    setCrossSellToId: "app/setCrossSellToId"\n  })), {}, {\n    usdCurrency: function usdCurrency(val) {\n      return "$" + (val / 100).toFixed(2);\n    },\n    handleConfirm: function handleConfirm() {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee() {\n        return regenerator_default().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _this.$store.dispatch("app/addItemToCart", _this.crossSellTo);\n\n              case 3:\n                ElNotification.success({\n                  title: "Success!"\n                });\n                location.reload();\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context["catch"](0);\n                console.error(_context.t0);\n                ElNotification.error({\n                  title: "Error",\n                  message: "Try again?"\n                });\n\n              case 11:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }))();\n    }\n  })\n});\n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/CrossSellRow.vue?vue&type=script&lang=js\n/* unplugin-vue-components disabled */ \n;// CONCATENATED MODULE: ./src/vue/components/CartPageUpsell/CrossSellRow.vue\n/* unplugin-vue-components disabled */\n\n\n\n;\n\n\nconst CrossSellRow_exports_ = /*#__PURE__*/(0,exportHelper/* default */.Z)(CrossSellRowvue_type_script_lang_js, [[\'render\',CrossSellRowvue_type_template_id_a5d58dc4_render]])\n\n/* harmony default export */ var CrossSellRow = (CrossSellRow_exports_);\n;// CONCATENATED MODULE: ./node_modules/element-plus/theme-chalk/display.css\n// extracted by mini-css-extract-plugin\n\n;// CONCATENATED MODULE: ./src/apps/CartPageUpsell.js\n\n\nfunction CartPageUpsell_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction CartPageUpsell_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? CartPageUpsell_ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : CartPageUpsell_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n // Global Styles\n\n\n\nvar mountElementId = "#vue-cart-page-upsell";\nvar mountEl = document.querySelector(mountElementId);\nconsole.log("%c[CartPageUpsell] - Will@UsefulShopifyApps.com", "color:#bada55");\n\nif (!mountEl) {\n  console.log("Could not find ".concat(mountElementId));\n} else {\n  mountEl.style.display = "none"; // initalize app\n\n  var props = {};\n\n  var rawProps = CartPageUpsell_objectSpread({}, mountEl.dataset);\n\n  for (var field in rawProps) {\n    var value = rawProps[field];\n    props[field] = value;\n\n    try {\n      props[field] = JSON.parse(value);\n    } catch (err) {\n      continue;\n    }\n  }\n\n  var components = {\n    UpsellModal: UpsellModal,\n    ViewUpsellButton: ViewUpsellButton,\n    CrossSellRow: CrossSellRow\n  };\n  var store = createStore({\n    strict: "production" !== \'production\',\n    modules: {\n      app: app_store\n    }\n  });\n  var app = createApp({\n    components: components,\n    methods: {\n      showUpsellModal: function showUpsellModal(fromId) {\n        if (fromId) {\n          this.$store.commit("app/setUpsellFromId", fromId);\n          this.$store.dispatch("app/initalizeUpsellToId");\n        }\n\n        this.$store.commit("app/setUpsellModalOpened", true);\n      }\n    }\n  });\n  app.use(ElNotification);\n  app.use(store);\n  store.dispatch("app/init", props.discountedVariants);\n  window.CartPageUpsellApp = app.mount(mountElementId);\n  mountEl.style.display = "";\n  props.showPopupOnLoad = props.showPopupOnLoad !== undefined ? props.showPopupOnLoad : true;\n  var usedLocalStorage = window.localStorage.getItem("usedUpsellBanner");\n\n  if (props.showPopupOnLoad && !usedLocalStorage) {\n    store.commit("app/setUpsellModalOpened", true);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///699\n')},744:function(__unused_webpack_module,exports){"use strict";eval("var __webpack_unused_export__;\n\n__webpack_unused_export__ = ({ value: true });\n// runtime helper for setting properties on components\n// in a tree-shakable way\nexports.Z = (sfc, props) => {\n    const target = sfc.__vccOpts || sfc;\n    for (const [key, val] of props) {\n        target[key] = val;\n    }\n    return target;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzQ0LmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiLDZCQUE2QyxFQUFFLGFBQWEsQ0FBQztBQUM3RDtBQUNBO0FBQ0EsU0FBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3Nob3BpZnktdGhlbWUtbGFiLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvZGlzdC9leHBvcnRIZWxwZXIuanM/YjlhNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIHJ1bnRpbWUgaGVscGVyIGZvciBzZXR0aW5nIHByb3BlcnRpZXMgb24gY29tcG9uZW50c1xuLy8gaW4gYSB0cmVlLXNoYWthYmxlIHdheVxuZXhwb3J0cy5kZWZhdWx0ID0gKHNmYywgcHJvcHMpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBzZmMuX192Y2NPcHRzIHx8IHNmYztcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgcHJvcHMpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///744\n")}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g](n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=function(g,I){for(var n in I)__webpack_require__.o(I,n)&&!__webpack_require__.o(g,n)&&Object.defineProperty(g,n,{enumerable:!0,get:I[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(g){if("object"==typeof window)return window}}(),__webpack_require__.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},__webpack_require__.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(699)})();